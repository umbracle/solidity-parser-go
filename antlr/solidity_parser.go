// Code generated from ./antlr/Solidity.g4 by ANTLR 4.9.3. DO NOT EDIT.

package solcparser // Solidity
import (
	"fmt"
	"reflect"
	"strconv"

	"github.com/antlr/antlr4/runtime/Go/antlr"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = reflect.Copy
var _ = strconv.Itoa


var parserATN = []uint16{
	3, 24715, 42794, 33075, 47597, 16764, 15335, 30598, 22884, 3, 135, 1133, 
	4, 2, 9, 2, 4, 3, 9, 3, 4, 4, 9, 4, 4, 5, 9, 5, 4, 6, 9, 6, 4, 7, 9, 7, 
	4, 8, 9, 8, 4, 9, 9, 9, 4, 10, 9, 10, 4, 11, 9, 11, 4, 12, 9, 12, 4, 13, 
	9, 13, 4, 14, 9, 14, 4, 15, 9, 15, 4, 16, 9, 16, 4, 17, 9, 17, 4, 18, 9, 
	18, 4, 19, 9, 19, 4, 20, 9, 20, 4, 21, 9, 21, 4, 22, 9, 22, 4, 23, 9, 23, 
	4, 24, 9, 24, 4, 25, 9, 25, 4, 26, 9, 26, 4, 27, 9, 27, 4, 28, 9, 28, 4, 
	29, 9, 29, 4, 30, 9, 30, 4, 31, 9, 31, 4, 32, 9, 32, 4, 33, 9, 33, 4, 34, 
	9, 34, 4, 35, 9, 35, 4, 36, 9, 36, 4, 37, 9, 37, 4, 38, 9, 38, 4, 39, 9, 
	39, 4, 40, 9, 40, 4, 41, 9, 41, 4, 42, 9, 42, 4, 43, 9, 43, 4, 44, 9, 44, 
	4, 45, 9, 45, 4, 46, 9, 46, 4, 47, 9, 47, 4, 48, 9, 48, 4, 49, 9, 49, 4, 
	50, 9, 50, 4, 51, 9, 51, 4, 52, 9, 52, 4, 53, 9, 53, 4, 54, 9, 54, 4, 55, 
	9, 55, 4, 56, 9, 56, 4, 57, 9, 57, 4, 58, 9, 58, 4, 59, 9, 59, 4, 60, 9, 
	60, 4, 61, 9, 61, 4, 62, 9, 62, 4, 63, 9, 63, 4, 64, 9, 64, 4, 65, 9, 65, 
	4, 66, 9, 66, 4, 67, 9, 67, 4, 68, 9, 68, 4, 69, 9, 69, 4, 70, 9, 70, 4, 
	71, 9, 71, 4, 72, 9, 72, 4, 73, 9, 73, 4, 74, 9, 74, 4, 75, 9, 75, 4, 76, 
	9, 76, 4, 77, 9, 77, 4, 78, 9, 78, 4, 79, 9, 79, 4, 80, 9, 80, 4, 81, 9, 
	81, 4, 82, 9, 82, 4, 83, 9, 83, 4, 84, 9, 84, 4, 85, 9, 85, 4, 86, 9, 86, 
	4, 87, 9, 87, 4, 88, 9, 88, 4, 89, 9, 89, 4, 90, 9, 90, 4, 91, 9, 91, 4, 
	92, 9, 92, 4, 93, 9, 93, 4, 94, 9, 94, 4, 95, 9, 95, 4, 96, 9, 96, 4, 97, 
	9, 97, 4, 98, 9, 98, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 2, 3, 
	2, 7, 2, 206, 10, 2, 12, 2, 14, 2, 209, 11, 2, 3, 2, 3, 2, 3, 3, 3, 3, 
	3, 3, 3, 3, 3, 3, 3, 4, 3, 4, 3, 5, 3, 5, 5, 5, 222, 10, 5, 3, 6, 3, 6, 
	5, 6, 226, 10, 6, 3, 6, 7, 6, 229, 10, 6, 12, 6, 14, 6, 232, 11, 6, 3, 
	7, 3, 7, 3, 8, 5, 8, 237, 10, 8, 3, 8, 3, 8, 5, 8, 241, 10, 8, 3, 8, 5, 
	8, 244, 10, 8, 3, 9, 3, 9, 3, 9, 5, 9, 249, 10, 9, 3, 10, 3, 10, 3, 10, 
	3, 10, 5, 10, 255, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 262, 
	10, 10, 3, 10, 3, 10, 5, 10, 266, 10, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 
	10, 3, 10, 3, 10, 3, 10, 3, 10, 7, 10, 277, 10, 10, 12, 10, 14, 10, 280, 
	11, 10, 3, 10, 3, 10, 3, 10, 3, 10, 3, 10, 5, 10, 287, 10, 10, 3, 11, 3, 
	11, 3, 12, 5, 12, 292, 10, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 3, 12, 
	7, 12, 300, 10, 12, 12, 12, 14, 12, 303, 11, 12, 5, 12, 305, 10, 12, 3, 
	12, 3, 12, 7, 12, 309, 10, 12, 12, 12, 14, 12, 312, 11, 12, 3, 12, 3, 12, 
	3, 13, 3, 13, 3, 13, 5, 13, 319, 10, 13, 3, 13, 5, 13, 322, 10, 13, 3, 
	14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 3, 14, 5, 14, 333, 
	10, 14, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 3, 15, 7, 15, 342, 10, 
	15, 12, 15, 14, 15, 345, 11, 15, 3, 15, 3, 15, 3, 15, 5, 15, 350, 10, 15, 
	3, 15, 3, 15, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 16, 3, 17, 3, 
	17, 3, 17, 3, 17, 3, 17, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 18, 3, 19, 
	3, 19, 3, 19, 3, 19, 3, 19, 5, 19, 377, 10, 19, 3, 19, 3, 19, 3, 20, 3, 
	20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 3, 20, 7, 20, 389, 10, 20, 12, 20, 
	14, 20, 392, 11, 20, 5, 20, 394, 10, 20, 3, 20, 3, 20, 3, 21, 3, 21, 3, 
	21, 5, 21, 401, 10, 21, 3, 21, 3, 21, 7, 21, 405, 10, 21, 12, 21, 14, 21, 
	408, 11, 21, 3, 21, 3, 21, 5, 21, 412, 10, 21, 3, 22, 3, 22, 3, 22, 5, 
	22, 417, 10, 22, 3, 22, 5, 22, 420, 10, 22, 3, 23, 3, 23, 3, 23, 3, 23, 
	5, 23, 426, 10, 23, 3, 23, 3, 23, 5, 23, 430, 10, 23, 3, 24, 3, 24, 5, 
	24, 434, 10, 24, 3, 24, 3, 24, 3, 24, 5, 24, 439, 10, 24, 3, 25, 3, 25, 
	3, 25, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 3, 26, 7, 26, 452, 
	10, 26, 12, 26, 14, 26, 455, 11, 26, 3, 27, 3, 27, 3, 27, 3, 27, 5, 27, 
	461, 10, 27, 3, 27, 3, 27, 3, 28, 3, 28, 3, 29, 3, 29, 3, 29, 3, 29, 5, 
	29, 471, 10, 29, 3, 29, 3, 29, 7, 29, 475, 10, 29, 12, 29, 14, 29, 478, 
	11, 29, 3, 29, 3, 29, 3, 30, 3, 30, 3, 30, 3, 30, 7, 30, 486, 10, 30, 12, 
	30, 14, 30, 489, 11, 30, 5, 30, 491, 10, 30, 3, 30, 3, 30, 3, 31, 3, 31, 
	5, 31, 497, 10, 31, 3, 31, 5, 31, 500, 10, 31, 3, 32, 3, 32, 3, 32, 3, 
	32, 7, 32, 506, 10, 32, 12, 32, 14, 32, 509, 11, 32, 5, 32, 511, 10, 32, 
	3, 32, 3, 32, 3, 33, 3, 33, 5, 33, 517, 10, 33, 3, 33, 5, 33, 520, 10, 
	33, 3, 34, 3, 34, 3, 34, 3, 34, 7, 34, 526, 10, 34, 12, 34, 14, 34, 529, 
	11, 34, 5, 34, 531, 10, 34, 3, 34, 3, 34, 3, 35, 3, 35, 5, 35, 537, 10, 
	35, 3, 36, 3, 36, 5, 36, 541, 10, 36, 3, 36, 3, 36, 3, 37, 3, 37, 3, 37, 
	3, 37, 3, 37, 3, 37, 3, 37, 5, 37, 552, 10, 37, 3, 37, 3, 37, 3, 37, 5, 
	37, 557, 10, 37, 3, 37, 7, 37, 560, 10, 37, 12, 37, 14, 37, 563, 11, 37, 
	3, 38, 3, 38, 3, 38, 7, 38, 568, 10, 38, 12, 38, 14, 38, 571, 11, 38, 3, 
	39, 3, 39, 5, 39, 575, 10, 39, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 3, 40, 
	3, 40, 3, 41, 3, 41, 3, 41, 3, 41, 3, 41, 7, 41, 589, 10, 41, 12, 41, 14, 
	41, 592, 11, 41, 3, 41, 3, 41, 5, 41, 596, 10, 41, 3, 42, 3, 42, 3, 43, 
	3, 43, 3, 44, 3, 44, 7, 44, 604, 10, 44, 12, 44, 14, 44, 607, 11, 44, 3, 
	44, 3, 44, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 
	3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 3, 45, 5, 45, 626, 10, 45, 3, 46, 3, 
	46, 3, 46, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 3, 47, 5, 47, 638, 
	10, 47, 3, 48, 3, 48, 3, 48, 5, 48, 643, 10, 48, 3, 48, 3, 48, 6, 48, 647, 
	10, 48, 13, 48, 14, 48, 648, 3, 49, 3, 49, 5, 49, 653, 10, 49, 3, 49, 5, 
	49, 656, 10, 49, 3, 49, 3, 49, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 3, 50, 
	3, 51, 3, 51, 5, 51, 668, 10, 51, 3, 52, 3, 52, 3, 52, 3, 53, 3, 53, 3, 
	53, 3, 53, 5, 53, 677, 10, 53, 3, 53, 3, 53, 5, 53, 681, 10, 53, 3, 53, 
	5, 53, 684, 10, 53, 3, 53, 3, 53, 3, 53, 3, 54, 3, 54, 5, 54, 691, 10, 
	54, 3, 54, 3, 54, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 3, 55, 
	3, 56, 3, 56, 3, 56, 3, 57, 3, 57, 3, 57, 3, 58, 3, 58, 5, 58, 711, 10, 
	58, 3, 58, 3, 58, 3, 59, 3, 59, 3, 59, 3, 60, 3, 60, 3, 60, 3, 60, 3, 61, 
	3, 61, 3, 61, 3, 61, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 3, 62, 5, 
	62, 733, 10, 62, 3, 62, 3, 62, 5, 62, 737, 10, 62, 3, 62, 3, 62, 3, 63, 
	5, 63, 742, 10, 63, 3, 63, 3, 63, 5, 63, 746, 10, 63, 7, 63, 748, 10, 63, 
	12, 63, 14, 63, 751, 11, 63, 3, 64, 3, 64, 5, 64, 755, 10, 64, 3, 64, 7, 
	64, 758, 10, 64, 12, 64, 14, 64, 761, 11, 64, 3, 64, 5, 64, 764, 10, 64, 
	3, 64, 3, 64, 3, 65, 3, 65, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 
	66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 
	3, 66, 5, 66, 788, 10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 
	66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 
	66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 
	66, 3, 66, 3, 66, 3, 66, 5, 66, 842, 10, 66, 3, 66, 3, 66, 5, 66, 846, 
	10, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 
	3, 66, 3, 66, 3, 66, 3, 66, 3, 66, 7, 66, 862, 10, 66, 12, 66, 14, 66, 
	865, 11, 66, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 874, 
	10, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 3, 67, 5, 67, 882, 10, 67, 5, 
	67, 884, 10, 67, 3, 68, 3, 68, 3, 68, 7, 68, 889, 10, 68, 12, 68, 14, 68, 
	892, 11, 68, 3, 69, 3, 69, 3, 69, 7, 69, 897, 10, 69, 12, 69, 14, 69, 900, 
	11, 69, 3, 69, 5, 69, 903, 10, 69, 3, 70, 3, 70, 3, 70, 3, 70, 3, 71, 3, 
	71, 5, 71, 911, 10, 71, 3, 71, 3, 71, 5, 71, 915, 10, 71, 5, 71, 917, 10, 
	71, 3, 72, 3, 72, 3, 72, 3, 72, 3, 72, 3, 73, 3, 73, 7, 73, 926, 10, 73, 
	12, 73, 14, 73, 929, 11, 73, 3, 73, 3, 73, 3, 74, 3, 74, 3, 74, 3, 74, 
	3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 74, 3, 
	74, 3, 74, 3, 74, 3, 74, 5, 74, 951, 10, 74, 3, 75, 3, 75, 3, 75, 5, 75, 
	956, 10, 75, 3, 76, 3, 76, 3, 76, 3, 76, 3, 77, 3, 77, 3, 77, 3, 77, 5, 
	77, 966, 10, 77, 3, 77, 3, 77, 5, 77, 970, 10, 77, 3, 77, 3, 77, 7, 77, 
	974, 10, 77, 12, 77, 14, 77, 977, 11, 77, 3, 77, 5, 77, 980, 10, 77, 3, 
	78, 3, 78, 3, 78, 3, 78, 5, 78, 986, 10, 78, 3, 79, 3, 79, 3, 79, 3, 79, 
	3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 3, 80, 5, 80, 998, 10, 80, 3, 81, 3, 
	81, 3, 81, 7, 81, 1003, 10, 81, 12, 81, 14, 81, 1006, 11, 81, 3, 82, 3, 
	82, 3, 82, 3, 83, 3, 83, 3, 83, 3, 84, 3, 84, 3, 84, 7, 84, 1017, 10, 84, 
	12, 84, 14, 84, 1020, 11, 84, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 3, 85, 
	5, 85, 1028, 10, 85, 3, 86, 3, 86, 3, 86, 3, 86, 5, 86, 1034, 10, 86, 3, 
	86, 3, 86, 5, 86, 1038, 10, 86, 3, 86, 3, 86, 3, 87, 3, 87, 3, 87, 3, 88, 
	3, 88, 3, 88, 5, 88, 1048, 10, 88, 3, 88, 3, 88, 3, 88, 5, 88, 1053, 10, 
	88, 3, 88, 3, 88, 3, 89, 3, 89, 3, 89, 3, 89, 3, 90, 3, 90, 3, 90, 3, 90, 
	5, 90, 1065, 10, 90, 3, 91, 3, 91, 3, 91, 3, 91, 3, 92, 3, 92, 5, 92, 1073, 
	10, 92, 3, 92, 3, 92, 5, 92, 1077, 10, 92, 7, 92, 1079, 10, 92, 12, 92, 
	14, 92, 1082, 11, 92, 3, 92, 3, 92, 3, 92, 3, 92, 3, 92, 7, 92, 1089, 10, 
	92, 12, 92, 14, 92, 1092, 11, 92, 5, 92, 1094, 10, 92, 3, 92, 5, 92, 1097, 
	10, 92, 3, 93, 3, 93, 5, 93, 1101, 10, 93, 3, 94, 3, 94, 5, 94, 1105, 10, 
	94, 3, 95, 3, 95, 3, 96, 6, 96, 1110, 10, 96, 13, 96, 14, 96, 1111, 3, 
	97, 3, 97, 3, 97, 3, 97, 3, 97, 7, 97, 1119, 10, 97, 12, 97, 14, 97, 1122, 
	11, 97, 3, 97, 3, 97, 5, 97, 1126, 10, 97, 3, 98, 6, 98, 1129, 10, 98, 
	13, 98, 14, 98, 1130, 3, 98, 2, 4, 72, 130, 99, 2, 4, 6, 8, 10, 12, 14, 
	16, 18, 20, 22, 24, 26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 
	52, 54, 56, 58, 60, 62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 
	88, 90, 92, 94, 96, 98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 
	120, 122, 124, 126, 128, 130, 132, 134, 136, 138, 140, 142, 144, 146, 148, 
	150, 152, 154, 156, 158, 160, 162, 164, 166, 168, 170, 172, 174, 176, 178, 
	180, 182, 184, 186, 188, 190, 192, 194, 2, 17, 3, 2, 6, 12, 3, 2, 21, 23, 
	3, 2, 42, 44, 6, 2, 113, 113, 120, 120, 124, 124, 126, 126, 5, 2, 38, 38, 
	57, 60, 100, 104, 3, 2, 61, 62, 3, 2, 65, 66, 3, 2, 67, 68, 4, 2, 15, 15, 
	71, 72, 3, 2, 73, 74, 3, 2, 8, 11, 3, 2, 77, 78, 4, 2, 12, 12, 81, 90, 
	3, 2, 106, 107, 11, 2, 16, 16, 27, 27, 44, 44, 56, 56, 98, 98, 116, 116, 
	120, 120, 127, 127, 129, 130, 2, 1258, 2, 207, 3, 2, 2, 2, 4, 212, 3, 2, 
	2, 2, 6, 217, 3, 2, 2, 2, 8, 221, 3, 2, 2, 2, 10, 223, 3, 2, 2, 2, 12, 
	233, 3, 2, 2, 2, 14, 243, 3, 2, 2, 2, 16, 245, 3, 2, 2, 2, 18, 286, 3, 
	2, 2, 2, 20, 288, 3, 2, 2, 2, 22, 291, 3, 2, 2, 2, 24, 315, 3, 2, 2, 2, 
	26, 332, 3, 2, 2, 2, 28, 334, 3, 2, 2, 2, 30, 353, 3, 2, 2, 2, 32, 360, 
	3, 2, 2, 2, 34, 365, 3, 2, 2, 2, 36, 371, 3, 2, 2, 2, 38, 380, 3, 2, 2, 
	2, 40, 397, 3, 2, 2, 2, 42, 413, 3, 2, 2, 2, 44, 421, 3, 2, 2, 2, 46, 438, 
	3, 2, 2, 2, 48, 440, 3, 2, 2, 2, 50, 453, 3, 2, 2, 2, 52, 456, 3, 2, 2, 
	2, 54, 464, 3, 2, 2, 2, 56, 466, 3, 2, 2, 2, 58, 481, 3, 2, 2, 2, 60, 494, 
	3, 2, 2, 2, 62, 501, 3, 2, 2, 2, 64, 514, 3, 2, 2, 2, 66, 521, 3, 2, 2, 
	2, 68, 534, 3, 2, 2, 2, 70, 538, 3, 2, 2, 2, 72, 551, 3, 2, 2, 2, 74, 564, 
	3, 2, 2, 2, 76, 574, 3, 2, 2, 2, 78, 576, 3, 2, 2, 2, 80, 583, 3, 2, 2, 
	2, 82, 597, 3, 2, 2, 2, 84, 599, 3, 2, 2, 2, 86, 601, 3, 2, 2, 2, 88, 625, 
	3, 2, 2, 2, 90, 627, 3, 2, 2, 2, 92, 630, 3, 2, 2, 2, 94, 639, 3, 2, 2, 
	2, 96, 650, 3, 2, 2, 2, 98, 659, 3, 2, 2, 2, 100, 667, 3, 2, 2, 2, 102, 
	669, 3, 2, 2, 2, 104, 672, 3, 2, 2, 2, 106, 688, 3, 2, 2, 2, 108, 694, 
	3, 2, 2, 2, 110, 702, 3, 2, 2, 2, 112, 705, 3, 2, 2, 2, 114, 708, 3, 2, 
	2, 2, 116, 714, 3, 2, 2, 2, 118, 717, 3, 2, 2, 2, 120, 721, 3, 2, 2, 2, 
	122, 732, 3, 2, 2, 2, 124, 741, 3, 2, 2, 2, 126, 752, 3, 2, 2, 2, 128, 
	767, 3, 2, 2, 2, 130, 787, 3, 2, 2, 2, 132, 883, 3, 2, 2, 2, 134, 885, 
	3, 2, 2, 2, 136, 893, 3, 2, 2, 2, 138, 904, 3, 2, 2, 2, 140, 916, 3, 2, 
	2, 2, 142, 918, 3, 2, 2, 2, 144, 923, 3, 2, 2, 2, 146, 950, 3, 2, 2, 2, 
	148, 955, 3, 2, 2, 2, 150, 957, 3, 2, 2, 2, 152, 965, 3, 2, 2, 2, 154, 
	981, 3, 2, 2, 2, 156, 987, 3, 2, 2, 2, 158, 997, 3, 2, 2, 2, 160, 999, 
	3, 2, 2, 2, 162, 1007, 3, 2, 2, 2, 164, 1010, 3, 2, 2, 2, 166, 1013, 3, 
	2, 2, 2, 168, 1027, 3, 2, 2, 2, 170, 1029, 3, 2, 2, 2, 172, 1041, 3, 2, 
	2, 2, 174, 1044, 3, 2, 2, 2, 176, 1056, 3, 2, 2, 2, 178, 1064, 3, 2, 2, 
	2, 180, 1066, 3, 2, 2, 2, 182, 1096, 3, 2, 2, 2, 184, 1100, 3, 2, 2, 2, 
	186, 1102, 3, 2, 2, 2, 188, 1106, 3, 2, 2, 2, 190, 1109, 3, 2, 2, 2, 192, 
	1113, 3, 2, 2, 2, 194, 1128, 3, 2, 2, 2, 196, 206, 5, 4, 3, 2, 197, 206, 
	5, 18, 10, 2, 198, 206, 5, 22, 12, 2, 199, 206, 5, 56, 29, 2, 200, 206, 
	5, 38, 20, 2, 201, 206, 5, 44, 23, 2, 202, 206, 5, 30, 16, 2, 203, 206, 
	5, 32, 17, 2, 204, 206, 5, 34, 18, 2, 205, 196, 3, 2, 2, 2, 205, 197, 3, 
	2, 2, 2, 205, 198, 3, 2, 2, 2, 205, 199, 3, 2, 2, 2, 205, 200, 3, 2, 2, 
	2, 205, 201, 3, 2, 2, 2, 205, 202, 3, 2, 2, 2, 205, 203, 3, 2, 2, 2, 205, 
	204, 3, 2, 2, 2, 206, 209, 3, 2, 2, 2, 207, 205, 3, 2, 2, 2, 207, 208, 
	3, 2, 2, 2, 208, 210, 3, 2, 2, 2, 209, 207, 3, 2, 2, 2, 210, 211, 7, 2, 
	2, 3, 211, 3, 3, 2, 2, 2, 212, 213, 7, 3, 2, 2, 213, 214, 5, 6, 4, 2, 214, 
	215, 5, 8, 5, 2, 215, 216, 7, 4, 2, 2, 216, 5, 3, 2, 2, 2, 217, 218, 5, 
	188, 95, 2, 218, 7, 3, 2, 2, 2, 219, 222, 5, 10, 6, 2, 220, 222, 5, 130, 
	66, 2, 221, 219, 3, 2, 2, 2, 221, 220, 3, 2, 2, 2, 222, 9, 3, 2, 2, 2, 
	223, 230, 5, 14, 8, 2, 224, 226, 7, 5, 2, 2, 225, 224, 3, 2, 2, 2, 225, 
	226, 3, 2, 2, 2, 226, 227, 3, 2, 2, 2, 227, 229, 5, 14, 8, 2, 228, 225, 
	3, 2, 2, 2, 229, 232, 3, 2, 2, 2, 230, 228, 3, 2, 2, 2, 230, 231, 3, 2, 
	2, 2, 231, 11, 3, 2, 2, 2, 232, 230, 3, 2, 2, 2, 233, 234, 9, 2, 2, 2, 
	234, 13, 3, 2, 2, 2, 235, 237, 5, 12, 7, 2, 236, 235, 3, 2, 2, 2, 236, 
	237, 3, 2, 2, 2, 237, 238, 3, 2, 2, 2, 238, 244, 7, 132, 2, 2, 239, 241, 
	5, 12, 7, 2, 240, 239, 3, 2, 2, 2, 240, 241, 3, 2, 2, 2, 241, 242, 3, 2, 
	2, 2, 242, 244, 7, 106, 2, 2, 243, 236, 3, 2, 2, 2, 243, 240, 3, 2, 2, 
	2, 244, 15, 3, 2, 2, 2, 245, 248, 5, 188, 95, 2, 246, 247, 7, 13, 2, 2, 
	247, 249, 5, 188, 95, 2, 248, 246, 3, 2, 2, 2, 248, 249, 3, 2, 2, 2, 249, 
	17, 3, 2, 2, 2, 250, 251, 7, 14, 2, 2, 251, 254, 5, 20, 11, 2, 252, 253, 
	7, 13, 2, 2, 253, 255, 5, 188, 95, 2, 254, 252, 3, 2, 2, 2, 254, 255, 3, 
	2, 2, 2, 255, 256, 3, 2, 2, 2, 256, 257, 7, 4, 2, 2, 257, 287, 3, 2, 2, 
	2, 258, 261, 7, 14, 2, 2, 259, 262, 7, 15, 2, 2, 260, 262, 5, 188, 95, 
	2, 261, 259, 3, 2, 2, 2, 261, 260, 3, 2, 2, 2, 262, 265, 3, 2, 2, 2, 263, 
	264, 7, 13, 2, 2, 264, 266, 5, 188, 95, 2, 265, 263, 3, 2, 2, 2, 265, 266, 
	3, 2, 2, 2, 266, 267, 3, 2, 2, 2, 267, 268, 7, 16, 2, 2, 268, 269, 5, 20, 
	11, 2, 269, 270, 7, 4, 2, 2, 270, 287, 3, 2, 2, 2, 271, 272, 7, 14, 2, 
	2, 272, 273, 7, 17, 2, 2, 273, 278, 5, 16, 9, 2, 274, 275, 7, 18, 2, 2, 
	275, 277, 5, 16, 9, 2, 276, 274, 3, 2, 2, 2, 277, 280, 3, 2, 2, 2, 278, 
	276, 3, 2, 2, 2, 278, 279, 3, 2, 2, 2, 279, 281, 3, 2, 2, 2, 280, 278, 
	3, 2, 2, 2, 281, 282, 7, 19, 2, 2, 282, 283, 7, 16, 2, 2, 283, 284, 5, 
	20, 11, 2, 284, 285, 7, 4, 2, 2, 285, 287, 3, 2, 2, 2, 286, 250, 3, 2, 
	2, 2, 286, 258, 3, 2, 2, 2, 286, 271, 3, 2, 2, 2, 287, 19, 3, 2, 2, 2, 
	288, 289, 7, 131, 2, 2, 289, 21, 3, 2, 2, 2, 290, 292, 7, 20, 2, 2, 291, 
	290, 3, 2, 2, 2, 291, 292, 3, 2, 2, 2, 292, 293, 3, 2, 2, 2, 293, 294, 
	9, 3, 2, 2, 294, 304, 5, 188, 95, 2, 295, 296, 7, 24, 2, 2, 296, 301, 5, 
	24, 13, 2, 297, 298, 7, 18, 2, 2, 298, 300, 5, 24, 13, 2, 299, 297, 3, 
	2, 2, 2, 300, 303, 3, 2, 2, 2, 301, 299, 3, 2, 2, 2, 301, 302, 3, 2, 2, 
	2, 302, 305, 3, 2, 2, 2, 303, 301, 3, 2, 2, 2, 304, 295, 3, 2, 2, 2, 304, 
	305, 3, 2, 2, 2, 305, 306, 3, 2, 2, 2, 306, 310, 7, 17, 2, 2, 307, 309, 
	5, 26, 14, 2, 308, 307, 3, 2, 2, 2, 309, 312, 3, 2, 2, 2, 310, 308, 3, 
	2, 2, 2, 310, 311, 3, 2, 2, 2, 311, 313, 3, 2, 2, 2, 312, 310, 3, 2, 2, 
	2, 313, 314, 7, 19, 2, 2, 314, 23, 3, 2, 2, 2, 315, 321, 5, 74, 38, 2, 
	316, 318, 7, 25, 2, 2, 317, 319, 5, 134, 68, 2, 318, 317, 3, 2, 2, 2, 318, 
	319, 3, 2, 2, 2, 319, 320, 3, 2, 2, 2, 320, 322, 7, 26, 2, 2, 321, 316, 
	3, 2, 2, 2, 321, 322, 3, 2, 2, 2, 322, 25, 3, 2, 2, 2, 323, 333, 5, 28, 
	15, 2, 324, 333, 5, 36, 19, 2, 325, 333, 5, 38, 20, 2, 326, 333, 5, 40, 
	21, 2, 327, 333, 5, 44, 23, 2, 328, 333, 5, 52, 27, 2, 329, 333, 5, 56, 
	29, 2, 330, 333, 5, 32, 17, 2, 331, 333, 5, 34, 18, 2, 332, 323, 3, 2, 
	2, 2, 332, 324, 3, 2, 2, 2, 332, 325, 3, 2, 2, 2, 332, 326, 3, 2, 2, 2, 
	332, 327, 3, 2, 2, 2, 332, 328, 3, 2, 2, 2, 332, 329, 3, 2, 2, 2, 332, 
	330, 3, 2, 2, 2, 332, 331, 3, 2, 2, 2, 333, 27, 3, 2, 2, 2, 334, 343, 5, 
	72, 37, 2, 335, 342, 7, 122, 2, 2, 336, 342, 7, 119, 2, 2, 337, 342, 7, 
	121, 2, 2, 338, 342, 7, 113, 2, 2, 339, 342, 7, 114, 2, 2, 340, 342, 5, 
	192, 97, 2, 341, 335, 3, 2, 2, 2, 341, 336, 3, 2, 2, 2, 341, 337, 3, 2, 
	2, 2, 341, 338, 3, 2, 2, 2, 341, 339, 3, 2, 2, 2, 341, 340, 3, 2, 2, 2, 
	342, 345, 3, 2, 2, 2, 343, 341, 3, 2, 2, 2, 343, 344, 3, 2, 2, 2, 344, 
	346, 3, 2, 2, 2, 345, 343, 3, 2, 2, 2, 346, 349, 5, 188, 95, 2, 347, 348, 
	7, 12, 2, 2, 348, 350, 5, 130, 66, 2, 349, 347, 3, 2, 2, 2, 349, 350, 3, 
	2, 2, 2, 350, 351, 3, 2, 2, 2, 351, 352, 7, 4, 2, 2, 352, 29, 3, 2, 2, 
	2, 353, 354, 5, 72, 37, 2, 354, 355, 7, 113, 2, 2, 355, 356, 5, 188, 95, 
	2, 356, 357, 7, 12, 2, 2, 357, 358, 5, 130, 66, 2, 358, 359, 7, 4, 2, 2, 
	359, 31, 3, 2, 2, 2, 360, 361, 7, 27, 2, 2, 361, 362, 5, 188, 95, 2, 362, 
	363, 5, 58, 30, 2, 363, 364, 7, 4, 2, 2, 364, 33, 3, 2, 2, 2, 365, 366, 
	7, 125, 2, 2, 366, 367, 5, 188, 95, 2, 367, 368, 7, 24, 2, 2, 368, 369, 
	5, 128, 65, 2, 369, 370, 7, 4, 2, 2, 370, 35, 3, 2, 2, 2, 371, 372, 7, 
	28, 2, 2, 372, 373, 5, 188, 95, 2, 373, 376, 7, 29, 2, 2, 374, 377, 7, 
	15, 2, 2, 375, 377, 5, 72, 37, 2, 376, 374, 3, 2, 2, 2, 376, 375, 3, 2, 
	2, 2, 377, 378, 3, 2, 2, 2, 378, 379, 7, 4, 2, 2, 379, 37, 3, 2, 2, 2, 
	380, 381, 7, 30, 2, 2, 381, 382, 5, 188, 95, 2, 382, 393, 7, 17, 2, 2, 
	383, 384, 5, 70, 36, 2, 384, 390, 7, 4, 2, 2, 385, 386, 5, 70, 36, 2, 386, 
	387, 7, 4, 2, 2, 387, 389, 3, 2, 2, 2, 388, 385, 3, 2, 2, 2, 389, 392, 
	3, 2, 2, 2, 390, 388, 3, 2, 2, 2, 390, 391, 3, 2, 2, 2, 391, 394, 3, 2, 
	2, 2, 392, 390, 3, 2, 2, 2, 393, 383, 3, 2, 2, 2, 393, 394, 3, 2, 2, 2, 
	394, 395, 3, 2, 2, 2, 395, 396, 7, 19, 2, 2, 396, 39, 3, 2, 2, 2, 397, 
	398, 7, 31, 2, 2, 398, 400, 5, 188, 95, 2, 399, 401, 5, 58, 30, 2, 400, 
	399, 3, 2, 2, 2, 400, 401, 3, 2, 2, 2, 401, 406, 3, 2, 2, 2, 402, 405, 
	7, 123, 2, 2, 403, 405, 5, 192, 97, 2, 404, 402, 3, 2, 2, 2, 404, 403, 
	3, 2, 2, 2, 405, 408, 3, 2, 2, 2, 406, 404, 3, 2, 2, 2, 406, 407, 3, 2, 
	2, 2, 407, 411, 3, 2, 2, 2, 408, 406, 3, 2, 2, 2, 409, 412, 7, 4, 2, 2, 
	410, 412, 5, 86, 44, 2, 411, 409, 3, 2, 2, 2, 411, 410, 3, 2, 2, 2, 412, 
	41, 3, 2, 2, 2, 413, 419, 5, 188, 95, 2, 414, 416, 7, 25, 2, 2, 415, 417, 
	5, 134, 68, 2, 416, 415, 3, 2, 2, 2, 416, 417, 3, 2, 2, 2, 417, 418, 3, 
	2, 2, 2, 418, 420, 7, 26, 2, 2, 419, 414, 3, 2, 2, 2, 419, 420, 3, 2, 2, 
	2, 420, 43, 3, 2, 2, 2, 421, 422, 5, 46, 24, 2, 422, 423, 5, 58, 30, 2, 
	423, 425, 5, 50, 26, 2, 424, 426, 5, 48, 25, 2, 425, 424, 3, 2, 2, 2, 425, 
	426, 3, 2, 2, 2, 426, 429, 3, 2, 2, 2, 427, 430, 7, 4, 2, 2, 428, 430, 
	5, 86, 44, 2, 429, 427, 3, 2, 2, 2, 429, 428, 3, 2, 2, 2, 430, 45, 3, 2, 
	2, 2, 431, 433, 7, 32, 2, 2, 432, 434, 5, 188, 95, 2, 433, 432, 3, 2, 2, 
	2, 433, 434, 3, 2, 2, 2, 434, 439, 3, 2, 2, 2, 435, 439, 7, 127, 2, 2, 
	436, 439, 7, 128, 2, 2, 437, 439, 7, 129, 2, 2, 438, 431, 3, 2, 2, 2, 438, 
	435, 3, 2, 2, 2, 438, 436, 3, 2, 2, 2, 438, 437, 3, 2, 2, 2, 439, 47, 3, 
	2, 2, 2, 440, 441, 7, 33, 2, 2, 441, 442, 5, 58, 30, 2, 442, 49, 3, 2, 
	2, 2, 443, 452, 7, 117, 2, 2, 444, 452, 7, 122, 2, 2, 445, 452, 7, 119, 
	2, 2, 446, 452, 7, 121, 2, 2, 447, 452, 7, 123, 2, 2, 448, 452, 5, 84, 
	43, 2, 449, 452, 5, 42, 22, 2, 450, 452, 5, 192, 97, 2, 451, 443, 3, 2, 
	2, 2, 451, 444, 3, 2, 2, 2, 451, 445, 3, 2, 2, 2, 451, 446, 3, 2, 2, 2, 
	451, 447, 3, 2, 2, 2, 451, 448, 3, 2, 2, 2, 451, 449, 3, 2, 2, 2, 451, 
	450, 3, 2, 2, 2, 452, 455, 3, 2, 2, 2, 453, 451, 3, 2, 2, 2, 453, 454, 
	3, 2, 2, 2, 454, 51, 3, 2, 2, 2, 455, 453, 3, 2, 2, 2, 456, 457, 7, 34, 
	2, 2, 457, 458, 5, 188, 95, 2, 458, 460, 5, 62, 32, 2, 459, 461, 7, 111, 
	2, 2, 460, 459, 3, 2, 2, 2, 460, 461, 3, 2, 2, 2, 461, 462, 3, 2, 2, 2, 
	462, 463, 7, 4, 2, 2, 463, 53, 3, 2, 2, 2, 464, 465, 5, 188, 95, 2, 465, 
	55, 3, 2, 2, 2, 466, 467, 7, 35, 2, 2, 467, 468, 5, 188, 95, 2, 468, 470, 
	7, 17, 2, 2, 469, 471, 5, 54, 28, 2, 470, 469, 3, 2, 2, 2, 470, 471, 3, 
	2, 2, 2, 471, 476, 3, 2, 2, 2, 472, 473, 7, 18, 2, 2, 473, 475, 5, 54, 
	28, 2, 474, 472, 3, 2, 2, 2, 475, 478, 3, 2, 2, 2, 476, 474, 3, 2, 2, 2, 
	476, 477, 3, 2, 2, 2, 477, 479, 3, 2, 2, 2, 478, 476, 3, 2, 2, 2, 479, 
	480, 7, 19, 2, 2, 480, 57, 3, 2, 2, 2, 481, 490, 7, 25, 2, 2, 482, 487, 
	5, 60, 31, 2, 483, 484, 7, 18, 2, 2, 484, 486, 5, 60, 31, 2, 485, 483, 
	3, 2, 2, 2, 486, 489, 3, 2, 2, 2, 487, 485, 3, 2, 2, 2, 487, 488, 3, 2, 
	2, 2, 488, 491, 3, 2, 2, 2, 489, 487, 3, 2, 2, 2, 490, 482, 3, 2, 2, 2, 
	490, 491, 3, 2, 2, 2, 491, 492, 3, 2, 2, 2, 492, 493, 7, 26, 2, 2, 493, 
	59, 3, 2, 2, 2, 494, 496, 5, 72, 37, 2, 495, 497, 5, 82, 42, 2, 496, 495, 
	3, 2, 2, 2, 496, 497, 3, 2, 2, 2, 497, 499, 3, 2, 2, 2, 498, 500, 5, 188, 
	95, 2, 499, 498, 3, 2, 2, 2, 499, 500, 3, 2, 2, 2, 500, 61, 3, 2, 2, 2, 
	501, 510, 7, 25, 2, 2, 502, 507, 5, 64, 33, 2, 503, 504, 7, 18, 2, 2, 504, 
	506, 5, 64, 33, 2, 505, 503, 3, 2, 2, 2, 506, 509, 3, 2, 2, 2, 507, 505, 
	3, 2, 2, 2, 507, 508, 3, 2, 2, 2, 508, 511, 3, 2, 2, 2, 509, 507, 3, 2, 
	2, 2, 510, 502, 3, 2, 2, 2, 510, 511, 3, 2, 2, 2, 511, 512, 3, 2, 2, 2, 
	512, 513, 7, 26, 2, 2, 513, 63, 3, 2, 2, 2, 514, 516, 5, 72, 37, 2, 515, 
	517, 7, 118, 2, 2, 516, 515, 3, 2, 2, 2, 516, 517, 3, 2, 2, 2, 517, 519, 
	3, 2, 2, 2, 518, 520, 5, 188, 95, 2, 519, 518, 3, 2, 2, 2, 519, 520, 3, 
	2, 2, 2, 520, 65, 3, 2, 2, 2, 521, 530, 7, 25, 2, 2, 522, 527, 5, 68, 35, 
	2, 523, 524, 7, 18, 2, 2, 524, 526, 5, 68, 35, 2, 525, 523, 3, 2, 2, 2, 
	526, 529, 3, 2, 2, 2, 527, 525, 3, 2, 2, 2, 527, 528, 3, 2, 2, 2, 528, 
	531, 3, 2, 2, 2, 529, 527, 3, 2, 2, 2, 530, 522, 3, 2, 2, 2, 530, 531, 
	3, 2, 2, 2, 531, 532, 3, 2, 2, 2, 532, 533, 7, 26, 2, 2, 533, 67, 3, 2, 
	2, 2, 534, 536, 5, 72, 37, 2, 535, 537, 5, 82, 42, 2, 536, 535, 3, 2, 2, 
	2, 536, 537, 3, 2, 2, 2, 537, 69, 3, 2, 2, 2, 538, 540, 5, 72, 37, 2, 539, 
	541, 5, 82, 42, 2, 540, 539, 3, 2, 2, 2, 540, 541, 3, 2, 2, 2, 541, 542, 
	3, 2, 2, 2, 542, 543, 5, 188, 95, 2, 543, 71, 3, 2, 2, 2, 544, 545, 8, 
	37, 1, 2, 545, 552, 5, 128, 65, 2, 546, 552, 5, 74, 38, 2, 547, 552, 5, 
	78, 40, 2, 548, 552, 5, 80, 41, 2, 549, 550, 7, 38, 2, 2, 550, 552, 7, 
	120, 2, 2, 551, 544, 3, 2, 2, 2, 551, 546, 3, 2, 2, 2, 551, 547, 3, 2, 
	2, 2, 551, 548, 3, 2, 2, 2, 551, 549, 3, 2, 2, 2, 552, 561, 3, 2, 2, 2, 
	553, 554, 12, 5, 2, 2, 554, 556, 7, 36, 2, 2, 555, 557, 5, 130, 66, 2, 
	556, 555, 3, 2, 2, 2, 556, 557, 3, 2, 2, 2, 557, 558, 3, 2, 2, 2, 558, 
	560, 7, 37, 2, 2, 559, 553, 3, 2, 2, 2, 560, 563, 3, 2, 2, 2, 561, 559, 
	3, 2, 2, 2, 561, 562, 3, 2, 2, 2, 562, 73, 3, 2, 2, 2, 563, 561, 3, 2, 
	2, 2, 564, 569, 5, 188, 95, 2, 565, 566, 7, 39, 2, 2, 566, 568, 5, 188, 
	95, 2, 567, 565, 3, 2, 2, 2, 568, 571, 3, 2, 2, 2, 569, 567, 3, 2, 2, 2, 
	569, 570, 3, 2, 2, 2, 570, 75, 3, 2, 2, 2, 571, 569, 3, 2, 2, 2, 572, 575, 
	5, 128, 65, 2, 573, 575, 5, 74, 38, 2, 574, 572, 3, 2, 2, 2, 574, 573, 
	3, 2, 2, 2, 575, 77, 3, 2, 2, 2, 576, 577, 7, 40, 2, 2, 577, 578, 7, 25, 
	2, 2, 578, 579, 5, 76, 39, 2, 579, 580, 7, 41, 2, 2, 580, 581, 5, 72, 37, 
	2, 581, 582, 7, 26, 2, 2, 582, 79, 3, 2, 2, 2, 583, 584, 7, 32, 2, 2, 584, 
	590, 5, 66, 34, 2, 585, 589, 7, 119, 2, 2, 586, 589, 7, 117, 2, 2, 587, 
	589, 5, 84, 43, 2, 588, 585, 3, 2, 2, 2, 588, 586, 3, 2, 2, 2, 588, 587, 
	3, 2, 2, 2, 589, 592, 3, 2, 2, 2, 590, 588, 3, 2, 2, 2, 590, 591, 3, 2, 
	2, 2, 591, 595, 3, 2, 2, 2, 592, 590, 3, 2, 2, 2, 593, 594, 7, 33, 2, 2, 
	594, 596, 5, 66, 34, 2, 595, 593, 3, 2, 2, 2, 595, 596, 3, 2, 2, 2, 596, 
	81, 3, 2, 2, 2, 597, 598, 9, 4, 2, 2, 598, 83, 3, 2, 2, 2, 599, 600, 9, 
	5, 2, 2, 600, 85, 3, 2, 2, 2, 601, 605, 7, 17, 2, 2, 602, 604, 5, 88, 45, 
	2, 603, 602, 3, 2, 2, 2, 604, 607, 3, 2, 2, 2, 605, 603, 3, 2, 2, 2, 605, 
	606, 3, 2, 2, 2, 606, 608, 3, 2, 2, 2, 607, 605, 3, 2, 2, 2, 608, 609, 
	7, 19, 2, 2, 609, 87, 3, 2, 2, 2, 610, 626, 5, 92, 47, 2, 611, 626, 5, 
	94, 48, 2, 612, 626, 5, 98, 50, 2, 613, 626, 5, 104, 53, 2, 614, 626, 5, 
	86, 44, 2, 615, 626, 5, 106, 54, 2, 616, 626, 5, 108, 55, 2, 617, 626, 
	5, 110, 56, 2, 618, 626, 5, 112, 57, 2, 619, 626, 5, 114, 58, 2, 620, 626, 
	5, 116, 59, 2, 621, 626, 5, 118, 60, 2, 622, 626, 5, 100, 51, 2, 623, 626, 
	5, 102, 52, 2, 624, 626, 5, 120, 61, 2, 625, 610, 3, 2, 2, 2, 625, 611, 
	3, 2, 2, 2, 625, 612, 3, 2, 2, 2, 625, 613, 3, 2, 2, 2, 625, 614, 3, 2, 
	2, 2, 625, 615, 3, 2, 2, 2, 625, 616, 3, 2, 2, 2, 625, 617, 3, 2, 2, 2, 
	625, 618, 3, 2, 2, 2, 625, 619, 3, 2, 2, 2, 625, 620, 3, 2, 2, 2, 625, 
	621, 3, 2, 2, 2, 625, 622, 3, 2, 2, 2, 625, 623, 3, 2, 2, 2, 625, 624, 
	3, 2, 2, 2, 626, 89, 3, 2, 2, 2, 627, 628, 5, 130, 66, 2, 628, 629, 7, 
	4, 2, 2, 629, 91, 3, 2, 2, 2, 630, 631, 7, 45, 2, 2, 631, 632, 7, 25, 2, 
	2, 632, 633, 5, 130, 66, 2, 633, 634, 7, 26, 2, 2, 634, 637, 5, 88, 45, 
	2, 635, 636, 7, 46, 2, 2, 636, 638, 5, 88, 45, 2, 637, 635, 3, 2, 2, 2, 
	637, 638, 3, 2, 2, 2, 638, 93, 3, 2, 2, 2, 639, 640, 7, 47, 2, 2, 640, 
	642, 5, 130, 66, 2, 641, 643, 5, 48, 25, 2, 642, 641, 3, 2, 2, 2, 642, 
	643, 3, 2, 2, 2, 643, 644, 3, 2, 2, 2, 644, 646, 5, 86, 44, 2, 645, 647, 
	5, 96, 49, 2, 646, 645, 3, 2, 2, 2, 647, 648, 3, 2, 2, 2, 648, 646, 3, 
	2, 2, 2, 648, 649, 3, 2, 2, 2, 649, 95, 3, 2, 2, 2, 650, 655, 7, 48, 2, 
	2, 651, 653, 5, 188, 95, 2, 652, 651, 3, 2, 2, 2, 652, 653, 3, 2, 2, 2, 
	653, 654, 3, 2, 2, 2, 654, 656, 5, 58, 30, 2, 655, 652, 3, 2, 2, 2, 655, 
	656, 3, 2, 2, 2, 656, 657, 3, 2, 2, 2, 657, 658, 5, 86, 44, 2, 658, 97, 
	3, 2, 2, 2, 659, 660, 7, 49, 2, 2, 660, 661, 7, 25, 2, 2, 661, 662, 5, 
	130, 66, 2, 662, 663, 7, 26, 2, 2, 663, 664, 5, 88, 45, 2, 664, 99, 3, 
	2, 2, 2, 665, 668, 5, 122, 62, 2, 666, 668, 5, 90, 46, 2, 667, 665, 3, 
	2, 2, 2, 667, 666, 3, 2, 2, 2, 668, 101, 3, 2, 2, 2, 669, 670, 7, 50, 2, 
	2, 670, 671, 5, 86, 44, 2, 671, 103, 3, 2, 2, 2, 672, 673, 7, 29, 2, 2, 
	673, 676, 7, 25, 2, 2, 674, 677, 5, 100, 51, 2, 675, 677, 7, 4, 2, 2, 676, 
	674, 3, 2, 2, 2, 676, 675, 3, 2, 2, 2, 677, 680, 3, 2, 2, 2, 678, 681, 
	5, 90, 46, 2, 679, 681, 7, 4, 2, 2, 680, 678, 3, 2, 2, 2, 680, 679, 3, 
	2, 2, 2, 681, 683, 3, 2, 2, 2, 682, 684, 5, 130, 66, 2, 683, 682, 3, 2, 
	2, 2, 683, 684, 3, 2, 2, 2, 684, 685, 3, 2, 2, 2, 685, 686, 7, 26, 2, 2, 
	686, 687, 5, 88, 45, 2, 687, 105, 3, 2, 2, 2, 688, 690, 7, 51, 2, 2, 689, 
	691, 7, 131, 2, 2, 690, 689, 3, 2, 2, 2, 690, 691, 3, 2, 2, 2, 691, 692, 
	3, 2, 2, 2, 692, 693, 5, 144, 73, 2, 693, 107, 3, 2, 2, 2, 694, 695, 7, 
	52, 2, 2, 695, 696, 5, 88, 45, 2, 696, 697, 7, 49, 2, 2, 697, 698, 7, 25, 
	2, 2, 698, 699, 5, 130, 66, 2, 699, 700, 7, 26, 2, 2, 700, 701, 7, 4, 2, 
	2, 701, 109, 3, 2, 2, 2, 702, 703, 7, 115, 2, 2, 703, 704, 7, 4, 2, 2, 
	704, 111, 3, 2, 2, 2, 705, 706, 7, 112, 2, 2, 706, 707, 7, 4, 2, 2, 707, 
	113, 3, 2, 2, 2, 708, 710, 7, 53, 2, 2, 709, 711, 5, 130, 66, 2, 710, 709, 
	3, 2, 2, 2, 710, 711, 3, 2, 2, 2, 711, 712, 3, 2, 2, 2, 712, 713, 7, 4, 
	2, 2, 713, 115, 3, 2, 2, 2, 714, 715, 7, 54, 2, 2, 715, 716, 7, 4, 2, 2, 
	716, 117, 3, 2, 2, 2, 717, 718, 7, 55, 2, 2, 718, 719, 5, 142, 72, 2, 719, 
	720, 7, 4, 2, 2, 720, 119, 3, 2, 2, 2, 721, 722, 7, 56, 2, 2, 722, 723, 
	5, 142, 72, 2, 723, 724, 7, 4, 2, 2, 724, 121, 3, 2, 2, 2, 725, 726, 7, 
	57, 2, 2, 726, 733, 5, 126, 64, 2, 727, 733, 5, 70, 36, 2, 728, 729, 7, 
	25, 2, 2, 729, 730, 5, 124, 63, 2, 730, 731, 7, 26, 2, 2, 731, 733, 3, 
	2, 2, 2, 732, 725, 3, 2, 2, 2, 732, 727, 3, 2, 2, 2, 732, 728, 3, 2, 2, 
	2, 733, 736, 3, 2, 2, 2, 734, 735, 7, 12, 2, 2, 735, 737, 5, 130, 66, 2, 
	736, 734, 3, 2, 2, 2, 736, 737, 3, 2, 2, 2, 737, 738, 3, 2, 2, 2, 738, 
	739, 7, 4, 2, 2, 739, 123, 3, 2, 2, 2, 740, 742, 5, 70, 36, 2, 741, 740, 
	3, 2, 2, 2, 741, 742, 3, 2, 2, 2, 742, 749, 3, 2, 2, 2, 743, 745, 7, 18, 
	2, 2, 744, 746, 5, 70, 36, 2, 745, 744, 3, 2, 2, 2, 745, 746, 3, 2, 2, 
	2, 746, 748, 3, 2, 2, 2, 747, 743, 3, 2, 2, 2, 748, 751, 3, 2, 2, 2, 749, 
	747, 3, 2, 2, 2, 749, 750, 3, 2, 2, 2, 750, 125, 3, 2, 2, 2, 751, 749, 
	3, 2, 2, 2, 752, 759, 7, 25, 2, 2, 753, 755, 5, 188, 95, 2, 754, 753, 3, 
	2, 2, 2, 754, 755, 3, 2, 2, 2, 755, 756, 3, 2, 2, 2, 756, 758, 7, 18, 2, 
	2, 757, 754, 3, 2, 2, 2, 758, 761, 3, 2, 2, 2, 759, 757, 3, 2, 2, 2, 759, 
	760, 3, 2, 2, 2, 760, 763, 3, 2, 2, 2, 761, 759, 3, 2, 2, 2, 762, 764, 
	5, 188, 95, 2, 763, 762, 3, 2, 2, 2, 763, 764, 3, 2, 2, 2, 764, 765, 3, 
	2, 2, 2, 765, 766, 7, 26, 2, 2, 766, 127, 3, 2, 2, 2, 767, 768, 9, 6, 2, 
	2, 768, 129, 3, 2, 2, 2, 769, 770, 8, 66, 1, 2, 770, 771, 7, 63, 2, 2, 
	771, 788, 5, 72, 37, 2, 772, 773, 7, 25, 2, 2, 773, 774, 5, 130, 66, 2, 
	774, 775, 7, 26, 2, 2, 775, 788, 3, 2, 2, 2, 776, 777, 9, 7, 2, 2, 777, 
	788, 5, 130, 66, 21, 778, 779, 9, 8, 2, 2, 779, 788, 5, 130, 66, 20, 780, 
	781, 9, 9, 2, 2, 781, 788, 5, 130, 66, 19, 782, 783, 7, 69, 2, 2, 783, 
	788, 5, 130, 66, 18, 784, 785, 7, 7, 2, 2, 785, 788, 5, 130, 66, 17, 786, 
	788, 5, 132, 67, 2, 787, 769, 3, 2, 2, 2, 787, 772, 3, 2, 2, 2, 787, 776, 
	3, 2, 2, 2, 787, 778, 3, 2, 2, 2, 787, 780, 3, 2, 2, 2, 787, 782, 3, 2, 
	2, 2, 787, 784, 3, 2, 2, 2, 787, 786, 3, 2, 2, 2, 788, 863, 3, 2, 2, 2, 
	789, 790, 12, 16, 2, 2, 790, 791, 7, 70, 2, 2, 791, 862, 5, 130, 66, 17, 
	792, 793, 12, 15, 2, 2, 793, 794, 9, 10, 2, 2, 794, 862, 5, 130, 66, 16, 
	795, 796, 12, 14, 2, 2, 796, 797, 9, 8, 2, 2, 797, 862, 5, 130, 66, 15, 
	798, 799, 12, 13, 2, 2, 799, 800, 9, 11, 2, 2, 800, 862, 5, 130, 66, 14, 
	801, 802, 12, 12, 2, 2, 802, 803, 7, 75, 2, 2, 803, 862, 5, 130, 66, 13, 
	804, 805, 12, 11, 2, 2, 805, 806, 7, 6, 2, 2, 806, 862, 5, 130, 66, 12, 
	807, 808, 12, 10, 2, 2, 808, 809, 7, 76, 2, 2, 809, 862, 5, 130, 66, 11, 
	810, 811, 12, 9, 2, 2, 811, 812, 9, 12, 2, 2, 812, 862, 5, 130, 66, 10, 
	813, 814, 12, 8, 2, 2, 814, 815, 9, 13, 2, 2, 815, 862, 5, 130, 66, 9, 
	816, 817, 12, 7, 2, 2, 817, 818, 7, 79, 2, 2, 818, 862, 5, 130, 66, 8, 
	819, 820, 12, 6, 2, 2, 820, 821, 7, 5, 2, 2, 821, 862, 5, 130, 66, 7, 822, 
	823, 12, 5, 2, 2, 823, 824, 7, 80, 2, 2, 824, 825, 5, 130, 66, 2, 825, 
	826, 7, 64, 2, 2, 826, 827, 5, 130, 66, 6, 827, 862, 3, 2, 2, 2, 828, 829, 
	12, 4, 2, 2, 829, 830, 9, 14, 2, 2, 830, 862, 5, 130, 66, 5, 831, 832, 
	12, 29, 2, 2, 832, 862, 9, 7, 2, 2, 833, 834, 12, 27, 2, 2, 834, 835, 7, 
	36, 2, 2, 835, 836, 5, 130, 66, 2, 836, 837, 7, 37, 2, 2, 837, 862, 3, 
	2, 2, 2, 838, 839, 12, 26, 2, 2, 839, 841, 7, 36, 2, 2, 840, 842, 5, 130, 
	66, 2, 841, 840, 3, 2, 2, 2, 841, 842, 3, 2, 2, 2, 842, 843, 3, 2, 2, 2, 
	843, 845, 7, 64, 2, 2, 844, 846, 5, 130, 66, 2, 845, 844, 3, 2, 2, 2, 845, 
	846, 3, 2, 2, 2, 846, 847, 3, 2, 2, 2, 847, 862, 7, 37, 2, 2, 848, 849, 
	12, 25, 2, 2, 849, 850, 7, 39, 2, 2, 850, 862, 5, 188, 95, 2, 851, 852, 
	12, 24, 2, 2, 852, 853, 7, 17, 2, 2, 853, 854, 5, 136, 69, 2, 854, 855, 
	7, 19, 2, 2, 855, 862, 3, 2, 2, 2, 856, 857, 12, 23, 2, 2, 857, 858, 7, 
	25, 2, 2, 858, 859, 5, 140, 71, 2, 859, 860, 7, 26, 2, 2, 860, 862, 3, 
	2, 2, 2, 861, 789, 3, 2, 2, 2, 861, 792, 3, 2, 2, 2, 861, 795, 3, 2, 2, 
	2, 861, 798, 3, 2, 2, 2, 861, 801, 3, 2, 2, 2, 861, 804, 3, 2, 2, 2, 861, 
	807, 3, 2, 2, 2, 861, 810, 3, 2, 2, 2, 861, 813, 3, 2, 2, 2, 861, 816, 
	3, 2, 2, 2, 861, 819, 3, 2, 2, 2, 861, 822, 3, 2, 2, 2, 861, 828, 3, 2, 
	2, 2, 861, 831, 3, 2, 2, 2, 861, 833, 3, 2, 2, 2, 861, 838, 3, 2, 2, 2, 
	861, 848, 3, 2, 2, 2, 861, 851, 3, 2, 2, 2, 861, 856, 3, 2, 2, 2, 862, 
	865, 3, 2, 2, 2, 863, 861, 3, 2, 2, 2, 863, 864, 3, 2, 2, 2, 864, 131, 
	3, 2, 2, 2, 865, 863, 3, 2, 2, 2, 866, 884, 7, 105, 2, 2, 867, 884, 5, 
	186, 94, 2, 868, 884, 5, 190, 96, 2, 869, 884, 5, 194, 98, 2, 870, 873, 
	5, 188, 95, 2, 871, 872, 7, 36, 2, 2, 872, 874, 7, 37, 2, 2, 873, 871, 
	3, 2, 2, 2, 873, 874, 3, 2, 2, 2, 874, 884, 3, 2, 2, 2, 875, 884, 7, 125, 
	2, 2, 876, 884, 7, 120, 2, 2, 877, 884, 5, 182, 92, 2, 878, 881, 5, 184, 
	93, 2, 879, 880, 7, 36, 2, 2, 880, 882, 7, 37, 2, 2, 881, 879, 3, 2, 2, 
	2, 881, 882, 3, 2, 2, 2, 882, 884, 3, 2, 2, 2, 883, 866, 3, 2, 2, 2, 883, 
	867, 3, 2, 2, 2, 883, 868, 3, 2, 2, 2, 883, 869, 3, 2, 2, 2, 883, 870, 
	3, 2, 2, 2, 883, 875, 3, 2, 2, 2, 883, 876, 3, 2, 2, 2, 883, 877, 3, 2, 
	2, 2, 883, 878, 3, 2, 2, 2, 884, 133, 3, 2, 2, 2, 885, 890, 5, 130, 66, 
	2, 886, 887, 7, 18, 2, 2, 887, 889, 5, 130, 66, 2, 888, 886, 3, 2, 2, 2, 
	889, 892, 3, 2, 2, 2, 890, 888, 3, 2, 2, 2, 890, 891, 3, 2, 2, 2, 891, 
	135, 3, 2, 2, 2, 892, 890, 3, 2, 2, 2, 893, 898, 5, 138, 70, 2, 894, 895, 
	7, 18, 2, 2, 895, 897, 5, 138, 70, 2, 896, 894, 3, 2, 2, 2, 897, 900, 3, 
	2, 2, 2, 898, 896, 3, 2, 2, 2, 898, 899, 3, 2, 2, 2, 899, 902, 3, 2, 2, 
	2, 900, 898, 3, 2, 2, 2, 901, 903, 7, 18, 2, 2, 902, 901, 3, 2, 2, 2, 902, 
	903, 3, 2, 2, 2, 903, 137, 3, 2, 2, 2, 904, 905, 5, 188, 95, 2, 905, 906, 
	7, 64, 2, 2, 906, 907, 5, 130, 66, 2, 907, 139, 3, 2, 2, 2, 908, 910, 7, 
	17, 2, 2, 909, 911, 5, 136, 69, 2, 910, 909, 3, 2, 2, 2, 910, 911, 3, 2, 
	2, 2, 911, 912, 3, 2, 2, 2, 912, 917, 7, 19, 2, 2, 913, 915, 5, 134, 68, 
	2, 914, 913, 3, 2, 2, 2, 914, 915, 3, 2, 2, 2, 915, 917, 3, 2, 2, 2, 916, 
	908, 3, 2, 2, 2, 916, 914, 3, 2, 2, 2, 917, 141, 3, 2, 2, 2, 918, 919, 
	5, 130, 66, 2, 919, 920, 7, 25, 2, 2, 920, 921, 5, 140, 71, 2, 921, 922, 
	7, 26, 2, 2, 922, 143, 3, 2, 2, 2, 923, 927, 7, 17, 2, 2, 924, 926, 5, 
	146, 74, 2, 925, 924, 3, 2, 2, 2, 926, 929, 3, 2, 2, 2, 927, 925, 3, 2, 
	2, 2, 927, 928, 3, 2, 2, 2, 928, 930, 3, 2, 2, 2, 929, 927, 3, 2, 2, 2, 
	930, 931, 7, 19, 2, 2, 931, 145, 3, 2, 2, 2, 932, 951, 5, 188, 95, 2, 933, 
	951, 5, 144, 73, 2, 934, 951, 5, 148, 75, 2, 935, 951, 5, 154, 78, 2, 936, 
	951, 5, 156, 79, 2, 937, 951, 5, 162, 82, 2, 938, 951, 5, 164, 83, 2, 939, 
	951, 5, 166, 84, 2, 940, 951, 5, 170, 86, 2, 941, 951, 5, 174, 88, 2, 942, 
	951, 5, 176, 89, 2, 943, 951, 7, 112, 2, 2, 944, 951, 7, 115, 2, 2, 945, 
	951, 7, 116, 2, 2, 946, 951, 5, 180, 91, 2, 947, 951, 5, 186, 94, 2, 948, 
	951, 5, 194, 98, 2, 949, 951, 5, 190, 96, 2, 950, 932, 3, 2, 2, 2, 950, 
	933, 3, 2, 2, 2, 950, 934, 3, 2, 2, 2, 950, 935, 3, 2, 2, 2, 950, 936, 
	3, 2, 2, 2, 950, 937, 3, 2, 2, 2, 950, 938, 3, 2, 2, 2, 950, 939, 3, 2, 
	2, 2, 950, 940, 3, 2, 2, 2, 950, 941, 3, 2, 2, 2, 950, 942, 3, 2, 2, 2, 
	950, 943, 3, 2, 2, 2, 950, 944, 3, 2, 2, 2, 950, 945, 3, 2, 2, 2, 950, 
	946, 3, 2, 2, 2, 950, 947, 3, 2, 2, 2, 950, 948, 3, 2, 2, 2, 950, 949, 
	3, 2, 2, 2, 951, 147, 3, 2, 2, 2, 952, 956, 5, 152, 77, 2, 953, 956, 5, 
	178, 90, 2, 954, 956, 5, 150, 76, 2, 955, 952, 3, 2, 2, 2, 955, 953, 3, 
	2, 2, 2, 955, 954, 3, 2, 2, 2, 956, 149, 3, 2, 2, 2, 957, 958, 5, 188, 
	95, 2, 958, 959, 7, 39, 2, 2, 959, 960, 5, 188, 95, 2, 960, 151, 3, 2, 
	2, 2, 961, 966, 7, 53, 2, 2, 962, 966, 7, 38, 2, 2, 963, 966, 7, 60, 2, 
	2, 964, 966, 5, 188, 95, 2, 965, 961, 3, 2, 2, 2, 965, 962, 3, 2, 2, 2, 
	965, 963, 3, 2, 2, 2, 965, 964, 3, 2, 2, 2, 966, 979, 3, 2, 2, 2, 967, 
	969, 7, 25, 2, 2, 968, 970, 5, 148, 75, 2, 969, 968, 3, 2, 2, 2, 969, 970, 
	3, 2, 2, 2, 970, 975, 3, 2, 2, 2, 971, 972, 7, 18, 2, 2, 972, 974, 5, 148, 
	75, 2, 973, 971, 3, 2, 2, 2, 974, 977, 3, 2, 2, 2, 975, 973, 3, 2, 2, 2, 
	975, 976, 3, 2, 2, 2, 976, 978, 3, 2, 2, 2, 977, 975, 3, 2, 2, 2, 978, 
	980, 7, 26, 2, 2, 979, 967, 3, 2, 2, 2, 979, 980, 3, 2, 2, 2, 980, 153, 
	3, 2, 2, 2, 981, 982, 7, 91, 2, 2, 982, 985, 5, 158, 80, 2, 983, 984, 7, 
	92, 2, 2, 984, 986, 5, 148, 75, 2, 985, 983, 3, 2, 2, 2, 985, 986, 3, 2, 
	2, 2, 986, 155, 3, 2, 2, 2, 987, 988, 5, 158, 80, 2, 988, 989, 7, 92, 2, 
	2, 989, 990, 5, 148, 75, 2, 990, 157, 3, 2, 2, 2, 991, 998, 5, 188, 95, 
	2, 992, 998, 5, 150, 76, 2, 993, 994, 7, 25, 2, 2, 994, 995, 5, 160, 81, 
	2, 995, 996, 7, 26, 2, 2, 996, 998, 3, 2, 2, 2, 997, 991, 3, 2, 2, 2, 997, 
	992, 3, 2, 2, 2, 997, 993, 3, 2, 2, 2, 998, 159, 3, 2, 2, 2, 999, 1004, 
	5, 188, 95, 2, 1000, 1001, 7, 18, 2, 2, 1001, 1003, 5, 188, 95, 2, 1002, 
	1000, 3, 2, 2, 2, 1003, 1006, 3, 2, 2, 2, 1004, 1002, 3, 2, 2, 2, 1004, 
	1005, 3, 2, 2, 2, 1005, 161, 3, 2, 2, 2, 1006, 1004, 3, 2, 2, 2, 1007, 
	1008, 7, 93, 2, 2, 1008, 1009, 5, 188, 95, 2, 1009, 163, 3, 2, 2, 2, 1010, 
	1011, 5, 188, 95, 2, 1011, 1012, 7, 64, 2, 2, 1012, 165, 3, 2, 2, 2, 1013, 
	1014, 7, 94, 2, 2, 1014, 1018, 5, 148, 75, 2, 1015, 1017, 5, 168, 85, 2, 
	1016, 1015, 3, 2, 2, 2, 1017, 1020, 3, 2, 2, 2, 1018, 1016, 3, 2, 2, 2, 
	1018, 1019, 3, 2, 2, 2, 1019, 167, 3, 2, 2, 2, 1020, 1018, 3, 2, 2, 2, 
	1021, 1022, 7, 95, 2, 2, 1022, 1023, 5, 178, 90, 2, 1023, 1024, 5, 144, 
	73, 2, 1024, 1028, 3, 2, 2, 2, 1025, 1026, 7, 96, 2, 2, 1026, 1028, 5, 
	144, 73, 2, 1027, 1021, 3, 2, 2, 2, 1027, 1025, 3, 2, 2, 2, 1028, 169, 
	3, 2, 2, 2, 1029, 1030, 7, 32, 2, 2, 1030, 1031, 5, 188, 95, 2, 1031, 1033, 
	7, 25, 2, 2, 1032, 1034, 5, 160, 81, 2, 1033, 1032, 3, 2, 2, 2, 1033, 1034, 
	3, 2, 2, 2, 1034, 1035, 3, 2, 2, 2, 1035, 1037, 7, 26, 2, 2, 1036, 1038, 
	5, 172, 87, 2, 1037, 1036, 3, 2, 2, 2, 1037, 1038, 3, 2, 2, 2, 1038, 1039, 
	3, 2, 2, 2, 1039, 1040, 5, 144, 73, 2, 1040, 171, 3, 2, 2, 2, 1041, 1042, 
	7, 97, 2, 2, 1042, 1043, 5, 160, 81, 2, 1043, 173, 3, 2, 2, 2, 1044, 1047, 
	7, 29, 2, 2, 1045, 1048, 5, 144, 73, 2, 1046, 1048, 5, 148, 75, 2, 1047, 
	1045, 3, 2, 2, 2, 1047, 1046, 3, 2, 2, 2, 1048, 1049, 3, 2, 2, 2, 1049, 
	1052, 5, 148, 75, 2, 1050, 1053, 5, 144, 73, 2, 1051, 1053, 5, 148, 75, 
	2, 1052, 1050, 3, 2, 2, 2, 1052, 1051, 3, 2, 2, 2, 1053, 1054, 3, 2, 2, 
	2, 1054, 1055, 5, 144, 73, 2, 1055, 175, 3, 2, 2, 2, 1056, 1057, 7, 45, 
	2, 2, 1057, 1058, 5, 148, 75, 2, 1058, 1059, 5, 144, 73, 2, 1059, 177, 
	3, 2, 2, 2, 1060, 1065, 5, 194, 98, 2, 1061, 1065, 7, 106, 2, 2, 1062, 
	1065, 7, 107, 2, 2, 1063, 1065, 5, 190, 96, 2, 1064, 1060, 3, 2, 2, 2, 
	1064, 1061, 3, 2, 2, 2, 1064, 1062, 3, 2, 2, 2, 1064, 1063, 3, 2, 2, 2, 
	1065, 179, 3, 2, 2, 2, 1066, 1067, 7, 51, 2, 2, 1067, 1068, 5, 188, 95, 
	2, 1068, 1069, 5, 144, 73, 2, 1069, 181, 3, 2, 2, 2, 1070, 1072, 7, 25, 
	2, 2, 1071, 1073, 5, 130, 66, 2, 1072, 1071, 3, 2, 2, 2, 1072, 1073, 3, 
	2, 2, 2, 1073, 1080, 3, 2, 2, 2, 1074, 1076, 7, 18, 2, 2, 1075, 1077, 5, 
	130, 66, 2, 1076, 1075, 3, 2, 2, 2, 1076, 1077, 3, 2, 2, 2, 1077, 1079, 
	3, 2, 2, 2, 1078, 1074, 3, 2, 2, 2, 1079, 1082, 3, 2, 2, 2, 1080, 1078, 
	3, 2, 2, 2, 1080, 1081, 3, 2, 2, 2, 1081, 1083, 3, 2, 2, 2, 1082, 1080, 
	3, 2, 2, 2, 1083, 1097, 7, 26, 2, 2, 1084, 1093, 7, 36, 2, 2, 1085, 1090, 
	5, 130, 66, 2, 1086, 1087, 7, 18, 2, 2, 1087, 1089, 5, 130, 66, 2, 1088, 
	1086, 3, 2, 2, 2, 1089, 1092, 3, 2, 2, 2, 1090, 1088, 3, 2, 2, 2, 1090, 
	1091, 3, 2, 2, 2, 1091, 1094, 3, 2, 2, 2, 1092, 1090, 3, 2, 2, 2, 1093, 
	1085, 3, 2, 2, 2, 1093, 1094, 3, 2, 2, 2, 1094, 1095, 3, 2, 2, 2, 1095, 
	1097, 7, 37, 2, 2, 1096, 1070, 3, 2, 2, 2, 1096, 1084, 3, 2, 2, 2, 1097, 
	183, 3, 2, 2, 2, 1098, 1101, 5, 128, 65, 2, 1099, 1101, 5, 74, 38, 2, 1100, 
	1098, 3, 2, 2, 2, 1100, 1099, 3, 2, 2, 2, 1101, 185, 3, 2, 2, 2, 1102, 
	1104, 9, 15, 2, 2, 1103, 1105, 7, 108, 2, 2, 1104, 1103, 3, 2, 2, 2, 1104, 
	1105, 3, 2, 2, 2, 1105, 187, 3, 2, 2, 2, 1106, 1107, 9, 16, 2, 2, 1107, 
	189, 3, 2, 2, 2, 1108, 1110, 7, 109, 2, 2, 1109, 1108, 3, 2, 2, 2, 1110, 
	1111, 3, 2, 2, 2, 1111, 1109, 3, 2, 2, 2, 1111, 1112, 3, 2, 2, 2, 1112, 
	191, 3, 2, 2, 2, 1113, 1125, 7, 99, 2, 2, 1114, 1115, 7, 25, 2, 2, 1115, 
	1120, 5, 74, 38, 2, 1116, 1117, 7, 18, 2, 2, 1117, 1119, 5, 74, 38, 2, 
	1118, 1116, 3, 2, 2, 2, 1119, 1122, 3, 2, 2, 2, 1120, 1118, 3, 2, 2, 2, 
	1120, 1121, 3, 2, 2, 2, 1121, 1123, 3, 2, 2, 2, 1122, 1120, 3, 2, 2, 2, 
	1123, 1124, 7, 26, 2, 2, 1124, 1126, 3, 2, 2, 2, 1125, 1114, 3, 2, 2, 2, 
	1125, 1126, 3, 2, 2, 2, 1126, 193, 3, 2, 2, 2, 1127, 1129, 7, 131, 2, 2, 
	1128, 1127, 3, 2, 2, 2, 1129, 1130, 3, 2, 2, 2, 1130, 1128, 3, 2, 2, 2, 
	1130, 1131, 3, 2, 2, 2, 1131, 195, 3, 2, 2, 2, 128, 205, 207, 221, 225, 
	230, 236, 240, 243, 248, 254, 261, 265, 278, 286, 291, 301, 304, 310, 318, 
	321, 332, 341, 343, 349, 376, 390, 393, 400, 404, 406, 411, 416, 419, 425, 
	429, 433, 438, 451, 453, 460, 470, 476, 487, 490, 496, 499, 507, 510, 516, 
	519, 527, 530, 536, 540, 551, 556, 561, 569, 574, 588, 590, 595, 605, 625, 
	637, 642, 648, 652, 655, 667, 676, 680, 683, 690, 710, 732, 736, 741, 745, 
	749, 754, 759, 763, 787, 841, 845, 861, 863, 873, 881, 883, 890, 898, 902, 
	910, 914, 916, 927, 950, 955, 965, 969, 975, 979, 985, 997, 1004, 1018, 
	1027, 1033, 1037, 1047, 1052, 1064, 1072, 1076, 1080, 1090, 1093, 1096, 
	1100, 1104, 1111, 1120, 1125, 1130,
}
var literalNames = []string{
	"", "'pragma'", "';'", "'||'", "'^'", "'~'", "'>='", "'>'", "'<'", "'<='", 
	"'='", "'as'", "'import'", "'*'", "'from'", "'{'", "','", "'}'", "'abstract'", 
	"'contract'", "'interface'", "'library'", "'is'", "'('", "')'", "'error'", 
	"'using'", "'for'", "'struct'", "'modifier'", "'function'", "'returns'", 
	"'event'", "'enum'", "'['", "']'", "'address'", "'.'", "'mapping'", "'=>'", 
	"'memory'", "'storage'", "'calldata'", "'if'", "'else'", "'try'", "'catch'", 
	"'while'", "'unchecked'", "'assembly'", "'do'", "'return'", "'throw'", 
	"'emit'", "'revert'", "'var'", "'bool'", "'string'", "'byte'", "'++'", 
	"'--'", "'new'", "':'", "'+'", "'-'", "'after'", "'delete'", "'!'", "'**'", 
	"'/'", "'%'", "'<<'", "'>>'", "'&'", "'|'", "'=='", "'!='", "'&&'", "'?'", 
	"'|='", "'^='", "'&='", "'<<='", "'>>='", "'+='", "'-='", "'*='", "'/='", 
	"'%='", "'let'", "':='", "'=:'", "'switch'", "'case'", "'default'", "'->'", 
	"'callback'", "'override'", "", "", "", "", "", "", "", "", "", "", "", 
	"'anonymous'", "'break'", "'constant'", "'immutable'", "'continue'", "'leave'", 
	"'external'", "'indexed'", "'internal'", "'payable'", "'private'", "'public'", 
	"'virtual'", "'pure'", "'type'", "'view'", "'constructor'", "'fallback'", 
	"'receive'",
}
var symbolicNames = []string{
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", "", 
	"", "", "", "", "", "", "", "", "Int", "Uint", "Byte", "Fixed", "Ufixed", 
	"BooleanLiteral", "DecimalNumber", "HexNumber", "NumberUnit", "HexLiteralFragment", 
	"ReservedKeyword", "AnonymousKeyword", "BreakKeyword", "ConstantKeyword", 
	"ImmutableKeyword", "ContinueKeyword", "LeaveKeyword", "ExternalKeyword", 
	"IndexedKeyword", "InternalKeyword", "PayableKeyword", "PrivateKeyword", 
	"PublicKeyword", "VirtualKeyword", "PureKeyword", "TypeKeyword", "ViewKeyword", 
	"ConstructorKeyword", "FallbackKeyword", "ReceiveKeyword", "Identifier", 
	"StringLiteralFragment", "VersionLiteral", "WS", "COMMENT", "LINE_COMMENT",
}

var ruleNames = []string{
	"sourceUnit", "pragmaDirective", "pragmaName", "pragmaValue", "version", 
	"versionOperator", "versionConstraint", "importDeclaration", "importDirective", 
	"importPath", "contractDefinition", "inheritanceSpecifier", "contractPart", 
	"stateVariableDeclaration", "fileLevelConstant", "customErrorDefinition", 
	"typeDefinition", "usingForDeclaration", "structDefinition", "modifierDefinition", 
	"modifierInvocation", "functionDefinition", "functionDescriptor", "returnParameters", 
	"modifierList", "eventDefinition", "enumValue", "enumDefinition", "parameterList", 
	"parameter", "eventParameterList", "eventParameter", "functionTypeParameterList", 
	"functionTypeParameter", "variableDeclaration", "typeName", "userDefinedTypeName", 
	"mappingKey", "mapping", "functionTypeName", "storageLocation", "stateMutability", 
	"block", "statement", "expressionStatement", "ifStatement", "tryStatement", 
	"catchClause", "whileStatement", "simpleStatement", "uncheckedStatement", 
	"forStatement", "inlineAssemblyStatement", "doWhileStatement", "continueStatement", 
	"breakStatement", "returnStatement", "throwStatement", "emitStatement", 
	"revertStatement", "variableDeclarationStatement", "variableDeclarationList", 
	"identifierList", "elementaryTypeName", "expression", "primaryExpression", 
	"expressionList", "nameValueList", "nameValue", "functionCallArguments", 
	"functionCall", "assemblyBlock", "assemblyItem", "assemblyExpression", 
	"assemblyMember", "assemblyCall", "assemblyLocalDefinition", "assemblyAssignment", 
	"assemblyIdentifierOrList", "assemblyIdentifierList", "assemblyStackAssignment", 
	"labelDefinition", "assemblySwitch", "assemblyCase", "assemblyFunctionDefinition", 
	"assemblyFunctionReturns", "assemblyFor", "assemblyIf", "assemblyLiteral", 
	"subAssembly", "tupleExpression", "typeNameExpression", "numberLiteral", 
	"identifier", "hexLiteral", "overrideSpecifier", "stringLiteral",
}
type SolidityParser struct {
	*antlr.BaseParser
}

// NewSolidityParser produces a new parser instance for the optional input antlr.TokenStream.
//
// The *SolidityParser instance produced may be reused by calling the SetInputStream method.
// The initial parser configuration is expensive to construct, and the object is not thread-safe;
// however, if used within a Golang sync.Pool, the construction cost amortizes well and the
// objects can be used in a thread-safe manner.
func NewSolidityParser(input antlr.TokenStream) *SolidityParser {
	this := new(SolidityParser)
	deserializer := antlr.NewATNDeserializer(nil)
	deserializedATN := deserializer.DeserializeFromUInt16(parserATN)
	decisionToDFA := make([]*antlr.DFA, len(deserializedATN.DecisionToState))
	for index, ds := range deserializedATN.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(ds, index)
	}
	this.BaseParser = antlr.NewBaseParser(input)

	this.Interpreter = antlr.NewParserATNSimulator(this, deserializedATN, decisionToDFA, antlr.NewPredictionContextCache())
	this.RuleNames = ruleNames
	this.LiteralNames = literalNames
	this.SymbolicNames = symbolicNames
	this.GrammarFileName = "Solidity.g4"

	return this
}


// SolidityParser tokens.
const (
	SolidityParserEOF = antlr.TokenEOF
	SolidityParserT__0 = 1
	SolidityParserT__1 = 2
	SolidityParserT__2 = 3
	SolidityParserT__3 = 4
	SolidityParserT__4 = 5
	SolidityParserT__5 = 6
	SolidityParserT__6 = 7
	SolidityParserT__7 = 8
	SolidityParserT__8 = 9
	SolidityParserT__9 = 10
	SolidityParserT__10 = 11
	SolidityParserT__11 = 12
	SolidityParserT__12 = 13
	SolidityParserT__13 = 14
	SolidityParserT__14 = 15
	SolidityParserT__15 = 16
	SolidityParserT__16 = 17
	SolidityParserT__17 = 18
	SolidityParserT__18 = 19
	SolidityParserT__19 = 20
	SolidityParserT__20 = 21
	SolidityParserT__21 = 22
	SolidityParserT__22 = 23
	SolidityParserT__23 = 24
	SolidityParserT__24 = 25
	SolidityParserT__25 = 26
	SolidityParserT__26 = 27
	SolidityParserT__27 = 28
	SolidityParserT__28 = 29
	SolidityParserT__29 = 30
	SolidityParserT__30 = 31
	SolidityParserT__31 = 32
	SolidityParserT__32 = 33
	SolidityParserT__33 = 34
	SolidityParserT__34 = 35
	SolidityParserT__35 = 36
	SolidityParserT__36 = 37
	SolidityParserT__37 = 38
	SolidityParserT__38 = 39
	SolidityParserT__39 = 40
	SolidityParserT__40 = 41
	SolidityParserT__41 = 42
	SolidityParserT__42 = 43
	SolidityParserT__43 = 44
	SolidityParserT__44 = 45
	SolidityParserT__45 = 46
	SolidityParserT__46 = 47
	SolidityParserT__47 = 48
	SolidityParserT__48 = 49
	SolidityParserT__49 = 50
	SolidityParserT__50 = 51
	SolidityParserT__51 = 52
	SolidityParserT__52 = 53
	SolidityParserT__53 = 54
	SolidityParserT__54 = 55
	SolidityParserT__55 = 56
	SolidityParserT__56 = 57
	SolidityParserT__57 = 58
	SolidityParserT__58 = 59
	SolidityParserT__59 = 60
	SolidityParserT__60 = 61
	SolidityParserT__61 = 62
	SolidityParserT__62 = 63
	SolidityParserT__63 = 64
	SolidityParserT__64 = 65
	SolidityParserT__65 = 66
	SolidityParserT__66 = 67
	SolidityParserT__67 = 68
	SolidityParserT__68 = 69
	SolidityParserT__69 = 70
	SolidityParserT__70 = 71
	SolidityParserT__71 = 72
	SolidityParserT__72 = 73
	SolidityParserT__73 = 74
	SolidityParserT__74 = 75
	SolidityParserT__75 = 76
	SolidityParserT__76 = 77
	SolidityParserT__77 = 78
	SolidityParserT__78 = 79
	SolidityParserT__79 = 80
	SolidityParserT__80 = 81
	SolidityParserT__81 = 82
	SolidityParserT__82 = 83
	SolidityParserT__83 = 84
	SolidityParserT__84 = 85
	SolidityParserT__85 = 86
	SolidityParserT__86 = 87
	SolidityParserT__87 = 88
	SolidityParserT__88 = 89
	SolidityParserT__89 = 90
	SolidityParserT__90 = 91
	SolidityParserT__91 = 92
	SolidityParserT__92 = 93
	SolidityParserT__93 = 94
	SolidityParserT__94 = 95
	SolidityParserT__95 = 96
	SolidityParserT__96 = 97
	SolidityParserInt = 98
	SolidityParserUint = 99
	SolidityParserByte = 100
	SolidityParserFixed = 101
	SolidityParserUfixed = 102
	SolidityParserBooleanLiteral = 103
	SolidityParserDecimalNumber = 104
	SolidityParserHexNumber = 105
	SolidityParserNumberUnit = 106
	SolidityParserHexLiteralFragment = 107
	SolidityParserReservedKeyword = 108
	SolidityParserAnonymousKeyword = 109
	SolidityParserBreakKeyword = 110
	SolidityParserConstantKeyword = 111
	SolidityParserImmutableKeyword = 112
	SolidityParserContinueKeyword = 113
	SolidityParserLeaveKeyword = 114
	SolidityParserExternalKeyword = 115
	SolidityParserIndexedKeyword = 116
	SolidityParserInternalKeyword = 117
	SolidityParserPayableKeyword = 118
	SolidityParserPrivateKeyword = 119
	SolidityParserPublicKeyword = 120
	SolidityParserVirtualKeyword = 121
	SolidityParserPureKeyword = 122
	SolidityParserTypeKeyword = 123
	SolidityParserViewKeyword = 124
	SolidityParserConstructorKeyword = 125
	SolidityParserFallbackKeyword = 126
	SolidityParserReceiveKeyword = 127
	SolidityParserIdentifier = 128
	SolidityParserStringLiteralFragment = 129
	SolidityParserVersionLiteral = 130
	SolidityParserWS = 131
	SolidityParserCOMMENT = 132
	SolidityParserLINE_COMMENT = 133
)

// SolidityParser rules.
const (
	SolidityParserRULE_sourceUnit = 0
	SolidityParserRULE_pragmaDirective = 1
	SolidityParserRULE_pragmaName = 2
	SolidityParserRULE_pragmaValue = 3
	SolidityParserRULE_version = 4
	SolidityParserRULE_versionOperator = 5
	SolidityParserRULE_versionConstraint = 6
	SolidityParserRULE_importDeclaration = 7
	SolidityParserRULE_importDirective = 8
	SolidityParserRULE_importPath = 9
	SolidityParserRULE_contractDefinition = 10
	SolidityParserRULE_inheritanceSpecifier = 11
	SolidityParserRULE_contractPart = 12
	SolidityParserRULE_stateVariableDeclaration = 13
	SolidityParserRULE_fileLevelConstant = 14
	SolidityParserRULE_customErrorDefinition = 15
	SolidityParserRULE_typeDefinition = 16
	SolidityParserRULE_usingForDeclaration = 17
	SolidityParserRULE_structDefinition = 18
	SolidityParserRULE_modifierDefinition = 19
	SolidityParserRULE_modifierInvocation = 20
	SolidityParserRULE_functionDefinition = 21
	SolidityParserRULE_functionDescriptor = 22
	SolidityParserRULE_returnParameters = 23
	SolidityParserRULE_modifierList = 24
	SolidityParserRULE_eventDefinition = 25
	SolidityParserRULE_enumValue = 26
	SolidityParserRULE_enumDefinition = 27
	SolidityParserRULE_parameterList = 28
	SolidityParserRULE_parameter = 29
	SolidityParserRULE_eventParameterList = 30
	SolidityParserRULE_eventParameter = 31
	SolidityParserRULE_functionTypeParameterList = 32
	SolidityParserRULE_functionTypeParameter = 33
	SolidityParserRULE_variableDeclaration = 34
	SolidityParserRULE_typeName = 35
	SolidityParserRULE_userDefinedTypeName = 36
	SolidityParserRULE_mappingKey = 37
	SolidityParserRULE_mapping = 38
	SolidityParserRULE_functionTypeName = 39
	SolidityParserRULE_storageLocation = 40
	SolidityParserRULE_stateMutability = 41
	SolidityParserRULE_block = 42
	SolidityParserRULE_statement = 43
	SolidityParserRULE_expressionStatement = 44
	SolidityParserRULE_ifStatement = 45
	SolidityParserRULE_tryStatement = 46
	SolidityParserRULE_catchClause = 47
	SolidityParserRULE_whileStatement = 48
	SolidityParserRULE_simpleStatement = 49
	SolidityParserRULE_uncheckedStatement = 50
	SolidityParserRULE_forStatement = 51
	SolidityParserRULE_inlineAssemblyStatement = 52
	SolidityParserRULE_doWhileStatement = 53
	SolidityParserRULE_continueStatement = 54
	SolidityParserRULE_breakStatement = 55
	SolidityParserRULE_returnStatement = 56
	SolidityParserRULE_throwStatement = 57
	SolidityParserRULE_emitStatement = 58
	SolidityParserRULE_revertStatement = 59
	SolidityParserRULE_variableDeclarationStatement = 60
	SolidityParserRULE_variableDeclarationList = 61
	SolidityParserRULE_identifierList = 62
	SolidityParserRULE_elementaryTypeName = 63
	SolidityParserRULE_expression = 64
	SolidityParserRULE_primaryExpression = 65
	SolidityParserRULE_expressionList = 66
	SolidityParserRULE_nameValueList = 67
	SolidityParserRULE_nameValue = 68
	SolidityParserRULE_functionCallArguments = 69
	SolidityParserRULE_functionCall = 70
	SolidityParserRULE_assemblyBlock = 71
	SolidityParserRULE_assemblyItem = 72
	SolidityParserRULE_assemblyExpression = 73
	SolidityParserRULE_assemblyMember = 74
	SolidityParserRULE_assemblyCall = 75
	SolidityParserRULE_assemblyLocalDefinition = 76
	SolidityParserRULE_assemblyAssignment = 77
	SolidityParserRULE_assemblyIdentifierOrList = 78
	SolidityParserRULE_assemblyIdentifierList = 79
	SolidityParserRULE_assemblyStackAssignment = 80
	SolidityParserRULE_labelDefinition = 81
	SolidityParserRULE_assemblySwitch = 82
	SolidityParserRULE_assemblyCase = 83
	SolidityParserRULE_assemblyFunctionDefinition = 84
	SolidityParserRULE_assemblyFunctionReturns = 85
	SolidityParserRULE_assemblyFor = 86
	SolidityParserRULE_assemblyIf = 87
	SolidityParserRULE_assemblyLiteral = 88
	SolidityParserRULE_subAssembly = 89
	SolidityParserRULE_tupleExpression = 90
	SolidityParserRULE_typeNameExpression = 91
	SolidityParserRULE_numberLiteral = 92
	SolidityParserRULE_identifier = 93
	SolidityParserRULE_hexLiteral = 94
	SolidityParserRULE_overrideSpecifier = 95
	SolidityParserRULE_stringLiteral = 96
)

// ISourceUnitContext is an interface to support dynamic dispatch.
type ISourceUnitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSourceUnitContext differentiates from other interfaces.
	IsSourceUnitContext()
}

type SourceUnitContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySourceUnitContext() *SourceUnitContext {
	var p = new(SourceUnitContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_sourceUnit
	return p
}

func (*SourceUnitContext) IsSourceUnitContext() {}

func NewSourceUnitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SourceUnitContext {
	var p = new(SourceUnitContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_sourceUnit

	return p
}

func (s *SourceUnitContext) GetParser() antlr.Parser { return s.parser }

func (s *SourceUnitContext) EOF() antlr.TerminalNode {
	return s.GetToken(SolidityParserEOF, 0)
}

func (s *SourceUnitContext) AllPragmaDirective() []IPragmaDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem())
	var tst = make([]IPragmaDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IPragmaDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) PragmaDirective(i int) IPragmaDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IPragmaDirectiveContext)
}

func (s *SourceUnitContext) AllImportDirective() []IImportDirectiveContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem())
	var tst = make([]IImportDirectiveContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDirectiveContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ImportDirective(i int) IImportDirectiveContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDirectiveContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDirectiveContext)
}

func (s *SourceUnitContext) AllContractDefinition() []IContractDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem())
	var tst = make([]IContractDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) ContractDefinition(i int) IContractDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractDefinitionContext)
}

func (s *SourceUnitContext) AllEnumDefinition() []IEnumDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem())
	var tst = make([]IEnumDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) EnumDefinition(i int) IEnumDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumDefinitionContext)
}

func (s *SourceUnitContext) AllStructDefinition() []IStructDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem())
	var tst = make([]IStructDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStructDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) StructDefinition(i int) IStructDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStructDefinitionContext)
}

func (s *SourceUnitContext) AllFunctionDefinition() []IFunctionDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem())
	var tst = make([]IFunctionDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) FunctionDefinition(i int) IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *SourceUnitContext) AllFileLevelConstant() []IFileLevelConstantContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFileLevelConstantContext)(nil)).Elem())
	var tst = make([]IFileLevelConstantContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFileLevelConstantContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) FileLevelConstant(i int) IFileLevelConstantContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFileLevelConstantContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFileLevelConstantContext)
}

func (s *SourceUnitContext) AllCustomErrorDefinition() []ICustomErrorDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICustomErrorDefinitionContext)(nil)).Elem())
	var tst = make([]ICustomErrorDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICustomErrorDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) CustomErrorDefinition(i int) ICustomErrorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICustomErrorDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICustomErrorDefinitionContext)
}

func (s *SourceUnitContext) AllTypeDefinition() []ITypeDefinitionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ITypeDefinitionContext)(nil)).Elem())
	var tst = make([]ITypeDefinitionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ITypeDefinitionContext)
		}
	}

	return tst
}

func (s *SourceUnitContext) TypeDefinition(i int) ITypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDefinitionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ITypeDefinitionContext)
}

func (s *SourceUnitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SourceUnitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) SourceUnit() (localctx ISourceUnitContext) {
	this := p
	_ = this

	localctx = NewSourceUnitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, SolidityParserRULE_sourceUnit)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(205)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__0) | (1 << SolidityParserT__11) | (1 << SolidityParserT__13) | (1 << SolidityParserT__17) | (1 << SolidityParserT__18) | (1 << SolidityParserT__19) | (1 << SolidityParserT__20) | (1 << SolidityParserT__24) | (1 << SolidityParserT__27) | (1 << SolidityParserT__29))) != 0) || ((((_la - 33)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 33))) & ((1 << (SolidityParserT__32 - 33)) | (1 << (SolidityParserT__35 - 33)) | (1 << (SolidityParserT__37 - 33)) | (1 << (SolidityParserT__41 - 33)) | (1 << (SolidityParserT__53 - 33)) | (1 << (SolidityParserT__54 - 33)) | (1 << (SolidityParserT__55 - 33)) | (1 << (SolidityParserT__56 - 33)) | (1 << (SolidityParserT__57 - 33)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserTypeKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserFallbackKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 0, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(194)
				p.PragmaDirective()
			}


		case 2:
			{
				p.SetState(195)
				p.ImportDirective()
			}


		case 3:
			{
				p.SetState(196)
				p.ContractDefinition()
			}


		case 4:
			{
				p.SetState(197)
				p.EnumDefinition()
			}


		case 5:
			{
				p.SetState(198)
				p.StructDefinition()
			}


		case 6:
			{
				p.SetState(199)
				p.FunctionDefinition()
			}


		case 7:
			{
				p.SetState(200)
				p.FileLevelConstant()
			}


		case 8:
			{
				p.SetState(201)
				p.CustomErrorDefinition()
			}


		case 9:
			{
				p.SetState(202)
				p.TypeDefinition()
			}

		}

		p.SetState(207)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(208)
		p.Match(SolidityParserEOF)
	}



	return localctx
}


// IPragmaDirectiveContext is an interface to support dynamic dispatch.
type IPragmaDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaDirectiveContext differentiates from other interfaces.
	IsPragmaDirectiveContext()
}

type PragmaDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaDirectiveContext() *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaDirective
	return p
}

func (*PragmaDirectiveContext) IsPragmaDirectiveContext() {}

func NewPragmaDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaDirectiveContext {
	var p = new(PragmaDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaDirective

	return p
}

func (s *PragmaDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaDirectiveContext) PragmaName() IPragmaNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragmaNameContext)
}

func (s *PragmaDirectiveContext) PragmaValue() IPragmaValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPragmaValueContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPragmaValueContext)
}

func (s *PragmaDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) PragmaDirective() (localctx IPragmaDirectiveContext) {
	this := p
	_ = this

	localctx = NewPragmaDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, SolidityParserRULE_pragmaDirective)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(210)
		p.Match(SolidityParserT__0)
	}
	{
		p.SetState(211)
		p.PragmaName()
	}
	{
		p.SetState(212)
		p.PragmaValue()
	}
	{
		p.SetState(213)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IPragmaNameContext is an interface to support dynamic dispatch.
type IPragmaNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaNameContext differentiates from other interfaces.
	IsPragmaNameContext()
}

type PragmaNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaNameContext() *PragmaNameContext {
	var p = new(PragmaNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaName
	return p
}

func (*PragmaNameContext) IsPragmaNameContext() {}

func NewPragmaNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaNameContext {
	var p = new(PragmaNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaName

	return p
}

func (s *PragmaNameContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaNameContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PragmaNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) PragmaName() (localctx IPragmaNameContext) {
	this := p
	_ = this

	localctx = NewPragmaNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, SolidityParserRULE_pragmaName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(215)
		p.Identifier()
	}



	return localctx
}


// IPragmaValueContext is an interface to support dynamic dispatch.
type IPragmaValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPragmaValueContext differentiates from other interfaces.
	IsPragmaValueContext()
}

type PragmaValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPragmaValueContext() *PragmaValueContext {
	var p = new(PragmaValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_pragmaValue
	return p
}

func (*PragmaValueContext) IsPragmaValueContext() {}

func NewPragmaValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PragmaValueContext {
	var p = new(PragmaValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_pragmaValue

	return p
}

func (s *PragmaValueContext) GetParser() antlr.Parser { return s.parser }

func (s *PragmaValueContext) Version() IVersionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVersionContext)
}

func (s *PragmaValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *PragmaValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PragmaValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) PragmaValue() (localctx IPragmaValueContext) {
	this := p
	_ = this

	localctx = NewPragmaValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, SolidityParserRULE_pragmaValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(219)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 2, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(217)
			p.Version()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(218)
			p.expression(0)
		}

	}


	return localctx
}


// IVersionContext is an interface to support dynamic dispatch.
type IVersionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionContext differentiates from other interfaces.
	IsVersionContext()
}

type VersionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionContext() *VersionContext {
	var p = new(VersionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_version
	return p
}

func (*VersionContext) IsVersionContext() {}

func NewVersionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionContext {
	var p = new(VersionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_version

	return p
}

func (s *VersionContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionContext) AllVersionConstraint() []IVersionConstraintContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVersionConstraintContext)(nil)).Elem())
	var tst = make([]IVersionConstraintContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVersionConstraintContext)
		}
	}

	return tst
}

func (s *VersionContext) VersionConstraint(i int) IVersionConstraintContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionConstraintContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVersionConstraintContext)
}

func (s *VersionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) Version() (localctx IVersionContext) {
	this := p
	_ = this

	localctx = NewVersionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, SolidityParserRULE_version)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(221)
		p.VersionConstraint()
	}
	p.SetState(228)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__2) | (1 << SolidityParserT__3) | (1 << SolidityParserT__4) | (1 << SolidityParserT__5) | (1 << SolidityParserT__6) | (1 << SolidityParserT__7) | (1 << SolidityParserT__8) | (1 << SolidityParserT__9))) != 0) || _la == SolidityParserDecimalNumber || _la == SolidityParserVersionLiteral {
		p.SetState(223)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SolidityParserT__2 {
			{
				p.SetState(222)
				p.Match(SolidityParserT__2)
			}

		}
		{
			p.SetState(225)
			p.VersionConstraint()
		}


		p.SetState(230)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IVersionOperatorContext is an interface to support dynamic dispatch.
type IVersionOperatorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionOperatorContext differentiates from other interfaces.
	IsVersionOperatorContext()
}

type VersionOperatorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionOperatorContext() *VersionOperatorContext {
	var p = new(VersionOperatorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_versionOperator
	return p
}

func (*VersionOperatorContext) IsVersionOperatorContext() {}

func NewVersionOperatorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionOperatorContext {
	var p = new(VersionOperatorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_versionOperator

	return p
}

func (s *VersionOperatorContext) GetParser() antlr.Parser { return s.parser }
func (s *VersionOperatorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionOperatorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) VersionOperator() (localctx IVersionOperatorContext) {
	this := p
	_ = this

	localctx = NewVersionOperatorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, SolidityParserRULE_versionOperator)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(231)
		_la = p.GetTokenStream().LA(1)

		if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__3) | (1 << SolidityParserT__4) | (1 << SolidityParserT__5) | (1 << SolidityParserT__6) | (1 << SolidityParserT__7) | (1 << SolidityParserT__8) | (1 << SolidityParserT__9))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IVersionConstraintContext is an interface to support dynamic dispatch.
type IVersionConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVersionConstraintContext differentiates from other interfaces.
	IsVersionConstraintContext()
}

type VersionConstraintContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVersionConstraintContext() *VersionConstraintContext {
	var p = new(VersionConstraintContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_versionConstraint
	return p
}

func (*VersionConstraintContext) IsVersionConstraintContext() {}

func NewVersionConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VersionConstraintContext {
	var p = new(VersionConstraintContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_versionConstraint

	return p
}

func (s *VersionConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *VersionConstraintContext) VersionLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserVersionLiteral, 0)
}

func (s *VersionConstraintContext) VersionOperator() IVersionOperatorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVersionOperatorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVersionOperatorContext)
}

func (s *VersionConstraintContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *VersionConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VersionConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) VersionConstraint() (localctx IVersionConstraintContext) {
	this := p
	_ = this

	localctx = NewVersionConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, SolidityParserRULE_versionConstraint)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(241)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 7, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(234)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__3) | (1 << SolidityParserT__4) | (1 << SolidityParserT__5) | (1 << SolidityParserT__6) | (1 << SolidityParserT__7) | (1 << SolidityParserT__8) | (1 << SolidityParserT__9))) != 0) {
			{
				p.SetState(233)
				p.VersionOperator()
			}

		}
		{
			p.SetState(236)
			p.Match(SolidityParserVersionLiteral)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(238)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__3) | (1 << SolidityParserT__4) | (1 << SolidityParserT__5) | (1 << SolidityParserT__6) | (1 << SolidityParserT__7) | (1 << SolidityParserT__8) | (1 << SolidityParserT__9))) != 0) {
			{
				p.SetState(237)
				p.VersionOperator()
			}

		}
		{
			p.SetState(240)
			p.Match(SolidityParserDecimalNumber)
		}

	}


	return localctx
}


// IImportDeclarationContext is an interface to support dynamic dispatch.
type IImportDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDeclarationContext differentiates from other interfaces.
	IsImportDeclarationContext()
}

type ImportDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclarationContext() *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importDeclaration
	return p
}

func (*ImportDeclarationContext) IsImportDeclarationContext() {}

func NewImportDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclarationContext {
	var p = new(ImportDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importDeclaration

	return p
}

func (s *ImportDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclarationContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ImportDeclarationContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ImportDeclaration() (localctx IImportDeclarationContext) {
	this := p
	_ = this

	localctx = NewImportDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, SolidityParserRULE_importDeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(243)
		p.Identifier()
	}
	p.SetState(246)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__10 {
		{
			p.SetState(244)
			p.Match(SolidityParserT__10)
		}
		{
			p.SetState(245)
			p.Identifier()
		}

	}



	return localctx
}


// IImportDirectiveContext is an interface to support dynamic dispatch.
type IImportDirectiveContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportDirectiveContext differentiates from other interfaces.
	IsImportDirectiveContext()
}

type ImportDirectiveContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDirectiveContext() *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importDirective
	return p
}

func (*ImportDirectiveContext) IsImportDirectiveContext() {}

func NewImportDirectiveContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDirectiveContext {
	var p = new(ImportDirectiveContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importDirective

	return p
}

func (s *ImportDirectiveContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDirectiveContext) ImportPath() IImportPathContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportPathContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IImportPathContext)
}

func (s *ImportDirectiveContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *ImportDirectiveContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDirectiveContext) AllImportDeclaration() []IImportDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem())
	var tst = make([]IImportDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IImportDeclarationContext)
		}
	}

	return tst
}

func (s *ImportDirectiveContext) ImportDeclaration(i int) IImportDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IImportDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IImportDeclarationContext)
}

func (s *ImportDirectiveContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDirectiveContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ImportDirective() (localctx IImportDirectiveContext) {
	this := p
	_ = this

	localctx = NewImportDirectiveContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, SolidityParserRULE_importDirective)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(284)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 13, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(248)
			p.Match(SolidityParserT__11)
		}
		{
			p.SetState(249)
			p.ImportPath()
		}
		p.SetState(252)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SolidityParserT__10 {
			{
				p.SetState(250)
				p.Match(SolidityParserT__10)
			}
			{
				p.SetState(251)
				p.Identifier()
			}

		}
		{
			p.SetState(254)
			p.Match(SolidityParserT__1)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(256)
			p.Match(SolidityParserT__11)
		}
		p.SetState(259)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserT__12:
			{
				p.SetState(257)
				p.Match(SolidityParserT__12)
			}


		case SolidityParserT__13, SolidityParserT__24, SolidityParserT__41, SolidityParserT__53, SolidityParserT__95, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier:
			{
				p.SetState(258)
				p.Identifier()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}
		p.SetState(263)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SolidityParserT__10 {
			{
				p.SetState(261)
				p.Match(SolidityParserT__10)
			}
			{
				p.SetState(262)
				p.Identifier()
			}

		}
		{
			p.SetState(265)
			p.Match(SolidityParserT__13)
		}
		{
			p.SetState(266)
			p.ImportPath()
		}
		{
			p.SetState(267)
			p.Match(SolidityParserT__1)
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(269)
			p.Match(SolidityParserT__11)
		}
		{
			p.SetState(270)
			p.Match(SolidityParserT__14)
		}
		{
			p.SetState(271)
			p.ImportDeclaration()
		}
		p.SetState(276)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(272)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(273)
				p.ImportDeclaration()
			}


			p.SetState(278)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(279)
			p.Match(SolidityParserT__16)
		}
		{
			p.SetState(280)
			p.Match(SolidityParserT__13)
		}
		{
			p.SetState(281)
			p.ImportPath()
		}
		{
			p.SetState(282)
			p.Match(SolidityParserT__1)
		}

	}


	return localctx
}


// IImportPathContext is an interface to support dynamic dispatch.
type IImportPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsImportPathContext differentiates from other interfaces.
	IsImportPathContext()
}

type ImportPathContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathContext() *ImportPathContext {
	var p = new(ImportPathContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_importPath
	return p
}

func (*ImportPathContext) IsImportPathContext() {}

func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathContext {
	var p = new(ImportPathContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_importPath

	return p
}

func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathContext) StringLiteralFragment() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteralFragment, 0)
}

func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ImportPath() (localctx IImportPathContext) {
	this := p
	_ = this

	localctx = NewImportPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, SolidityParserRULE_importPath)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(286)
		p.Match(SolidityParserStringLiteralFragment)
	}



	return localctx
}


// IContractDefinitionContext is an interface to support dynamic dispatch.
type IContractDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContractDefinitionContext differentiates from other interfaces.
	IsContractDefinitionContext()
}

type ContractDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContractDefinitionContext() *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractDefinition
	return p
}

func (*ContractDefinitionContext) IsContractDefinitionContext() {}

func NewContractDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractDefinitionContext {
	var p = new(ContractDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractDefinition

	return p
}

func (s *ContractDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ContractDefinitionContext) AllInheritanceSpecifier() []IInheritanceSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem())
	var tst = make([]IInheritanceSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IInheritanceSpecifierContext)
		}
	}

	return tst
}

func (s *ContractDefinitionContext) InheritanceSpecifier(i int) IInheritanceSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInheritanceSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IInheritanceSpecifierContext)
}

func (s *ContractDefinitionContext) AllContractPart() []IContractPartContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IContractPartContext)(nil)).Elem())
	var tst = make([]IContractPartContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IContractPartContext)
		}
	}

	return tst
}

func (s *ContractDefinitionContext) ContractPart(i int) IContractPartContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContractPartContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IContractPartContext)
}

func (s *ContractDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ContractDefinition() (localctx IContractDefinitionContext) {
	this := p
	_ = this

	localctx = NewContractDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, SolidityParserRULE_contractDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(289)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__17 {
		{
			p.SetState(288)
			p.Match(SolidityParserT__17)
		}

	}
	{
		p.SetState(291)
		_la = p.GetTokenStream().LA(1)

		if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__18) | (1 << SolidityParserT__19) | (1 << SolidityParserT__20))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(292)
		p.Identifier()
	}
	p.SetState(302)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__21 {
		{
			p.SetState(293)
			p.Match(SolidityParserT__21)
		}
		{
			p.SetState(294)
			p.InheritanceSpecifier()
		}
		p.SetState(299)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(295)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(296)
				p.InheritanceSpecifier()
			}


			p.SetState(301)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(304)
		p.Match(SolidityParserT__14)
	}
	p.SetState(308)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__25) | (1 << SolidityParserT__27) | (1 << SolidityParserT__28) | (1 << SolidityParserT__29))) != 0) || ((((_la - 32)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 32))) & ((1 << (SolidityParserT__31 - 32)) | (1 << (SolidityParserT__32 - 32)) | (1 << (SolidityParserT__35 - 32)) | (1 << (SolidityParserT__37 - 32)) | (1 << (SolidityParserT__41 - 32)) | (1 << (SolidityParserT__53 - 32)) | (1 << (SolidityParserT__54 - 32)) | (1 << (SolidityParserT__55 - 32)) | (1 << (SolidityParserT__56 - 32)) | (1 << (SolidityParserT__57 - 32)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserTypeKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserFallbackKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(305)
			p.ContractPart()
		}


		p.SetState(310)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(311)
		p.Match(SolidityParserT__16)
	}



	return localctx
}


// IInheritanceSpecifierContext is an interface to support dynamic dispatch.
type IInheritanceSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInheritanceSpecifierContext differentiates from other interfaces.
	IsInheritanceSpecifierContext()
}

type InheritanceSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInheritanceSpecifierContext() *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier
	return p
}

func (*InheritanceSpecifierContext) IsInheritanceSpecifierContext() {}

func NewInheritanceSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InheritanceSpecifierContext {
	var p = new(InheritanceSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inheritanceSpecifier

	return p
}

func (s *InheritanceSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *InheritanceSpecifierContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *InheritanceSpecifierContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *InheritanceSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InheritanceSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) InheritanceSpecifier() (localctx IInheritanceSpecifierContext) {
	this := p
	_ = this

	localctx = NewInheritanceSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, SolidityParserRULE_inheritanceSpecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(313)
		p.UserDefinedTypeName()
	}
	p.SetState(319)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__22 {
		{
			p.SetState(314)
			p.Match(SolidityParserT__22)
		}
		p.SetState(316)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
			{
				p.SetState(315)
				p.ExpressionList()
			}

		}
		{
			p.SetState(318)
			p.Match(SolidityParserT__23)
		}

	}



	return localctx
}


// IContractPartContext is an interface to support dynamic dispatch.
type IContractPartContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContractPartContext differentiates from other interfaces.
	IsContractPartContext()
}

type ContractPartContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContractPartContext() *ContractPartContext {
	var p = new(ContractPartContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_contractPart
	return p
}

func (*ContractPartContext) IsContractPartContext() {}

func NewContractPartContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContractPartContext {
	var p = new(ContractPartContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_contractPart

	return p
}

func (s *ContractPartContext) GetParser() antlr.Parser { return s.parser }

func (s *ContractPartContext) StateVariableDeclaration() IStateVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStateVariableDeclarationContext)
}

func (s *ContractPartContext) UsingForDeclaration() IUsingForDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUsingForDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUsingForDeclarationContext)
}

func (s *ContractPartContext) StructDefinition() IStructDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStructDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStructDefinitionContext)
}

func (s *ContractPartContext) ModifierDefinition() IModifierDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierDefinitionContext)
}

func (s *ContractPartContext) FunctionDefinition() IFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDefinitionContext)
}

func (s *ContractPartContext) EventDefinition() IEventDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventDefinitionContext)
}

func (s *ContractPartContext) EnumDefinition() IEnumDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEnumDefinitionContext)
}

func (s *ContractPartContext) CustomErrorDefinition() ICustomErrorDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICustomErrorDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ICustomErrorDefinitionContext)
}

func (s *ContractPartContext) TypeDefinition() ITypeDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeDefinitionContext)
}

func (s *ContractPartContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContractPartContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ContractPart() (localctx IContractPartContext) {
	this := p
	_ = this

	localctx = NewContractPartContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, SolidityParserRULE_contractPart)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(330)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 20, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(321)
			p.StateVariableDeclaration()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(322)
			p.UsingForDeclaration()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(323)
			p.StructDefinition()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(324)
			p.ModifierDefinition()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(325)
			p.FunctionDefinition()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(326)
			p.EventDefinition()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(327)
			p.EnumDefinition()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(328)
			p.CustomErrorDefinition()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(329)
			p.TypeDefinition()
		}

	}


	return localctx
}


// IStateVariableDeclarationContext is an interface to support dynamic dispatch.
type IStateVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStateVariableDeclarationContext differentiates from other interfaces.
	IsStateVariableDeclarationContext()
}

type StateVariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStateVariableDeclarationContext() *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration
	return p
}

func (*StateVariableDeclarationContext) IsStateVariableDeclarationContext() {}

func NewStateVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateVariableDeclarationContext {
	var p = new(StateVariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateVariableDeclaration

	return p
}

func (s *StateVariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *StateVariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *StateVariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StateVariableDeclarationContext) AllPublicKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublicKeyword)
}

func (s *StateVariableDeclarationContext) PublicKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublicKeyword, i)
}

func (s *StateVariableDeclarationContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *StateVariableDeclarationContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *StateVariableDeclarationContext) AllPrivateKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPrivateKeyword)
}

func (s *StateVariableDeclarationContext) PrivateKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivateKeyword, i)
}

func (s *StateVariableDeclarationContext) AllConstantKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserConstantKeyword)
}

func (s *StateVariableDeclarationContext) ConstantKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserConstantKeyword, i)
}

func (s *StateVariableDeclarationContext) AllImmutableKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserImmutableKeyword)
}

func (s *StateVariableDeclarationContext) ImmutableKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserImmutableKeyword, i)
}

func (s *StateVariableDeclarationContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *StateVariableDeclarationContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *StateVariableDeclarationContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *StateVariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateVariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) StateVariableDeclaration() (localctx IStateVariableDeclarationContext) {
	this := p
	_ = this

	localctx = NewStateVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, SolidityParserRULE_stateVariableDeclaration)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(332)
		p.typeName(0)
	}
	p.SetState(341)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ((((_la - 97)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 97))) & ((1 << (SolidityParserT__96 - 97)) | (1 << (SolidityParserConstantKeyword - 97)) | (1 << (SolidityParserImmutableKeyword - 97)) | (1 << (SolidityParserInternalKeyword - 97)) | (1 << (SolidityParserPrivateKeyword - 97)) | (1 << (SolidityParserPublicKeyword - 97)))) != 0) {
		p.SetState(339)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserPublicKeyword:
			{
				p.SetState(333)
				p.Match(SolidityParserPublicKeyword)
			}


		case SolidityParserInternalKeyword:
			{
				p.SetState(334)
				p.Match(SolidityParserInternalKeyword)
			}


		case SolidityParserPrivateKeyword:
			{
				p.SetState(335)
				p.Match(SolidityParserPrivateKeyword)
			}


		case SolidityParserConstantKeyword:
			{
				p.SetState(336)
				p.Match(SolidityParserConstantKeyword)
			}


		case SolidityParserImmutableKeyword:
			{
				p.SetState(337)
				p.Match(SolidityParserImmutableKeyword)
			}


		case SolidityParserT__96:
			{
				p.SetState(338)
				p.OverrideSpecifier()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(343)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(344)
		p.Identifier()
	}
	p.SetState(347)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__9 {
		{
			p.SetState(345)
			p.Match(SolidityParserT__9)
		}
		{
			p.SetState(346)
			p.expression(0)
		}

	}
	{
		p.SetState(349)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IFileLevelConstantContext is an interface to support dynamic dispatch.
type IFileLevelConstantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFileLevelConstantContext differentiates from other interfaces.
	IsFileLevelConstantContext()
}

type FileLevelConstantContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFileLevelConstantContext() *FileLevelConstantContext {
	var p = new(FileLevelConstantContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_fileLevelConstant
	return p
}

func (*FileLevelConstantContext) IsFileLevelConstantContext() {}

func NewFileLevelConstantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FileLevelConstantContext {
	var p = new(FileLevelConstantContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_fileLevelConstant

	return p
}

func (s *FileLevelConstantContext) GetParser() antlr.Parser { return s.parser }

func (s *FileLevelConstantContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *FileLevelConstantContext) ConstantKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstantKeyword, 0)
}

func (s *FileLevelConstantContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FileLevelConstantContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FileLevelConstantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FileLevelConstantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FileLevelConstant() (localctx IFileLevelConstantContext) {
	this := p
	_ = this

	localctx = NewFileLevelConstantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, SolidityParserRULE_fileLevelConstant)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(351)
		p.typeName(0)
	}
	{
		p.SetState(352)
		p.Match(SolidityParserConstantKeyword)
	}
	{
		p.SetState(353)
		p.Identifier()
	}
	{
		p.SetState(354)
		p.Match(SolidityParserT__9)
	}
	{
		p.SetState(355)
		p.expression(0)
	}
	{
		p.SetState(356)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// ICustomErrorDefinitionContext is an interface to support dynamic dispatch.
type ICustomErrorDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCustomErrorDefinitionContext differentiates from other interfaces.
	IsCustomErrorDefinitionContext()
}

type CustomErrorDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCustomErrorDefinitionContext() *CustomErrorDefinitionContext {
	var p = new(CustomErrorDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_customErrorDefinition
	return p
}

func (*CustomErrorDefinitionContext) IsCustomErrorDefinitionContext() {}

func NewCustomErrorDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CustomErrorDefinitionContext {
	var p = new(CustomErrorDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_customErrorDefinition

	return p
}

func (s *CustomErrorDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *CustomErrorDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CustomErrorDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *CustomErrorDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CustomErrorDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) CustomErrorDefinition() (localctx ICustomErrorDefinitionContext) {
	this := p
	_ = this

	localctx = NewCustomErrorDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, SolidityParserRULE_customErrorDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(358)
		p.Match(SolidityParserT__24)
	}
	{
		p.SetState(359)
		p.Identifier()
	}
	{
		p.SetState(360)
		p.ParameterList()
	}
	{
		p.SetState(361)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// ITypeDefinitionContext is an interface to support dynamic dispatch.
type ITypeDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeDefinitionContext differentiates from other interfaces.
	IsTypeDefinitionContext()
}

type TypeDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeDefinitionContext() *TypeDefinitionContext {
	var p = new(TypeDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_typeDefinition
	return p
}

func (*TypeDefinitionContext) IsTypeDefinitionContext() {}

func NewTypeDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeDefinitionContext {
	var p = new(TypeDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_typeDefinition

	return p
}

func (s *TypeDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeDefinitionContext) TypeKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserTypeKeyword, 0)
}

func (s *TypeDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeDefinitionContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *TypeDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) TypeDefinition() (localctx ITypeDefinitionContext) {
	this := p
	_ = this

	localctx = NewTypeDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, SolidityParserRULE_typeDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(363)
		p.Match(SolidityParserTypeKeyword)
	}
	{
		p.SetState(364)
		p.Identifier()
	}
	{
		p.SetState(365)
		p.Match(SolidityParserT__21)
	}
	{
		p.SetState(366)
		p.ElementaryTypeName()
	}
	{
		p.SetState(367)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IUsingForDeclarationContext is an interface to support dynamic dispatch.
type IUsingForDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUsingForDeclarationContext differentiates from other interfaces.
	IsUsingForDeclarationContext()
}

type UsingForDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUsingForDeclarationContext() *UsingForDeclarationContext {
	var p = new(UsingForDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_usingForDeclaration
	return p
}

func (*UsingForDeclarationContext) IsUsingForDeclarationContext() {}

func NewUsingForDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UsingForDeclarationContext {
	var p = new(UsingForDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_usingForDeclaration

	return p
}

func (s *UsingForDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *UsingForDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UsingForDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *UsingForDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UsingForDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) UsingForDeclaration() (localctx IUsingForDeclarationContext) {
	this := p
	_ = this

	localctx = NewUsingForDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, SolidityParserRULE_usingForDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(369)
		p.Match(SolidityParserT__25)
	}
	{
		p.SetState(370)
		p.Identifier()
	}
	{
		p.SetState(371)
		p.Match(SolidityParserT__26)
	}
	p.SetState(374)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__12:
		{
			p.SetState(372)
			p.Match(SolidityParserT__12)
		}


	case SolidityParserT__13, SolidityParserT__24, SolidityParserT__29, SolidityParserT__35, SolidityParserT__37, SolidityParserT__41, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__95, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier:
		{
			p.SetState(373)
			p.typeName(0)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(376)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IStructDefinitionContext is an interface to support dynamic dispatch.
type IStructDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStructDefinitionContext differentiates from other interfaces.
	IsStructDefinitionContext()
}

type StructDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDefinitionContext() *StructDefinitionContext {
	var p = new(StructDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_structDefinition
	return p
}

func (*StructDefinitionContext) IsStructDefinitionContext() {}

func NewStructDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDefinitionContext {
	var p = new(StructDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_structDefinition

	return p
}

func (s *StructDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructDefinitionContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *StructDefinitionContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *StructDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) StructDefinition() (localctx IStructDefinitionContext) {
	this := p
	_ = this

	localctx = NewStructDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, SolidityParserRULE_structDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(378)
		p.Match(SolidityParserT__27)
	}
	{
		p.SetState(379)
		p.Identifier()
	}
	{
		p.SetState(380)
		p.Match(SolidityParserT__14)
	}
	p.SetState(391)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__37 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(381)
			p.VariableDeclaration()
		}
		{
			p.SetState(382)
			p.Match(SolidityParserT__1)
		}
		p.SetState(388)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__37 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
			{
				p.SetState(383)
				p.VariableDeclaration()
			}
			{
				p.SetState(384)
				p.Match(SolidityParserT__1)
			}


			p.SetState(390)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(393)
		p.Match(SolidityParserT__16)
	}



	return localctx
}


// IModifierDefinitionContext is an interface to support dynamic dispatch.
type IModifierDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierDefinitionContext differentiates from other interfaces.
	IsModifierDefinitionContext()
}

type ModifierDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierDefinitionContext() *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierDefinition
	return p
}

func (*ModifierDefinitionContext) IsModifierDefinitionContext() {}

func NewModifierDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierDefinitionContext {
	var p = new(ModifierDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierDefinition

	return p
}

func (s *ModifierDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifierDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ModifierDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ModifierDefinitionContext) AllVirtualKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserVirtualKeyword)
}

func (s *ModifierDefinitionContext) VirtualKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserVirtualKeyword, i)
}

func (s *ModifierDefinitionContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *ModifierDefinitionContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *ModifierDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ModifierDefinition() (localctx IModifierDefinitionContext) {
	this := p
	_ = this

	localctx = NewModifierDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, SolidityParserRULE_modifierDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(395)
		p.Match(SolidityParserT__28)
	}
	{
		p.SetState(396)
		p.Identifier()
	}
	p.SetState(398)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__22 {
		{
			p.SetState(397)
			p.ParameterList()
		}

	}
	p.SetState(404)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SolidityParserT__96 || _la == SolidityParserVirtualKeyword {
		p.SetState(402)
		p.GetErrorHandler().Sync(p)

		switch p.GetTokenStream().LA(1) {
		case SolidityParserVirtualKeyword:
			{
				p.SetState(400)
				p.Match(SolidityParserVirtualKeyword)
			}


		case SolidityParserT__96:
			{
				p.SetState(401)
				p.OverrideSpecifier()
			}



		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(406)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	p.SetState(409)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__1:
		{
			p.SetState(407)
			p.Match(SolidityParserT__1)
		}


	case SolidityParserT__14:
		{
			p.SetState(408)
			p.Block()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IModifierInvocationContext is an interface to support dynamic dispatch.
type IModifierInvocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierInvocationContext differentiates from other interfaces.
	IsModifierInvocationContext()
}

type ModifierInvocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierInvocationContext() *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierInvocation
	return p
}

func (*ModifierInvocationContext) IsModifierInvocationContext() {}

func NewModifierInvocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierInvocationContext {
	var p = new(ModifierInvocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierInvocation

	return p
}

func (s *ModifierInvocationContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierInvocationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModifierInvocationContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *ModifierInvocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierInvocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ModifierInvocation() (localctx IModifierInvocationContext) {
	this := p
	_ = this

	localctx = NewModifierInvocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, SolidityParserRULE_modifierInvocation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(411)
		p.Identifier()
	}
	p.SetState(417)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__22 {
		{
			p.SetState(412)
			p.Match(SolidityParserT__22)
		}
		p.SetState(414)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
			{
				p.SetState(413)
				p.ExpressionList()
			}

		}
		{
			p.SetState(416)
			p.Match(SolidityParserT__23)
		}

	}



	return localctx
}


// IFunctionDefinitionContext is an interface to support dynamic dispatch.
type IFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDefinitionContext differentiates from other interfaces.
	IsFunctionDefinitionContext()
}

type FunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDefinitionContext() *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionDefinition
	return p
}

func (*FunctionDefinitionContext) IsFunctionDefinitionContext() {}

func NewFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDefinitionContext {
	var p = new(FunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionDefinition

	return p
}

func (s *FunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDefinitionContext) FunctionDescriptor() IFunctionDescriptorContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionDescriptorContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionDescriptorContext)
}

func (s *FunctionDefinitionContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *FunctionDefinitionContext) ModifierList() IModifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IModifierListContext)
}

func (s *FunctionDefinitionContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDefinitionContext) ReturnParameters() IReturnParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnParametersContext)
}

func (s *FunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FunctionDefinition() (localctx IFunctionDefinitionContext) {
	this := p
	_ = this

	localctx = NewFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, SolidityParserRULE_functionDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(419)
		p.FunctionDescriptor()
	}
	{
		p.SetState(420)
		p.ParameterList()
	}
	{
		p.SetState(421)
		p.ModifierList()
	}
	p.SetState(423)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__30 {
		{
			p.SetState(422)
			p.ReturnParameters()
		}

	}
	p.SetState(427)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__1:
		{
			p.SetState(425)
			p.Match(SolidityParserT__1)
		}


	case SolidityParserT__14:
		{
			p.SetState(426)
			p.Block()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}



	return localctx
}


// IFunctionDescriptorContext is an interface to support dynamic dispatch.
type IFunctionDescriptorContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionDescriptorContext differentiates from other interfaces.
	IsFunctionDescriptorContext()
}

type FunctionDescriptorContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDescriptorContext() *FunctionDescriptorContext {
	var p = new(FunctionDescriptorContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionDescriptor
	return p
}

func (*FunctionDescriptorContext) IsFunctionDescriptorContext() {}

func NewFunctionDescriptorContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDescriptorContext {
	var p = new(FunctionDescriptorContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionDescriptor

	return p
}

func (s *FunctionDescriptorContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDescriptorContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionDescriptorContext) ConstructorKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstructorKeyword, 0)
}

func (s *FunctionDescriptorContext) FallbackKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserFallbackKeyword, 0)
}

func (s *FunctionDescriptorContext) ReceiveKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserReceiveKeyword, 0)
}

func (s *FunctionDescriptorContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDescriptorContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FunctionDescriptor() (localctx IFunctionDescriptorContext) {
	this := p
	_ = this

	localctx = NewFunctionDescriptorContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, SolidityParserRULE_functionDescriptor)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(436)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__29:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(429)
			p.Match(SolidityParserT__29)
		}
		p.SetState(431)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
			{
				p.SetState(430)
				p.Identifier()
			}

		}


	case SolidityParserConstructorKeyword:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(433)
			p.Match(SolidityParserConstructorKeyword)
		}


	case SolidityParserFallbackKeyword:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(434)
			p.Match(SolidityParserFallbackKeyword)
		}


	case SolidityParserReceiveKeyword:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(435)
			p.Match(SolidityParserReceiveKeyword)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IReturnParametersContext is an interface to support dynamic dispatch.
type IReturnParametersContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnParametersContext differentiates from other interfaces.
	IsReturnParametersContext()
}

type ReturnParametersContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnParametersContext() *ReturnParametersContext {
	var p = new(ReturnParametersContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_returnParameters
	return p
}

func (*ReturnParametersContext) IsReturnParametersContext() {}

func NewReturnParametersContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnParametersContext {
	var p = new(ReturnParametersContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_returnParameters

	return p
}

func (s *ReturnParametersContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnParametersContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *ReturnParametersContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnParametersContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ReturnParameters() (localctx IReturnParametersContext) {
	this := p
	_ = this

	localctx = NewReturnParametersContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, SolidityParserRULE_returnParameters)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(438)
		p.Match(SolidityParserT__30)
	}
	{
		p.SetState(439)
		p.ParameterList()
	}



	return localctx
}


// IModifierListContext is an interface to support dynamic dispatch.
type IModifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsModifierListContext differentiates from other interfaces.
	IsModifierListContext()
}

type ModifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModifierListContext() *ModifierListContext {
	var p = new(ModifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_modifierList
	return p
}

func (*ModifierListContext) IsModifierListContext() {}

func NewModifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModifierListContext {
	var p = new(ModifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_modifierList

	return p
}

func (s *ModifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *ModifierListContext) AllExternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternalKeyword)
}

func (s *ModifierListContext) ExternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternalKeyword, i)
}

func (s *ModifierListContext) AllPublicKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPublicKeyword)
}

func (s *ModifierListContext) PublicKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPublicKeyword, i)
}

func (s *ModifierListContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *ModifierListContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *ModifierListContext) AllPrivateKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserPrivateKeyword)
}

func (s *ModifierListContext) PrivateKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserPrivateKeyword, i)
}

func (s *ModifierListContext) AllVirtualKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserVirtualKeyword)
}

func (s *ModifierListContext) VirtualKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserVirtualKeyword, i)
}

func (s *ModifierListContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *ModifierListContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *ModifierListContext) AllModifierInvocation() []IModifierInvocationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem())
	var tst = make([]IModifierInvocationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IModifierInvocationContext)
		}
	}

	return tst
}

func (s *ModifierListContext) ModifierInvocation(i int) IModifierInvocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IModifierInvocationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IModifierInvocationContext)
}

func (s *ModifierListContext) AllOverrideSpecifier() []IOverrideSpecifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem())
	var tst = make([]IOverrideSpecifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IOverrideSpecifierContext)
		}
	}

	return tst
}

func (s *ModifierListContext) OverrideSpecifier(i int) IOverrideSpecifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IOverrideSpecifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IOverrideSpecifierContext)
}

func (s *ModifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ModifierList() (localctx IModifierListContext) {
	this := p
	_ = this

	localctx = NewModifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, SolidityParserRULE_modifierList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(451)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserT__96 - 96)) | (1 << (SolidityParserConstantKeyword - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserExternalKeyword - 96)) | (1 << (SolidityParserInternalKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserPrivateKeyword - 96)) | (1 << (SolidityParserPublicKeyword - 96)) | (1 << (SolidityParserVirtualKeyword - 96)) | (1 << (SolidityParserPureKeyword - 96)) | (1 << (SolidityParserViewKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		p.SetState(449)
		p.GetErrorHandler().Sync(p)
		switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 37, p.GetParserRuleContext()) {
		case 1:
			{
				p.SetState(441)
				p.Match(SolidityParserExternalKeyword)
			}


		case 2:
			{
				p.SetState(442)
				p.Match(SolidityParserPublicKeyword)
			}


		case 3:
			{
				p.SetState(443)
				p.Match(SolidityParserInternalKeyword)
			}


		case 4:
			{
				p.SetState(444)
				p.Match(SolidityParserPrivateKeyword)
			}


		case 5:
			{
				p.SetState(445)
				p.Match(SolidityParserVirtualKeyword)
			}


		case 6:
			{
				p.SetState(446)
				p.StateMutability()
			}


		case 7:
			{
				p.SetState(447)
				p.ModifierInvocation()
			}


		case 8:
			{
				p.SetState(448)
				p.OverrideSpecifier()
			}

		}

		p.SetState(453)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IEventDefinitionContext is an interface to support dynamic dispatch.
type IEventDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventDefinitionContext differentiates from other interfaces.
	IsEventDefinitionContext()
}

type EventDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventDefinitionContext() *EventDefinitionContext {
	var p = new(EventDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventDefinition
	return p
}

func (*EventDefinitionContext) IsEventDefinitionContext() {}

func NewEventDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventDefinitionContext {
	var p = new(EventDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventDefinition

	return p
}

func (s *EventDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EventDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventDefinitionContext) EventParameterList() IEventParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEventParameterListContext)
}

func (s *EventDefinitionContext) AnonymousKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserAnonymousKeyword, 0)
}

func (s *EventDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) EventDefinition() (localctx IEventDefinitionContext) {
	this := p
	_ = this

	localctx = NewEventDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, SolidityParserRULE_eventDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(454)
		p.Match(SolidityParserT__31)
	}
	{
		p.SetState(455)
		p.Identifier()
	}
	{
		p.SetState(456)
		p.EventParameterList()
	}
	p.SetState(458)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserAnonymousKeyword {
		{
			p.SetState(457)
			p.Match(SolidityParserAnonymousKeyword)
		}

	}
	{
		p.SetState(460)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IEnumValueContext is an interface to support dynamic dispatch.
type IEnumValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumValueContext differentiates from other interfaces.
	IsEnumValueContext()
}

type EnumValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumValueContext() *EnumValueContext {
	var p = new(EnumValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_enumValue
	return p
}

func (*EnumValueContext) IsEnumValueContext() {}

func NewEnumValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumValueContext {
	var p = new(EnumValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_enumValue

	return p
}

func (s *EnumValueContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumValueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) EnumValue() (localctx IEnumValueContext) {
	this := p
	_ = this

	localctx = NewEnumValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, SolidityParserRULE_enumValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(462)
		p.Identifier()
	}



	return localctx
}


// IEnumDefinitionContext is an interface to support dynamic dispatch.
type IEnumDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEnumDefinitionContext differentiates from other interfaces.
	IsEnumDefinitionContext()
}

type EnumDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDefinitionContext() *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_enumDefinition
	return p
}

func (*EnumDefinitionContext) IsEnumDefinitionContext() {}

func NewEnumDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDefinitionContext {
	var p = new(EnumDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_enumDefinition

	return p
}

func (s *EnumDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumDefinitionContext) AllEnumValue() []IEnumValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEnumValueContext)(nil)).Elem())
	var tst = make([]IEnumValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEnumValueContext)
		}
	}

	return tst
}

func (s *EnumDefinitionContext) EnumValue(i int) IEnumValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEnumValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEnumValueContext)
}

func (s *EnumDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) EnumDefinition() (localctx IEnumDefinitionContext) {
	this := p
	_ = this

	localctx = NewEnumDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, SolidityParserRULE_enumDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(464)
		p.Match(SolidityParserT__32)
	}
	{
		p.SetState(465)
		p.Identifier()
	}
	{
		p.SetState(466)
		p.Match(SolidityParserT__14)
	}
	p.SetState(468)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(467)
			p.EnumValue()
		}

	}
	p.SetState(474)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SolidityParserT__15 {
		{
			p.SetState(470)
			p.Match(SolidityParserT__15)
		}
		{
			p.SetState(471)
			p.EnumValue()
		}


		p.SetState(476)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(477)
		p.Match(SolidityParserT__16)
	}



	return localctx
}


// IParameterListContext is an interface to support dynamic dispatch.
type IParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterListContext differentiates from other interfaces.
	IsParameterListContext()
}

type ParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterListContext() *ParameterListContext {
	var p = new(ParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameterList
	return p
}

func (*ParameterListContext) IsParameterListContext() {}

func NewParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterListContext {
	var p = new(ParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameterList

	return p
}

func (s *ParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterListContext) AllParameter() []IParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IParameterContext)(nil)).Elem())
	var tst = make([]IParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IParameterContext)
		}
	}

	return tst
}

func (s *ParameterListContext) Parameter(i int) IParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ParameterList() (localctx IParameterListContext) {
	this := p
	_ = this

	localctx = NewParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, SolidityParserRULE_parameterList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(479)
		p.Match(SolidityParserT__22)
	}
	p.SetState(488)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__37 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(480)
			p.Parameter()
		}
		p.SetState(485)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(481)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(482)
				p.Parameter()
			}


			p.SetState(487)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(490)
		p.Match(SolidityParserT__23)
	}



	return localctx
}


// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_parameter
	return p
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ParameterContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *ParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) Parameter() (localctx IParameterContext) {
	this := p
	_ = this

	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 58, SolidityParserRULE_parameter)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(492)
		p.typeName(0)
	}
	p.SetState(494)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 44, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(493)
			p.StorageLocation()
		}


	}
	p.SetState(497)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(496)
			p.Identifier()
		}

	}



	return localctx
}


// IEventParameterListContext is an interface to support dynamic dispatch.
type IEventParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventParameterListContext differentiates from other interfaces.
	IsEventParameterListContext()
}

type EventParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventParameterListContext() *EventParameterListContext {
	var p = new(EventParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventParameterList
	return p
}

func (*EventParameterListContext) IsEventParameterListContext() {}

func NewEventParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventParameterListContext {
	var p = new(EventParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventParameterList

	return p
}

func (s *EventParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *EventParameterListContext) AllEventParameter() []IEventParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IEventParameterContext)(nil)).Elem())
	var tst = make([]IEventParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IEventParameterContext)
		}
	}

	return tst
}

func (s *EventParameterListContext) EventParameter(i int) IEventParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEventParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IEventParameterContext)
}

func (s *EventParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) EventParameterList() (localctx IEventParameterListContext) {
	this := p
	_ = this

	localctx = NewEventParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, SolidityParserRULE_eventParameterList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(499)
		p.Match(SolidityParserT__22)
	}
	p.SetState(508)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__37 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(500)
			p.EventParameter()
		}
		p.SetState(505)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(501)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(502)
				p.EventParameter()
			}


			p.SetState(507)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(510)
		p.Match(SolidityParserT__23)
	}



	return localctx
}


// IEventParameterContext is an interface to support dynamic dispatch.
type IEventParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEventParameterContext differentiates from other interfaces.
	IsEventParameterContext()
}

type EventParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEventParameterContext() *EventParameterContext {
	var p = new(EventParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_eventParameter
	return p
}

func (*EventParameterContext) IsEventParameterContext() {}

func NewEventParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EventParameterContext {
	var p = new(EventParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_eventParameter

	return p
}

func (s *EventParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *EventParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *EventParameterContext) IndexedKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserIndexedKeyword, 0)
}

func (s *EventParameterContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EventParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EventParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) EventParameter() (localctx IEventParameterContext) {
	this := p
	_ = this

	localctx = NewEventParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, SolidityParserRULE_eventParameter)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(512)
		p.typeName(0)
	}
	p.SetState(514)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserIndexedKeyword {
		{
			p.SetState(513)
			p.Match(SolidityParserIndexedKeyword)
		}

	}
	p.SetState(517)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(516)
			p.Identifier()
		}

	}



	return localctx
}


// IFunctionTypeParameterListContext is an interface to support dynamic dispatch.
type IFunctionTypeParameterListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeParameterListContext differentiates from other interfaces.
	IsFunctionTypeParameterListContext()
}

type FunctionTypeParameterListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeParameterListContext() *FunctionTypeParameterListContext {
	var p = new(FunctionTypeParameterListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeParameterList
	return p
}

func (*FunctionTypeParameterListContext) IsFunctionTypeParameterListContext() {}

func NewFunctionTypeParameterListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeParameterListContext {
	var p = new(FunctionTypeParameterListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeParameterList

	return p
}

func (s *FunctionTypeParameterListContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeParameterListContext) AllFunctionTypeParameter() []IFunctionTypeParameterContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionTypeParameterContext)(nil)).Elem())
	var tst = make([]IFunctionTypeParameterContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionTypeParameterContext)
		}
	}

	return tst
}

func (s *FunctionTypeParameterListContext) FunctionTypeParameter(i int) IFunctionTypeParameterContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeParameterContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeParameterContext)
}

func (s *FunctionTypeParameterListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeParameterListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FunctionTypeParameterList() (localctx IFunctionTypeParameterListContext) {
	this := p
	_ = this

	localctx = NewFunctionTypeParameterListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, SolidityParserRULE_functionTypeParameterList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(519)
		p.Match(SolidityParserT__22)
	}
	p.SetState(528)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__37 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(520)
			p.FunctionTypeParameter()
		}
		p.SetState(525)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(521)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(522)
				p.FunctionTypeParameter()
			}


			p.SetState(527)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

	}
	{
		p.SetState(530)
		p.Match(SolidityParserT__23)
	}



	return localctx
}


// IFunctionTypeParameterContext is an interface to support dynamic dispatch.
type IFunctionTypeParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeParameterContext differentiates from other interfaces.
	IsFunctionTypeParameterContext()
}

type FunctionTypeParameterContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeParameterContext() *FunctionTypeParameterContext {
	var p = new(FunctionTypeParameterContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeParameter
	return p
}

func (*FunctionTypeParameterContext) IsFunctionTypeParameterContext() {}

func NewFunctionTypeParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeParameterContext {
	var p = new(FunctionTypeParameterContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeParameter

	return p
}

func (s *FunctionTypeParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeParameterContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *FunctionTypeParameterContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *FunctionTypeParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FunctionTypeParameter() (localctx IFunctionTypeParameterContext) {
	this := p
	_ = this

	localctx = NewFunctionTypeParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, SolidityParserRULE_functionTypeParameter)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(532)
		p.typeName(0)
	}
	p.SetState(534)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if ((((_la - 40)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 40))) & ((1 << (SolidityParserT__39 - 40)) | (1 << (SolidityParserT__40 - 40)) | (1 << (SolidityParserT__41 - 40)))) != 0) {
		{
			p.SetState(533)
			p.StorageLocation()
		}

	}



	return localctx
}


// IVariableDeclarationContext is an interface to support dynamic dispatch.
type IVariableDeclarationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationContext differentiates from other interfaces.
	IsVariableDeclarationContext()
}

type VariableDeclarationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationContext() *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclaration
	return p
}

func (*VariableDeclarationContext) IsVariableDeclarationContext() {}

func NewVariableDeclarationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationContext {
	var p = new(VariableDeclarationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclaration

	return p
}

func (s *VariableDeclarationContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *VariableDeclarationContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *VariableDeclarationContext) StorageLocation() IStorageLocationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStorageLocationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStorageLocationContext)
}

func (s *VariableDeclarationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) VariableDeclaration() (localctx IVariableDeclarationContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, SolidityParserRULE_variableDeclaration)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(536)
		p.typeName(0)
	}
	p.SetState(538)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 53, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(537)
			p.StorageLocation()
		}


	}
	{
		p.SetState(540)
		p.Identifier()
	}



	return localctx
}


// ITypeNameContext is an interface to support dynamic dispatch.
type ITypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameContext differentiates from other interfaces.
	IsTypeNameContext()
}

type TypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameContext() *TypeNameContext {
	var p = new(TypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_typeName
	return p
}

func (*TypeNameContext) IsTypeNameContext() {}

func NewTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameContext {
	var p = new(TypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_typeName

	return p
}

func (s *TypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *TypeNameContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *TypeNameContext) Mapping() IMappingContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMappingContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMappingContext)
}

func (s *TypeNameContext) FunctionTypeName() IFunctionTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeNameContext)
}

func (s *TypeNameContext) PayableKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayableKeyword, 0)
}

func (s *TypeNameContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *TypeNameContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}





func (p *SolidityParser) TypeName() (localctx ITypeNameContext) {
	return p.typeName(0)
}

func (p *SolidityParser) typeName(_p int) (localctx ITypeNameContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewTypeNameContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeNameContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 70
	p.EnterRecursionRule(localctx, 70, SolidityParserRULE_typeName, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(549)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 54, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(543)
			p.ElementaryTypeName()
		}


	case 2:
		{
			p.SetState(544)
			p.UserDefinedTypeName()
		}


	case 3:
		{
			p.SetState(545)
			p.Mapping()
		}


	case 4:
		{
			p.SetState(546)
			p.FunctionTypeName()
		}


	case 5:
		{
			p.SetState(547)
			p.Match(SolidityParserT__35)
		}
		{
			p.SetState(548)
			p.Match(SolidityParserPayableKeyword)
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(559)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewTypeNameContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_typeName)
			p.SetState(551)

			if !(p.Precpred(p.GetParserRuleContext(), 3)) {
				panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
			}
			{
				p.SetState(552)
				p.Match(SolidityParserT__33)
			}
			p.SetState(554)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
				{
					p.SetState(553)
					p.expression(0)
				}

			}
			{
				p.SetState(556)
				p.Match(SolidityParserT__34)
			}


		}
		p.SetState(561)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 56, p.GetParserRuleContext())
	}



	return localctx
}


// IUserDefinedTypeNameContext is an interface to support dynamic dispatch.
type IUserDefinedTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUserDefinedTypeNameContext differentiates from other interfaces.
	IsUserDefinedTypeNameContext()
}

type UserDefinedTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUserDefinedTypeNameContext() *UserDefinedTypeNameContext {
	var p = new(UserDefinedTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_userDefinedTypeName
	return p
}

func (*UserDefinedTypeNameContext) IsUserDefinedTypeNameContext() {}

func NewUserDefinedTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UserDefinedTypeNameContext {
	var p = new(UserDefinedTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_userDefinedTypeName

	return p
}

func (s *UserDefinedTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *UserDefinedTypeNameContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *UserDefinedTypeNameContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *UserDefinedTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UserDefinedTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) UserDefinedTypeName() (localctx IUserDefinedTypeNameContext) {
	this := p
	_ = this

	localctx = NewUserDefinedTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, SolidityParserRULE_userDefinedTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(562)
		p.Identifier()
	}
	p.SetState(567)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(563)
				p.Match(SolidityParserT__36)
			}
			{
				p.SetState(564)
				p.Identifier()
			}


		}
		p.SetState(569)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 57, p.GetParserRuleContext())
	}



	return localctx
}


// IMappingKeyContext is an interface to support dynamic dispatch.
type IMappingKeyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMappingKeyContext differentiates from other interfaces.
	IsMappingKeyContext()
}

type MappingKeyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMappingKeyContext() *MappingKeyContext {
	var p = new(MappingKeyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_mappingKey
	return p
}

func (*MappingKeyContext) IsMappingKeyContext() {}

func NewMappingKeyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MappingKeyContext {
	var p = new(MappingKeyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_mappingKey

	return p
}

func (s *MappingKeyContext) GetParser() antlr.Parser { return s.parser }

func (s *MappingKeyContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *MappingKeyContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *MappingKeyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MappingKeyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) MappingKey() (localctx IMappingKeyContext) {
	this := p
	_ = this

	localctx = NewMappingKeyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, SolidityParserRULE_mappingKey)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(572)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__35, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(570)
			p.ElementaryTypeName()
		}


	case SolidityParserT__13, SolidityParserT__24, SolidityParserT__41, SolidityParserT__53, SolidityParserT__95, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(571)
			p.UserDefinedTypeName()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IMappingContext is an interface to support dynamic dispatch.
type IMappingContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsMappingContext differentiates from other interfaces.
	IsMappingContext()
}

type MappingContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMappingContext() *MappingContext {
	var p = new(MappingContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_mapping
	return p
}

func (*MappingContext) IsMappingContext() {}

func NewMappingContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MappingContext {
	var p = new(MappingContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_mapping

	return p
}

func (s *MappingContext) GetParser() antlr.Parser { return s.parser }

func (s *MappingContext) MappingKey() IMappingKeyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IMappingKeyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IMappingKeyContext)
}

func (s *MappingContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *MappingContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MappingContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) Mapping() (localctx IMappingContext) {
	this := p
	_ = this

	localctx = NewMappingContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, SolidityParserRULE_mapping)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(574)
		p.Match(SolidityParserT__37)
	}
	{
		p.SetState(575)
		p.Match(SolidityParserT__22)
	}
	{
		p.SetState(576)
		p.MappingKey()
	}
	{
		p.SetState(577)
		p.Match(SolidityParserT__38)
	}
	{
		p.SetState(578)
		p.typeName(0)
	}
	{
		p.SetState(579)
		p.Match(SolidityParserT__23)
	}



	return localctx
}


// IFunctionTypeNameContext is an interface to support dynamic dispatch.
type IFunctionTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionTypeNameContext differentiates from other interfaces.
	IsFunctionTypeNameContext()
}

type FunctionTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionTypeNameContext() *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionTypeName
	return p
}

func (*FunctionTypeNameContext) IsFunctionTypeNameContext() {}

func NewFunctionTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionTypeNameContext {
	var p = new(FunctionTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionTypeName

	return p
}

func (s *FunctionTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionTypeNameContext) AllFunctionTypeParameterList() []IFunctionTypeParameterListContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IFunctionTypeParameterListContext)(nil)).Elem())
	var tst = make([]IFunctionTypeParameterListContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IFunctionTypeParameterListContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) FunctionTypeParameterList(i int) IFunctionTypeParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionTypeParameterListContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IFunctionTypeParameterListContext)
}

func (s *FunctionTypeNameContext) AllInternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserInternalKeyword)
}

func (s *FunctionTypeNameContext) InternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserInternalKeyword, i)
}

func (s *FunctionTypeNameContext) AllExternalKeyword() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserExternalKeyword)
}

func (s *FunctionTypeNameContext) ExternalKeyword(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserExternalKeyword, i)
}

func (s *FunctionTypeNameContext) AllStateMutability() []IStateMutabilityContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem())
	var tst = make([]IStateMutabilityContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStateMutabilityContext)
		}
	}

	return tst
}

func (s *FunctionTypeNameContext) StateMutability(i int) IStateMutabilityContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStateMutabilityContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStateMutabilityContext)
}

func (s *FunctionTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FunctionTypeName() (localctx IFunctionTypeNameContext) {
	this := p
	_ = this

	localctx = NewFunctionTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, SolidityParserRULE_functionTypeName)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(581)
		p.Match(SolidityParserT__29)
	}
	{
		p.SetState(582)
		p.FunctionTypeParameterList()
	}
	p.SetState(588)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(586)
			p.GetErrorHandler().Sync(p)

			switch p.GetTokenStream().LA(1) {
			case SolidityParserInternalKeyword:
				{
					p.SetState(583)
					p.Match(SolidityParserInternalKeyword)
				}


			case SolidityParserExternalKeyword:
				{
					p.SetState(584)
					p.Match(SolidityParserExternalKeyword)
				}


			case SolidityParserConstantKeyword, SolidityParserPayableKeyword, SolidityParserPureKeyword, SolidityParserViewKeyword:
				{
					p.SetState(585)
					p.StateMutability()
				}



			default:
				panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
			}

		}
		p.SetState(590)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 60, p.GetParserRuleContext())
	}
	p.SetState(593)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 61, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(591)
			p.Match(SolidityParserT__30)
		}
		{
			p.SetState(592)
			p.FunctionTypeParameterList()
		}


	}



	return localctx
}


// IStorageLocationContext is an interface to support dynamic dispatch.
type IStorageLocationContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStorageLocationContext differentiates from other interfaces.
	IsStorageLocationContext()
}

type StorageLocationContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStorageLocationContext() *StorageLocationContext {
	var p = new(StorageLocationContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_storageLocation
	return p
}

func (*StorageLocationContext) IsStorageLocationContext() {}

func NewStorageLocationContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StorageLocationContext {
	var p = new(StorageLocationContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_storageLocation

	return p
}

func (s *StorageLocationContext) GetParser() antlr.Parser { return s.parser }
func (s *StorageLocationContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StorageLocationContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) StorageLocation() (localctx IStorageLocationContext) {
	this := p
	_ = this

	localctx = NewStorageLocationContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, SolidityParserRULE_storageLocation)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(595)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 40)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 40))) & ((1 << (SolidityParserT__39 - 40)) | (1 << (SolidityParserT__40 - 40)) | (1 << (SolidityParserT__41 - 40)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IStateMutabilityContext is an interface to support dynamic dispatch.
type IStateMutabilityContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStateMutabilityContext differentiates from other interfaces.
	IsStateMutabilityContext()
}

type StateMutabilityContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStateMutabilityContext() *StateMutabilityContext {
	var p = new(StateMutabilityContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stateMutability
	return p
}

func (*StateMutabilityContext) IsStateMutabilityContext() {}

func NewStateMutabilityContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StateMutabilityContext {
	var p = new(StateMutabilityContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stateMutability

	return p
}

func (s *StateMutabilityContext) GetParser() antlr.Parser { return s.parser }

func (s *StateMutabilityContext) PureKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPureKeyword, 0)
}

func (s *StateMutabilityContext) ConstantKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstantKeyword, 0)
}

func (s *StateMutabilityContext) ViewKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserViewKeyword, 0)
}

func (s *StateMutabilityContext) PayableKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayableKeyword, 0)
}

func (s *StateMutabilityContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StateMutabilityContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) StateMutability() (localctx IStateMutabilityContext) {
	this := p
	_ = this

	localctx = NewStateMutabilityContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, SolidityParserRULE_stateMutability)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(597)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 111)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 111))) & ((1 << (SolidityParserConstantKeyword - 111)) | (1 << (SolidityParserPayableKeyword - 111)) | (1 << (SolidityParserPureKeyword - 111)) | (1 << (SolidityParserViewKeyword - 111)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_block
	return p
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *BlockContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) Block() (localctx IBlockContext) {
	this := p
	_ = this

	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, SolidityParserRULE_block)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(599)
		p.Match(SolidityParserT__14)
	}
	p.SetState(603)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__14) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24) | (1 << SolidityParserT__26) | (1 << SolidityParserT__29))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__37 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__42 - 34)) | (1 << (SolidityParserT__44 - 34)) | (1 << (SolidityParserT__46 - 34)) | (1 << (SolidityParserT__47 - 34)) | (1 << (SolidityParserT__48 - 34)) | (1 << (SolidityParserT__49 - 34)) | (1 << (SolidityParserT__50 - 34)) | (1 << (SolidityParserT__51 - 34)) | (1 << (SolidityParserT__52 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserBreakKeyword - 98)) | (1 << (SolidityParserContinueKeyword - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
		{
			p.SetState(600)
			p.Statement()
		}


		p.SetState(605)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(606)
		p.Match(SolidityParserT__16)
	}



	return localctx
}


// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_statement
	return p
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIfStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) TryStatement() ITryStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITryStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITryStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IForStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *StatementContext) InlineAssemblyStatement() IInlineAssemblyStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IInlineAssemblyStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IInlineAssemblyStatementContext)
}

func (s *StatementContext) DoWhileStatement() IDoWhileStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IDoWhileStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IDoWhileStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IContinueStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBreakStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) ThrowStatement() IThrowStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IThrowStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IThrowStatementContext)
}

func (s *StatementContext) EmitStatement() IEmitStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IEmitStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IEmitStatementContext)
}

func (s *StatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *StatementContext) UncheckedStatement() IUncheckedStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUncheckedStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUncheckedStatementContext)
}

func (s *StatementContext) RevertStatement() IRevertStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IRevertStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IRevertStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) Statement() (localctx IStatementContext) {
	this := p
	_ = this

	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, SolidityParserRULE_statement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(623)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 63, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(608)
			p.IfStatement()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(609)
			p.TryStatement()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(610)
			p.WhileStatement()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(611)
			p.ForStatement()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(612)
			p.Block()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(613)
			p.InlineAssemblyStatement()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(614)
			p.DoWhileStatement()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(615)
			p.ContinueStatement()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(616)
			p.BreakStatement()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(617)
			p.ReturnStatement()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(618)
			p.ThrowStatement()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(619)
			p.EmitStatement()
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(620)
			p.SimpleStatement()
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(621)
			p.UncheckedStatement()
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(622)
			p.RevertStatement()
		}

	}


	return localctx
}


// IExpressionStatementContext is an interface to support dynamic dispatch.
type IExpressionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionStatementContext differentiates from other interfaces.
	IsExpressionStatementContext()
}

type ExpressionStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionStatementContext() *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expressionStatement
	return p
}

func (*ExpressionStatementContext) IsExpressionStatementContext() {}

func NewExpressionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionStatementContext {
	var p = new(ExpressionStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expressionStatement

	return p
}

func (s *ExpressionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ExpressionStatement() (localctx IExpressionStatementContext) {
	this := p
	_ = this

	localctx = NewExpressionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, SolidityParserRULE_expressionStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(625)
		p.expression(0)
	}
	{
		p.SetState(626)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_ifStatement
	return p
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *IfStatementContext) AllStatement() []IStatementContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IStatementContext)(nil)).Elem())
	var tst = make([]IStatementContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IStatementContext)
		}
	}

	return tst
}

func (s *IfStatementContext) Statement(i int) IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) IfStatement() (localctx IIfStatementContext) {
	this := p
	_ = this

	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, SolidityParserRULE_ifStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(628)
		p.Match(SolidityParserT__42)
	}
	{
		p.SetState(629)
		p.Match(SolidityParserT__22)
	}
	{
		p.SetState(630)
		p.expression(0)
	}
	{
		p.SetState(631)
		p.Match(SolidityParserT__23)
	}
	{
		p.SetState(632)
		p.Statement()
	}
	p.SetState(635)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 64, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(633)
			p.Match(SolidityParserT__43)
		}
		{
			p.SetState(634)
			p.Statement()
		}


	}



	return localctx
}


// ITryStatementContext is an interface to support dynamic dispatch.
type ITryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTryStatementContext differentiates from other interfaces.
	IsTryStatementContext()
}

type TryStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatementContext() *TryStatementContext {
	var p = new(TryStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_tryStatement
	return p
}

func (*TryStatementContext) IsTryStatementContext() {}

func NewTryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatementContext {
	var p = new(TryStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_tryStatement

	return p
}

func (s *TryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TryStatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStatementContext) ReturnParameters() IReturnParametersContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IReturnParametersContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IReturnParametersContext)
}

func (s *TryStatementContext) AllCatchClause() []ICatchClauseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*ICatchClauseContext)(nil)).Elem())
	var tst = make([]ICatchClauseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(ICatchClauseContext)
		}
	}

	return tst
}

func (s *TryStatementContext) CatchClause(i int) ICatchClauseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ICatchClauseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(ICatchClauseContext)
}

func (s *TryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) TryStatement() (localctx ITryStatementContext) {
	this := p
	_ = this

	localctx = NewTryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, SolidityParserRULE_tryStatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(637)
		p.Match(SolidityParserT__44)
	}
	{
		p.SetState(638)
		p.expression(0)
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__30 {
		{
			p.SetState(639)
			p.ReturnParameters()
		}

	}
	{
		p.SetState(642)
		p.Block()
	}
	p.SetState(644)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for ok := true; ok; ok = _la == SolidityParserT__45 {
		{
			p.SetState(643)
			p.CatchClause()
		}


		p.SetState(646)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// ICatchClauseContext is an interface to support dynamic dispatch.
type ICatchClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsCatchClauseContext differentiates from other interfaces.
	IsCatchClauseContext()
}

type CatchClauseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCatchClauseContext() *CatchClauseContext {
	var p = new(CatchClauseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_catchClause
	return p
}

func (*CatchClauseContext) IsCatchClauseContext() {}

func NewCatchClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CatchClauseContext {
	var p = new(CatchClauseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_catchClause

	return p
}

func (s *CatchClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CatchClauseContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *CatchClauseContext) ParameterList() IParameterListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IParameterListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IParameterListContext)
}

func (s *CatchClauseContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *CatchClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CatchClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) CatchClause() (localctx ICatchClauseContext) {
	this := p
	_ = this

	localctx = NewCatchClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 94, SolidityParserRULE_catchClause)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(648)
		p.Match(SolidityParserT__45)
	}
	p.SetState(653)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		p.SetState(650)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
			{
				p.SetState(649)
				p.Identifier()
			}

		}
		{
			p.SetState(652)
			p.ParameterList()
		}

	}
	{
		p.SetState(655)
		p.Block()
	}



	return localctx
}


// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_whileStatement
	return p
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *WhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) WhileStatement() (localctx IWhileStatementContext) {
	this := p
	_ = this

	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, SolidityParserRULE_whileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(657)
		p.Match(SolidityParserT__46)
	}
	{
		p.SetState(658)
		p.Match(SolidityParserT__22)
	}
	{
		p.SetState(659)
		p.expression(0)
	}
	{
		p.SetState(660)
		p.Match(SolidityParserT__23)
	}
	{
		p.SetState(661)
		p.Statement()
	}



	return localctx
}


// ISimpleStatementContext is an interface to support dynamic dispatch.
type ISimpleStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSimpleStatementContext differentiates from other interfaces.
	IsSimpleStatementContext()
}

type SimpleStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySimpleStatementContext() *SimpleStatementContext {
	var p = new(SimpleStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_simpleStatement
	return p
}

func (*SimpleStatementContext) IsSimpleStatementContext() {}

func NewSimpleStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SimpleStatementContext {
	var p = new(SimpleStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_simpleStatement

	return p
}

func (s *SimpleStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SimpleStatementContext) VariableDeclarationStatement() IVariableDeclarationStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationStatementContext)
}

func (s *SimpleStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *SimpleStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SimpleStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) SimpleStatement() (localctx ISimpleStatementContext) {
	this := p
	_ = this

	localctx = NewSimpleStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, SolidityParserRULE_simpleStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(665)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 69, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(663)
			p.VariableDeclarationStatement()
		}


	case 2:
		{
			p.SetState(664)
			p.ExpressionStatement()
		}

	}



	return localctx
}


// IUncheckedStatementContext is an interface to support dynamic dispatch.
type IUncheckedStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsUncheckedStatementContext differentiates from other interfaces.
	IsUncheckedStatementContext()
}

type UncheckedStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyUncheckedStatementContext() *UncheckedStatementContext {
	var p = new(UncheckedStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_uncheckedStatement
	return p
}

func (*UncheckedStatementContext) IsUncheckedStatementContext() {}

func NewUncheckedStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *UncheckedStatementContext {
	var p = new(UncheckedStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_uncheckedStatement

	return p
}

func (s *UncheckedStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *UncheckedStatementContext) Block() IBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *UncheckedStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *UncheckedStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) UncheckedStatement() (localctx IUncheckedStatementContext) {
	this := p
	_ = this

	localctx = NewUncheckedStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, SolidityParserRULE_uncheckedStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(667)
		p.Match(SolidityParserT__47)
	}
	{
		p.SetState(668)
		p.Block()
	}



	return localctx
}


// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_forStatement
	return p
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *ForStatementContext) SimpleStatement() ISimpleStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISimpleStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISimpleStatementContext)
}

func (s *ForStatementContext) ExpressionStatement() IExpressionStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionStatementContext)
}

func (s *ForStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ForStatement() (localctx IForStatementContext) {
	this := p
	_ = this

	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 102, SolidityParserRULE_forStatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(670)
		p.Match(SolidityParserT__26)
	}
	{
		p.SetState(671)
		p.Match(SolidityParserT__22)
	}
	p.SetState(674)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__4, SolidityParserT__13, SolidityParserT__22, SolidityParserT__24, SolidityParserT__29, SolidityParserT__33, SolidityParserT__35, SolidityParserT__37, SolidityParserT__41, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__58, SolidityParserT__59, SolidityParserT__60, SolidityParserT__62, SolidityParserT__63, SolidityParserT__64, SolidityParserT__65, SolidityParserT__66, SolidityParserT__95, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteralFragment, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserTypeKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier, SolidityParserStringLiteralFragment:
		{
			p.SetState(672)
			p.SimpleStatement()
		}


	case SolidityParserT__1:
		{
			p.SetState(673)
			p.Match(SolidityParserT__1)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(678)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__4, SolidityParserT__13, SolidityParserT__22, SolidityParserT__24, SolidityParserT__33, SolidityParserT__35, SolidityParserT__41, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__58, SolidityParserT__59, SolidityParserT__60, SolidityParserT__62, SolidityParserT__63, SolidityParserT__64, SolidityParserT__65, SolidityParserT__66, SolidityParserT__95, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteralFragment, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserTypeKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier, SolidityParserStringLiteralFragment:
		{
			p.SetState(676)
			p.ExpressionStatement()
		}


	case SolidityParserT__1:
		{
			p.SetState(677)
			p.Match(SolidityParserT__1)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
		{
			p.SetState(680)
			p.expression(0)
		}

	}
	{
		p.SetState(683)
		p.Match(SolidityParserT__23)
	}
	{
		p.SetState(684)
		p.Statement()
	}



	return localctx
}


// IInlineAssemblyStatementContext is an interface to support dynamic dispatch.
type IInlineAssemblyStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsInlineAssemblyStatementContext differentiates from other interfaces.
	IsInlineAssemblyStatementContext()
}

type InlineAssemblyStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInlineAssemblyStatementContext() *InlineAssemblyStatementContext {
	var p = new(InlineAssemblyStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_inlineAssemblyStatement
	return p
}

func (*InlineAssemblyStatementContext) IsInlineAssemblyStatementContext() {}

func NewInlineAssemblyStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InlineAssemblyStatementContext {
	var p = new(InlineAssemblyStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_inlineAssemblyStatement

	return p
}

func (s *InlineAssemblyStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *InlineAssemblyStatementContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *InlineAssemblyStatementContext) StringLiteralFragment() antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteralFragment, 0)
}

func (s *InlineAssemblyStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InlineAssemblyStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) InlineAssemblyStatement() (localctx IInlineAssemblyStatementContext) {
	this := p
	_ = this

	localctx = NewInlineAssemblyStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, SolidityParserRULE_inlineAssemblyStatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(686)
		p.Match(SolidityParserT__48)
	}
	p.SetState(688)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserStringLiteralFragment {
		{
			p.SetState(687)
			p.Match(SolidityParserStringLiteralFragment)
		}

	}
	{
		p.SetState(690)
		p.AssemblyBlock()
	}



	return localctx
}


// IDoWhileStatementContext is an interface to support dynamic dispatch.
type IDoWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsDoWhileStatementContext differentiates from other interfaces.
	IsDoWhileStatementContext()
}

type DoWhileStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyDoWhileStatementContext() *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_doWhileStatement
	return p
}

func (*DoWhileStatementContext) IsDoWhileStatementContext() {}

func NewDoWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *DoWhileStatementContext {
	var p = new(DoWhileStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_doWhileStatement

	return p
}

func (s *DoWhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *DoWhileStatementContext) Statement() IStatementContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStatementContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *DoWhileStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *DoWhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *DoWhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) DoWhileStatement() (localctx IDoWhileStatementContext) {
	this := p
	_ = this

	localctx = NewDoWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, SolidityParserRULE_doWhileStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(692)
		p.Match(SolidityParserT__49)
	}
	{
		p.SetState(693)
		p.Statement()
	}
	{
		p.SetState(694)
		p.Match(SolidityParserT__46)
	}
	{
		p.SetState(695)
		p.Match(SolidityParserT__22)
	}
	{
		p.SetState(696)
		p.expression(0)
	}
	{
		p.SetState(697)
		p.Match(SolidityParserT__23)
	}
	{
		p.SetState(698)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_continueStatement
	return p
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) ContinueKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserContinueKeyword, 0)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ContinueStatement() (localctx IContinueStatementContext) {
	this := p
	_ = this

	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, SolidityParserRULE_continueStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(700)
		p.Match(SolidityParserContinueKeyword)
	}
	{
		p.SetState(701)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_breakStatement
	return p
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) BreakKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserBreakKeyword, 0)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) BreakStatement() (localctx IBreakStatementContext) {
	this := p
	_ = this

	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, SolidityParserRULE_breakStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(703)
		p.Match(SolidityParserBreakKeyword)
	}
	{
		p.SetState(704)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_returnStatement
	return p
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ReturnStatement() (localctx IReturnStatementContext) {
	this := p
	_ = this

	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, SolidityParserRULE_returnStatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(706)
		p.Match(SolidityParserT__50)
	}
	p.SetState(708)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
		{
			p.SetState(707)
			p.expression(0)
		}

	}
	{
		p.SetState(710)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IThrowStatementContext is an interface to support dynamic dispatch.
type IThrowStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsThrowStatementContext differentiates from other interfaces.
	IsThrowStatementContext()
}

type ThrowStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyThrowStatementContext() *ThrowStatementContext {
	var p = new(ThrowStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_throwStatement
	return p
}

func (*ThrowStatementContext) IsThrowStatementContext() {}

func NewThrowStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ThrowStatementContext {
	var p = new(ThrowStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_throwStatement

	return p
}

func (s *ThrowStatementContext) GetParser() antlr.Parser { return s.parser }
func (s *ThrowStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ThrowStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ThrowStatement() (localctx IThrowStatementContext) {
	this := p
	_ = this

	localctx = NewThrowStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, SolidityParserRULE_throwStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(712)
		p.Match(SolidityParserT__51)
	}
	{
		p.SetState(713)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IEmitStatementContext is an interface to support dynamic dispatch.
type IEmitStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsEmitStatementContext differentiates from other interfaces.
	IsEmitStatementContext()
}

type EmitStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEmitStatementContext() *EmitStatementContext {
	var p = new(EmitStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_emitStatement
	return p
}

func (*EmitStatementContext) IsEmitStatementContext() {}

func NewEmitStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EmitStatementContext {
	var p = new(EmitStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_emitStatement

	return p
}

func (s *EmitStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *EmitStatementContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *EmitStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EmitStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) EmitStatement() (localctx IEmitStatementContext) {
	this := p
	_ = this

	localctx = NewEmitStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, SolidityParserRULE_emitStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(715)
		p.Match(SolidityParserT__52)
	}
	{
		p.SetState(716)
		p.FunctionCall()
	}
	{
		p.SetState(717)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IRevertStatementContext is an interface to support dynamic dispatch.
type IRevertStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsRevertStatementContext differentiates from other interfaces.
	IsRevertStatementContext()
}

type RevertStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRevertStatementContext() *RevertStatementContext {
	var p = new(RevertStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_revertStatement
	return p
}

func (*RevertStatementContext) IsRevertStatementContext() {}

func NewRevertStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RevertStatementContext {
	var p = new(RevertStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_revertStatement

	return p
}

func (s *RevertStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RevertStatementContext) FunctionCall() IFunctionCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallContext)
}

func (s *RevertStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RevertStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) RevertStatement() (localctx IRevertStatementContext) {
	this := p
	_ = this

	localctx = NewRevertStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, SolidityParserRULE_revertStatement)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(719)
		p.Match(SolidityParserT__53)
	}
	{
		p.SetState(720)
		p.FunctionCall()
	}
	{
		p.SetState(721)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IVariableDeclarationStatementContext is an interface to support dynamic dispatch.
type IVariableDeclarationStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationStatementContext differentiates from other interfaces.
	IsVariableDeclarationStatementContext()
}

type VariableDeclarationStatementContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationStatementContext() *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement
	return p
}

func (*VariableDeclarationStatementContext) IsVariableDeclarationStatementContext() {}

func NewVariableDeclarationStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationStatementContext {
	var p = new(VariableDeclarationStatementContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationStatement

	return p
}

func (s *VariableDeclarationStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationStatementContext) IdentifierList() IIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierListContext)
}

func (s *VariableDeclarationStatementContext) VariableDeclaration() IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationStatementContext) VariableDeclarationList() IVariableDeclarationListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationListContext)
}

func (s *VariableDeclarationStatementContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *VariableDeclarationStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) VariableDeclarationStatement() (localctx IVariableDeclarationStatementContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, SolidityParserRULE_variableDeclarationStatement)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(730)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 75, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(723)
			p.Match(SolidityParserT__54)
		}
		{
			p.SetState(724)
			p.IdentifierList()
		}


	case 2:
		{
			p.SetState(725)
			p.VariableDeclaration()
		}


	case 3:
		{
			p.SetState(726)
			p.Match(SolidityParserT__22)
		}
		{
			p.SetState(727)
			p.VariableDeclarationList()
		}
		{
			p.SetState(728)
			p.Match(SolidityParserT__23)
		}

	}
	p.SetState(734)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__9 {
		{
			p.SetState(732)
			p.Match(SolidityParserT__9)
		}
		{
			p.SetState(733)
			p.expression(0)
		}

	}
	{
		p.SetState(736)
		p.Match(SolidityParserT__1)
	}



	return localctx
}


// IVariableDeclarationListContext is an interface to support dynamic dispatch.
type IVariableDeclarationListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsVariableDeclarationListContext differentiates from other interfaces.
	IsVariableDeclarationListContext()
}

type VariableDeclarationListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVariableDeclarationListContext() *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_variableDeclarationList
	return p
}

func (*VariableDeclarationListContext) IsVariableDeclarationListContext() {}

func NewVariableDeclarationListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VariableDeclarationListContext {
	var p = new(VariableDeclarationListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_variableDeclarationList

	return p
}

func (s *VariableDeclarationListContext) GetParser() antlr.Parser { return s.parser }

func (s *VariableDeclarationListContext) AllVariableDeclaration() []IVariableDeclarationContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem())
	var tst = make([]IVariableDeclarationContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IVariableDeclarationContext)
		}
	}

	return tst
}

func (s *VariableDeclarationListContext) VariableDeclaration(i int) IVariableDeclarationContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IVariableDeclarationContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IVariableDeclarationContext)
}

func (s *VariableDeclarationListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VariableDeclarationListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) VariableDeclarationList() (localctx IVariableDeclarationListContext) {
	this := p
	_ = this

	localctx = NewVariableDeclarationListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, SolidityParserRULE_variableDeclarationList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(739)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__37 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(738)
			p.VariableDeclaration()
		}

	}
	p.SetState(747)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SolidityParserT__15 {
		{
			p.SetState(741)
			p.Match(SolidityParserT__15)
		}
		p.SetState(743)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__24) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__37 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserInt - 96)) | (1 << (SolidityParserUint - 96)) | (1 << (SolidityParserByte - 96)) | (1 << (SolidityParserFixed - 96)) | (1 << (SolidityParserUfixed - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
			{
				p.SetState(742)
				p.VariableDeclaration()
			}

		}


		p.SetState(749)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IIdentifierListContext is an interface to support dynamic dispatch.
type IIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierListContext differentiates from other interfaces.
	IsIdentifierListContext()
}

type IdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierListContext() *IdentifierListContext {
	var p = new(IdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifierList
	return p
}

func (*IdentifierListContext) IsIdentifierListContext() {}

func NewIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierListContext {
	var p = new(IdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifierList

	return p
}

func (s *IdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *IdentifierListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *IdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) IdentifierList() (localctx IIdentifierListContext) {
	this := p
	_ = this

	localctx = NewIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, SolidityParserRULE_identifierList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(750)
		p.Match(SolidityParserT__22)
	}
	p.SetState(757)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			p.SetState(752)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
				{
					p.SetState(751)
					p.Identifier()
				}

			}
			{
				p.SetState(754)
				p.Match(SolidityParserT__15)
			}


		}
		p.SetState(759)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 81, p.GetParserRuleContext())
	}
	p.SetState(761)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(760)
			p.Identifier()
		}

	}
	{
		p.SetState(763)
		p.Match(SolidityParserT__23)
	}



	return localctx
}


// IElementaryTypeNameContext is an interface to support dynamic dispatch.
type IElementaryTypeNameContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsElementaryTypeNameContext differentiates from other interfaces.
	IsElementaryTypeNameContext()
}

type ElementaryTypeNameContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyElementaryTypeNameContext() *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_elementaryTypeName
	return p
}

func (*ElementaryTypeNameContext) IsElementaryTypeNameContext() {}

func NewElementaryTypeNameContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ElementaryTypeNameContext {
	var p = new(ElementaryTypeNameContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_elementaryTypeName

	return p
}

func (s *ElementaryTypeNameContext) GetParser() antlr.Parser { return s.parser }

func (s *ElementaryTypeNameContext) Int() antlr.TerminalNode {
	return s.GetToken(SolidityParserInt, 0)
}

func (s *ElementaryTypeNameContext) Uint() antlr.TerminalNode {
	return s.GetToken(SolidityParserUint, 0)
}

func (s *ElementaryTypeNameContext) Byte() antlr.TerminalNode {
	return s.GetToken(SolidityParserByte, 0)
}

func (s *ElementaryTypeNameContext) Fixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserFixed, 0)
}

func (s *ElementaryTypeNameContext) Ufixed() antlr.TerminalNode {
	return s.GetToken(SolidityParserUfixed, 0)
}

func (s *ElementaryTypeNameContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ElementaryTypeNameContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ElementaryTypeName() (localctx IElementaryTypeNameContext) {
	this := p
	_ = this

	localctx = NewElementaryTypeNameContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, SolidityParserRULE_elementaryTypeName)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(765)
		_la = p.GetTokenStream().LA(1)

		if !(((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__54 - 36)) | (1 << (SolidityParserT__55 - 36)) | (1 << (SolidityParserT__56 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)))) != 0)) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IExpressionContext is an interface to support dynamic dispatch.
type IExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionContext differentiates from other interfaces.
	IsExpressionContext()
}

type ExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionContext() *ExpressionContext {
	var p = new(ExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expression
	return p
}

func (*ExpressionContext) IsExpressionContext() {}

func NewExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionContext {
	var p = new(ExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expression

	return p
}

func (s *ExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionContext) TypeName() ITypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameContext)
}

func (s *ExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionContext) PrimaryExpression() IPrimaryExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IPrimaryExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IPrimaryExpressionContext)
}

func (s *ExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExpressionContext) NameValueList() INameValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameValueListContext)
}

func (s *ExpressionContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *ExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}





func (p *SolidityParser) Expression() (localctx IExpressionContext) {
	return p.expression(0)
}

func (p *SolidityParser) expression(_p int) (localctx IExpressionContext) {
	this := p
	_ = this

	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()
	_parentState := p.GetState()
	localctx = NewExpressionContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExpressionContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 128
	p.EnterRecursionRule(localctx, 128, SolidityParserRULE_expression, _p)
	var _la int


	defer func() {
		p.UnrollRecursionContexts(_parentctx)
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(785)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 83, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(768)
			p.Match(SolidityParserT__60)
		}
		{
			p.SetState(769)
			p.typeName(0)
		}


	case 2:
		{
			p.SetState(770)
			p.Match(SolidityParserT__22)
		}
		{
			p.SetState(771)
			p.expression(0)
		}
		{
			p.SetState(772)
			p.Match(SolidityParserT__23)
		}


	case 3:
		{
			p.SetState(774)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__58 || _la == SolidityParserT__59) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(775)
			p.expression(19)
		}


	case 4:
		{
			p.SetState(776)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__62 || _la == SolidityParserT__63) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(777)
			p.expression(18)
		}


	case 5:
		{
			p.SetState(778)
			_la = p.GetTokenStream().LA(1)

			if !(_la == SolidityParserT__64 || _la == SolidityParserT__65) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(779)
			p.expression(17)
		}


	case 6:
		{
			p.SetState(780)
			p.Match(SolidityParserT__66)
		}
		{
			p.SetState(781)
			p.expression(16)
		}


	case 7:
		{
			p.SetState(782)
			p.Match(SolidityParserT__4)
		}
		{
			p.SetState(783)
			p.expression(15)
		}


	case 8:
		{
			p.SetState(784)
			p.PrimaryExpression()
		}

	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(861)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(859)
			p.GetErrorHandler().Sync(p)
			switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 86, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(787)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
				}
				{
					p.SetState(788)
					p.Match(SolidityParserT__67)
				}
				{
					p.SetState(789)
					p.expression(15)
				}


			case 2:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(790)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
				}
				{
					p.SetState(791)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__12 || _la == SolidityParserT__68 || _la == SolidityParserT__69) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(792)
					p.expression(14)
				}


			case 3:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(793)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
				}
				{
					p.SetState(794)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__62 || _la == SolidityParserT__63) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(795)
					p.expression(13)
				}


			case 4:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(796)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
				}
				{
					p.SetState(797)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__70 || _la == SolidityParserT__71) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(798)
					p.expression(12)
				}


			case 5:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(799)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
				}
				{
					p.SetState(800)
					p.Match(SolidityParserT__72)
				}
				{
					p.SetState(801)
					p.expression(11)
				}


			case 6:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(802)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
				}
				{
					p.SetState(803)
					p.Match(SolidityParserT__3)
				}
				{
					p.SetState(804)
					p.expression(10)
				}


			case 7:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(805)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
				}
				{
					p.SetState(806)
					p.Match(SolidityParserT__73)
				}
				{
					p.SetState(807)
					p.expression(9)
				}


			case 8:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(808)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
				}
				{
					p.SetState(809)
					_la = p.GetTokenStream().LA(1)

					if !((((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__5) | (1 << SolidityParserT__6) | (1 << SolidityParserT__7) | (1 << SolidityParserT__8))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(810)
					p.expression(8)
				}


			case 9:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(811)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
				}
				{
					p.SetState(812)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__74 || _la == SolidityParserT__75) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(813)
					p.expression(7)
				}


			case 10:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(814)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				}
				{
					p.SetState(815)
					p.Match(SolidityParserT__76)
				}
				{
					p.SetState(816)
					p.expression(6)
				}


			case 11:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(817)

				if !(p.Precpred(p.GetParserRuleContext(), 4)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 4)", ""))
				}
				{
					p.SetState(818)
					p.Match(SolidityParserT__2)
				}
				{
					p.SetState(819)
					p.expression(5)
				}


			case 12:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(820)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
				}
				{
					p.SetState(821)
					p.Match(SolidityParserT__77)
				}
				{
					p.SetState(822)
					p.expression(0)
				}
				{
					p.SetState(823)
					p.Match(SolidityParserT__61)
				}
				{
					p.SetState(824)
					p.expression(4)
				}


			case 13:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(826)

				if !(p.Precpred(p.GetParserRuleContext(), 2)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 2)", ""))
				}
				{
					p.SetState(827)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__9 || ((((_la - 79)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 79))) & ((1 << (SolidityParserT__78 - 79)) | (1 << (SolidityParserT__79 - 79)) | (1 << (SolidityParserT__80 - 79)) | (1 << (SolidityParserT__81 - 79)) | (1 << (SolidityParserT__82 - 79)) | (1 << (SolidityParserT__83 - 79)) | (1 << (SolidityParserT__84 - 79)) | (1 << (SolidityParserT__85 - 79)) | (1 << (SolidityParserT__86 - 79)) | (1 << (SolidityParserT__87 - 79)))) != 0)) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(828)
					p.expression(3)
				}


			case 14:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(829)

				if !(p.Precpred(p.GetParserRuleContext(), 27)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 27)", ""))
				}
				{
					p.SetState(830)
					_la = p.GetTokenStream().LA(1)

					if !(_la == SolidityParserT__58 || _la == SolidityParserT__59) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}


			case 15:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(831)

				if !(p.Precpred(p.GetParserRuleContext(), 25)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 25)", ""))
				}
				{
					p.SetState(832)
					p.Match(SolidityParserT__33)
				}
				{
					p.SetState(833)
					p.expression(0)
				}
				{
					p.SetState(834)
					p.Match(SolidityParserT__34)
				}


			case 16:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(836)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
				}
				{
					p.SetState(837)
					p.Match(SolidityParserT__33)
				}
				p.SetState(839)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
					{
						p.SetState(838)
						p.expression(0)
					}

				}
				{
					p.SetState(841)
					p.Match(SolidityParserT__61)
				}
				p.SetState(843)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)


				if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
					{
						p.SetState(842)
						p.expression(0)
					}

				}
				{
					p.SetState(845)
					p.Match(SolidityParserT__34)
				}


			case 17:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(846)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
				}
				{
					p.SetState(847)
					p.Match(SolidityParserT__36)
				}
				{
					p.SetState(848)
					p.Identifier()
				}


			case 18:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(849)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
				}
				{
					p.SetState(850)
					p.Match(SolidityParserT__14)
				}
				{
					p.SetState(851)
					p.NameValueList()
				}
				{
					p.SetState(852)
					p.Match(SolidityParserT__16)
				}


			case 19:
				localctx = NewExpressionContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, SolidityParserRULE_expression)
				p.SetState(854)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					panic(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
				}
				{
					p.SetState(855)
					p.Match(SolidityParserT__22)
				}
				{
					p.SetState(856)
					p.FunctionCallArguments()
				}
				{
					p.SetState(857)
					p.Match(SolidityParserT__23)
				}

			}

		}
		p.SetState(863)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 87, p.GetParserRuleContext())
	}



	return localctx
}


// IPrimaryExpressionContext is an interface to support dynamic dispatch.
type IPrimaryExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsPrimaryExpressionContext differentiates from other interfaces.
	IsPrimaryExpressionContext()
}

type PrimaryExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryExpressionContext() *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_primaryExpression
	return p
}

func (*PrimaryExpressionContext) IsPrimaryExpressionContext() {}

func NewPrimaryExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryExpressionContext {
	var p = new(PrimaryExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_primaryExpression

	return p
}

func (s *PrimaryExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryExpressionContext) BooleanLiteral() antlr.TerminalNode {
	return s.GetToken(SolidityParserBooleanLiteral, 0)
}

func (s *PrimaryExpressionContext) NumberLiteral() INumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *PrimaryExpressionContext) HexLiteral() IHexLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexLiteralContext)
}

func (s *PrimaryExpressionContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *PrimaryExpressionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrimaryExpressionContext) TypeKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserTypeKeyword, 0)
}

func (s *PrimaryExpressionContext) PayableKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayableKeyword, 0)
}

func (s *PrimaryExpressionContext) TupleExpression() ITupleExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITupleExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITupleExpressionContext)
}

func (s *PrimaryExpressionContext) TypeNameExpression() ITypeNameExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ITypeNameExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ITypeNameExpressionContext)
}

func (s *PrimaryExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) PrimaryExpression() (localctx IPrimaryExpressionContext) {
	this := p
	_ = this

	localctx = NewPrimaryExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, SolidityParserRULE_primaryExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(881)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 90, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(864)
			p.Match(SolidityParserBooleanLiteral)
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(865)
			p.NumberLiteral()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(866)
			p.HexLiteral()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(867)
			p.StringLiteral()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(868)
			p.Identifier()
		}
		p.SetState(871)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 88, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(869)
				p.Match(SolidityParserT__33)
			}
			{
				p.SetState(870)
				p.Match(SolidityParserT__34)
			}


		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(873)
			p.Match(SolidityParserTypeKeyword)
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(874)
			p.Match(SolidityParserPayableKeyword)
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(875)
			p.TupleExpression()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(876)
			p.TypeNameExpression()
		}
		p.SetState(879)
		p.GetErrorHandler().Sync(p)


		if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 89, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(877)
				p.Match(SolidityParserT__33)
			}
			{
				p.SetState(878)
				p.Match(SolidityParserT__34)
			}


		}

	}


	return localctx
}


// IExpressionListContext is an interface to support dynamic dispatch.
type IExpressionListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsExpressionListContext differentiates from other interfaces.
	IsExpressionListContext()
}

type ExpressionListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExpressionListContext() *ExpressionListContext {
	var p = new(ExpressionListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_expressionList
	return p
}

func (*ExpressionListContext) IsExpressionListContext() {}

func NewExpressionListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExpressionListContext {
	var p = new(ExpressionListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_expressionList

	return p
}

func (s *ExpressionListContext) GetParser() antlr.Parser { return s.parser }

func (s *ExpressionListContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *ExpressionListContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *ExpressionListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExpressionListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) ExpressionList() (localctx IExpressionListContext) {
	this := p
	_ = this

	localctx = NewExpressionListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, SolidityParserRULE_expressionList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(883)
		p.expression(0)
	}
	p.SetState(888)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SolidityParserT__15 {
		{
			p.SetState(884)
			p.Match(SolidityParserT__15)
		}
		{
			p.SetState(885)
			p.expression(0)
		}


		p.SetState(890)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// INameValueListContext is an interface to support dynamic dispatch.
type INameValueListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameValueListContext differentiates from other interfaces.
	IsNameValueListContext()
}

type NameValueListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameValueListContext() *NameValueListContext {
	var p = new(NameValueListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_nameValueList
	return p
}

func (*NameValueListContext) IsNameValueListContext() {}

func NewNameValueListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameValueListContext {
	var p = new(NameValueListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_nameValueList

	return p
}

func (s *NameValueListContext) GetParser() antlr.Parser { return s.parser }

func (s *NameValueListContext) AllNameValue() []INameValueContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*INameValueContext)(nil)).Elem())
	var tst = make([]INameValueContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(INameValueContext)
		}
	}

	return tst
}

func (s *NameValueListContext) NameValue(i int) INameValueContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameValueContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(INameValueContext)
}

func (s *NameValueListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameValueListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) NameValueList() (localctx INameValueListContext) {
	this := p
	_ = this

	localctx = NewNameValueListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, SolidityParserRULE_nameValueList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(891)
		p.NameValue()
	}
	p.SetState(896)
	p.GetErrorHandler().Sync(p)
	_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())

	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(892)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(893)
				p.NameValue()
			}


		}
		p.SetState(898)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 92, p.GetParserRuleContext())
	}
	p.SetState(900)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__15 {
		{
			p.SetState(899)
			p.Match(SolidityParserT__15)
		}

	}



	return localctx
}


// INameValueContext is an interface to support dynamic dispatch.
type INameValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNameValueContext differentiates from other interfaces.
	IsNameValueContext()
}

type NameValueContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNameValueContext() *NameValueContext {
	var p = new(NameValueContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_nameValue
	return p
}

func (*NameValueContext) IsNameValueContext() {}

func NewNameValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NameValueContext {
	var p = new(NameValueContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_nameValue

	return p
}

func (s *NameValueContext) GetParser() antlr.Parser { return s.parser }

func (s *NameValueContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *NameValueContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *NameValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NameValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) NameValue() (localctx INameValueContext) {
	this := p
	_ = this

	localctx = NewNameValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 136, SolidityParserRULE_nameValue)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(902)
		p.Identifier()
	}
	{
		p.SetState(903)
		p.Match(SolidityParserT__61)
	}
	{
		p.SetState(904)
		p.expression(0)
	}



	return localctx
}


// IFunctionCallArgumentsContext is an interface to support dynamic dispatch.
type IFunctionCallArgumentsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallArgumentsContext differentiates from other interfaces.
	IsFunctionCallArgumentsContext()
}

type FunctionCallArgumentsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallArgumentsContext() *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionCallArguments
	return p
}

func (*FunctionCallArgumentsContext) IsFunctionCallArgumentsContext() {}

func NewFunctionCallArgumentsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallArgumentsContext {
	var p = new(FunctionCallArgumentsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionCallArguments

	return p
}

func (s *FunctionCallArgumentsContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallArgumentsContext) NameValueList() INameValueListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INameValueListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INameValueListContext)
}

func (s *FunctionCallArgumentsContext) ExpressionList() IExpressionListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionListContext)
}

func (s *FunctionCallArgumentsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallArgumentsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FunctionCallArguments() (localctx IFunctionCallArgumentsContext) {
	this := p
	_ = this

	localctx = NewFunctionCallArgumentsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 138, SolidityParserRULE_functionCallArguments)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(914)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__14:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(906)
			p.Match(SolidityParserT__14)
		}
		p.SetState(908)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
			{
				p.SetState(907)
				p.NameValueList()
			}

		}
		{
			p.SetState(910)
			p.Match(SolidityParserT__16)
		}


	case SolidityParserT__4, SolidityParserT__13, SolidityParserT__22, SolidityParserT__23, SolidityParserT__24, SolidityParserT__33, SolidityParserT__35, SolidityParserT__41, SolidityParserT__53, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserT__58, SolidityParserT__59, SolidityParserT__60, SolidityParserT__62, SolidityParserT__63, SolidityParserT__64, SolidityParserT__65, SolidityParserT__66, SolidityParserT__95, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed, SolidityParserBooleanLiteral, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteralFragment, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserTypeKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier, SolidityParserStringLiteralFragment:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(912)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
			{
				p.SetState(911)
				p.ExpressionList()
			}

		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IFunctionCallContext is an interface to support dynamic dispatch.
type IFunctionCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsFunctionCallContext differentiates from other interfaces.
	IsFunctionCallContext()
}

type FunctionCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionCallContext() *FunctionCallContext {
	var p = new(FunctionCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_functionCall
	return p
}

func (*FunctionCallContext) IsFunctionCallContext() {}

func NewFunctionCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionCallContext {
	var p = new(FunctionCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_functionCall

	return p
}

func (s *FunctionCallContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionCallContext) Expression() IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *FunctionCallContext) FunctionCallArguments() IFunctionCallArgumentsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IFunctionCallArgumentsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IFunctionCallArgumentsContext)
}

func (s *FunctionCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) FunctionCall() (localctx IFunctionCallContext) {
	this := p
	_ = this

	localctx = NewFunctionCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 140, SolidityParserRULE_functionCall)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(916)
		p.expression(0)
	}
	{
		p.SetState(917)
		p.Match(SolidityParserT__22)
	}
	{
		p.SetState(918)
		p.FunctionCallArguments()
	}
	{
		p.SetState(919)
		p.Match(SolidityParserT__23)
	}



	return localctx
}


// IAssemblyBlockContext is an interface to support dynamic dispatch.
type IAssemblyBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyBlockContext differentiates from other interfaces.
	IsAssemblyBlockContext()
}

type AssemblyBlockContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyBlockContext() *AssemblyBlockContext {
	var p = new(AssemblyBlockContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyBlock
	return p
}

func (*AssemblyBlockContext) IsAssemblyBlockContext() {}

func NewAssemblyBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyBlockContext {
	var p = new(AssemblyBlockContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyBlock

	return p
}

func (s *AssemblyBlockContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyBlockContext) AllAssemblyItem() []IAssemblyItemContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyItemContext)(nil)).Elem())
	var tst = make([]IAssemblyItemContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyItemContext)
		}
	}

	return tst
}

func (s *AssemblyBlockContext) AssemblyItem(i int) IAssemblyItemContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyItemContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyItemContext)
}

func (s *AssemblyBlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyBlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyBlock() (localctx IAssemblyBlockContext) {
	this := p
	_ = this

	localctx = NewAssemblyBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 142, SolidityParserRULE_assemblyBlock)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(921)
		p.Match(SolidityParserT__14)
	}
	p.SetState(925)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__13) | (1 << SolidityParserT__14) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24) | (1 << SolidityParserT__26) | (1 << SolidityParserT__29))) != 0) || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__42 - 36)) | (1 << (SolidityParserT__48 - 36)) | (1 << (SolidityParserT__50 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 89)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 89))) & ((1 << (SolidityParserT__88 - 89)) | (1 << (SolidityParserT__90 - 89)) | (1 << (SolidityParserT__91 - 89)) | (1 << (SolidityParserT__95 - 89)) | (1 << (SolidityParserDecimalNumber - 89)) | (1 << (SolidityParserHexNumber - 89)) | (1 << (SolidityParserHexLiteralFragment - 89)) | (1 << (SolidityParserBreakKeyword - 89)) | (1 << (SolidityParserContinueKeyword - 89)) | (1 << (SolidityParserLeaveKeyword - 89)) | (1 << (SolidityParserPayableKeyword - 89)))) != 0) || ((((_la - 125)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 125))) & ((1 << (SolidityParserConstructorKeyword - 125)) | (1 << (SolidityParserReceiveKeyword - 125)) | (1 << (SolidityParserIdentifier - 125)) | (1 << (SolidityParserStringLiteralFragment - 125)))) != 0) {
		{
			p.SetState(922)
			p.AssemblyItem()
		}


		p.SetState(927)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(928)
		p.Match(SolidityParserT__16)
	}



	return localctx
}


// IAssemblyItemContext is an interface to support dynamic dispatch.
type IAssemblyItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyItemContext differentiates from other interfaces.
	IsAssemblyItemContext()
}

type AssemblyItemContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyItemContext() *AssemblyItemContext {
	var p = new(AssemblyItemContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyItem
	return p
}

func (*AssemblyItemContext) IsAssemblyItemContext() {}

func NewAssemblyItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyItemContext {
	var p = new(AssemblyItemContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyItem

	return p
}

func (s *AssemblyItemContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyItemContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyItemContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyItemContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyItemContext) AssemblyLocalDefinition() IAssemblyLocalDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLocalDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLocalDefinitionContext)
}

func (s *AssemblyItemContext) AssemblyAssignment() IAssemblyAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyAssignmentContext)
}

func (s *AssemblyItemContext) AssemblyStackAssignment() IAssemblyStackAssignmentContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyStackAssignmentContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyStackAssignmentContext)
}

func (s *AssemblyItemContext) LabelDefinition() ILabelDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ILabelDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ILabelDefinitionContext)
}

func (s *AssemblyItemContext) AssemblySwitch() IAssemblySwitchContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblySwitchContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblySwitchContext)
}

func (s *AssemblyItemContext) AssemblyFunctionDefinition() IAssemblyFunctionDefinitionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyFunctionDefinitionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyFunctionDefinitionContext)
}

func (s *AssemblyItemContext) AssemblyFor() IAssemblyForContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyForContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyForContext)
}

func (s *AssemblyItemContext) AssemblyIf() IAssemblyIfContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIfContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIfContext)
}

func (s *AssemblyItemContext) BreakKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserBreakKeyword, 0)
}

func (s *AssemblyItemContext) ContinueKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserContinueKeyword, 0)
}

func (s *AssemblyItemContext) LeaveKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserLeaveKeyword, 0)
}

func (s *AssemblyItemContext) SubAssembly() ISubAssemblyContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*ISubAssemblyContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(ISubAssemblyContext)
}

func (s *AssemblyItemContext) NumberLiteral() INumberLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*INumberLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(INumberLiteralContext)
}

func (s *AssemblyItemContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *AssemblyItemContext) HexLiteral() IHexLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexLiteralContext)
}

func (s *AssemblyItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyItem() (localctx IAssemblyItemContext) {
	this := p
	_ = this

	localctx = NewAssemblyItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 144, SolidityParserRULE_assemblyItem)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(948)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 98, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(930)
			p.Identifier()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(931)
			p.AssemblyBlock()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(932)
			p.AssemblyExpression()
		}


	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(933)
			p.AssemblyLocalDefinition()
		}


	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(934)
			p.AssemblyAssignment()
		}


	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(935)
			p.AssemblyStackAssignment()
		}


	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(936)
			p.LabelDefinition()
		}


	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(937)
			p.AssemblySwitch()
		}


	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(938)
			p.AssemblyFunctionDefinition()
		}


	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(939)
			p.AssemblyFor()
		}


	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(940)
			p.AssemblyIf()
		}


	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(941)
			p.Match(SolidityParserBreakKeyword)
		}


	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(942)
			p.Match(SolidityParserContinueKeyword)
		}


	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(943)
			p.Match(SolidityParserLeaveKeyword)
		}


	case 15:
		p.EnterOuterAlt(localctx, 15)
		{
			p.SetState(944)
			p.SubAssembly()
		}


	case 16:
		p.EnterOuterAlt(localctx, 16)
		{
			p.SetState(945)
			p.NumberLiteral()
		}


	case 17:
		p.EnterOuterAlt(localctx, 17)
		{
			p.SetState(946)
			p.StringLiteral()
		}


	case 18:
		p.EnterOuterAlt(localctx, 18)
		{
			p.SetState(947)
			p.HexLiteral()
		}

	}


	return localctx
}


// IAssemblyExpressionContext is an interface to support dynamic dispatch.
type IAssemblyExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyExpressionContext differentiates from other interfaces.
	IsAssemblyExpressionContext()
}

type AssemblyExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyExpressionContext() *AssemblyExpressionContext {
	var p = new(AssemblyExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyExpression
	return p
}

func (*AssemblyExpressionContext) IsAssemblyExpressionContext() {}

func NewAssemblyExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyExpressionContext {
	var p = new(AssemblyExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyExpression

	return p
}

func (s *AssemblyExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyExpressionContext) AssemblyCall() IAssemblyCallContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyCallContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyCallContext)
}

func (s *AssemblyExpressionContext) AssemblyLiteral() IAssemblyLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLiteralContext)
}

func (s *AssemblyExpressionContext) AssemblyMember() IAssemblyMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyMemberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyMemberContext)
}

func (s *AssemblyExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyExpression() (localctx IAssemblyExpressionContext) {
	this := p
	_ = this

	localctx = NewAssemblyExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 146, SolidityParserRULE_assemblyExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(953)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 99, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(950)
			p.AssemblyCall()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(951)
			p.AssemblyLiteral()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(952)
			p.AssemblyMember()
		}

	}


	return localctx
}


// IAssemblyMemberContext is an interface to support dynamic dispatch.
type IAssemblyMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyMemberContext differentiates from other interfaces.
	IsAssemblyMemberContext()
}

type AssemblyMemberContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyMemberContext() *AssemblyMemberContext {
	var p = new(AssemblyMemberContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyMember
	return p
}

func (*AssemblyMemberContext) IsAssemblyMemberContext() {}

func NewAssemblyMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyMemberContext {
	var p = new(AssemblyMemberContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyMember

	return p
}

func (s *AssemblyMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyMemberContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AssemblyMemberContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyMember() (localctx IAssemblyMemberContext) {
	this := p
	_ = this

	localctx = NewAssemblyMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 148, SolidityParserRULE_assemblyMember)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(955)
		p.Identifier()
	}
	{
		p.SetState(956)
		p.Match(SolidityParserT__36)
	}
	{
		p.SetState(957)
		p.Identifier()
	}



	return localctx
}


// IAssemblyCallContext is an interface to support dynamic dispatch.
type IAssemblyCallContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyCallContext differentiates from other interfaces.
	IsAssemblyCallContext()
}

type AssemblyCallContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyCallContext() *AssemblyCallContext {
	var p = new(AssemblyCallContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyCall
	return p
}

func (*AssemblyCallContext) IsAssemblyCallContext() {}

func NewAssemblyCallContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyCallContext {
	var p = new(AssemblyCallContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyCall

	return p
}

func (s *AssemblyCallContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyCallContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyCallContext) AllAssemblyExpression() []IAssemblyExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem())
	var tst = make([]IAssemblyExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyExpressionContext)
		}
	}

	return tst
}

func (s *AssemblyCallContext) AssemblyExpression(i int) IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyCallContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyCallContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyCall() (localctx IAssemblyCallContext) {
	this := p
	_ = this

	localctx = NewAssemblyCallContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 150, SolidityParserRULE_assemblyCall)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	p.SetState(963)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__50:
		{
			p.SetState(959)
			p.Match(SolidityParserT__50)
		}


	case SolidityParserT__35:
		{
			p.SetState(960)
			p.Match(SolidityParserT__35)
		}


	case SolidityParserT__57:
		{
			p.SetState(961)
			p.Match(SolidityParserT__57)
		}


	case SolidityParserT__13, SolidityParserT__24, SolidityParserT__41, SolidityParserT__53, SolidityParserT__95, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier:
		{
			p.SetState(962)
			p.Identifier()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	p.SetState(977)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 103, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(965)
			p.Match(SolidityParserT__22)
		}
		p.SetState(967)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if _la == SolidityParserT__13 || _la == SolidityParserT__24 || ((((_la - 36)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 36))) & ((1 << (SolidityParserT__35 - 36)) | (1 << (SolidityParserT__41 - 36)) | (1 << (SolidityParserT__50 - 36)) | (1 << (SolidityParserT__53 - 36)) | (1 << (SolidityParserT__57 - 36)))) != 0) || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserDecimalNumber - 96)) | (1 << (SolidityParserHexNumber - 96)) | (1 << (SolidityParserHexLiteralFragment - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier || _la == SolidityParserStringLiteralFragment {
			{
				p.SetState(966)
				p.AssemblyExpression()
			}

		}
		p.SetState(973)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(969)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(970)
				p.AssemblyExpression()
			}


			p.SetState(975)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(976)
			p.Match(SolidityParserT__23)
		}


	}



	return localctx
}


// IAssemblyLocalDefinitionContext is an interface to support dynamic dispatch.
type IAssemblyLocalDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyLocalDefinitionContext differentiates from other interfaces.
	IsAssemblyLocalDefinitionContext()
}

type AssemblyLocalDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyLocalDefinitionContext() *AssemblyLocalDefinitionContext {
	var p = new(AssemblyLocalDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyLocalDefinition
	return p
}

func (*AssemblyLocalDefinitionContext) IsAssemblyLocalDefinitionContext() {}

func NewAssemblyLocalDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyLocalDefinitionContext {
	var p = new(AssemblyLocalDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyLocalDefinition

	return p
}

func (s *AssemblyLocalDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyLocalDefinitionContext) AssemblyIdentifierOrList() IAssemblyIdentifierOrListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierOrListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierOrListContext)
}

func (s *AssemblyLocalDefinitionContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyLocalDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyLocalDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyLocalDefinition() (localctx IAssemblyLocalDefinitionContext) {
	this := p
	_ = this

	localctx = NewAssemblyLocalDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 152, SolidityParserRULE_assemblyLocalDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(979)
		p.Match(SolidityParserT__88)
	}
	{
		p.SetState(980)
		p.AssemblyIdentifierOrList()
	}
	p.SetState(983)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__89 {
		{
			p.SetState(981)
			p.Match(SolidityParserT__89)
		}
		{
			p.SetState(982)
			p.AssemblyExpression()
		}

	}



	return localctx
}


// IAssemblyAssignmentContext is an interface to support dynamic dispatch.
type IAssemblyAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyAssignmentContext differentiates from other interfaces.
	IsAssemblyAssignmentContext()
}

type AssemblyAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyAssignmentContext() *AssemblyAssignmentContext {
	var p = new(AssemblyAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyAssignment
	return p
}

func (*AssemblyAssignmentContext) IsAssemblyAssignmentContext() {}

func NewAssemblyAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyAssignmentContext {
	var p = new(AssemblyAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyAssignment

	return p
}

func (s *AssemblyAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyAssignmentContext) AssemblyIdentifierOrList() IAssemblyIdentifierOrListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierOrListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierOrListContext)
}

func (s *AssemblyAssignmentContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyAssignment() (localctx IAssemblyAssignmentContext) {
	this := p
	_ = this

	localctx = NewAssemblyAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 154, SolidityParserRULE_assemblyAssignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(985)
		p.AssemblyIdentifierOrList()
	}
	{
		p.SetState(986)
		p.Match(SolidityParserT__89)
	}
	{
		p.SetState(987)
		p.AssemblyExpression()
	}



	return localctx
}


// IAssemblyIdentifierOrListContext is an interface to support dynamic dispatch.
type IAssemblyIdentifierOrListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIdentifierOrListContext differentiates from other interfaces.
	IsAssemblyIdentifierOrListContext()
}

type AssemblyIdentifierOrListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIdentifierOrListContext() *AssemblyIdentifierOrListContext {
	var p = new(AssemblyIdentifierOrListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierOrList
	return p
}

func (*AssemblyIdentifierOrListContext) IsAssemblyIdentifierOrListContext() {}

func NewAssemblyIdentifierOrListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIdentifierOrListContext {
	var p = new(AssemblyIdentifierOrListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierOrList

	return p
}

func (s *AssemblyIdentifierOrListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIdentifierOrListContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyIdentifierOrListContext) AssemblyMember() IAssemblyMemberContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyMemberContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyMemberContext)
}

func (s *AssemblyIdentifierOrListContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyIdentifierOrListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIdentifierOrListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyIdentifierOrList() (localctx IAssemblyIdentifierOrListContext) {
	this := p
	_ = this

	localctx = NewAssemblyIdentifierOrListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 156, SolidityParserRULE_assemblyIdentifierOrList)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(995)
	p.GetErrorHandler().Sync(p)
	switch p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(989)
			p.Identifier()
		}


	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(990)
			p.AssemblyMember()
		}


	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(991)
			p.Match(SolidityParserT__22)
		}
		{
			p.SetState(992)
			p.AssemblyIdentifierList()
		}
		{
			p.SetState(993)
			p.Match(SolidityParserT__23)
		}

	}


	return localctx
}


// IAssemblyIdentifierListContext is an interface to support dynamic dispatch.
type IAssemblyIdentifierListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIdentifierListContext differentiates from other interfaces.
	IsAssemblyIdentifierListContext()
}

type AssemblyIdentifierListContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIdentifierListContext() *AssemblyIdentifierListContext {
	var p = new(AssemblyIdentifierListContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierList
	return p
}

func (*AssemblyIdentifierListContext) IsAssemblyIdentifierListContext() {}

func NewAssemblyIdentifierListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIdentifierListContext {
	var p = new(AssemblyIdentifierListContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIdentifierList

	return p
}

func (s *AssemblyIdentifierListContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIdentifierListContext) AllIdentifier() []IIdentifierContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IIdentifierContext)(nil)).Elem())
	var tst = make([]IIdentifierContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IIdentifierContext)
		}
	}

	return tst
}

func (s *AssemblyIdentifierListContext) Identifier(i int) IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyIdentifierListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIdentifierListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyIdentifierList() (localctx IAssemblyIdentifierListContext) {
	this := p
	_ = this

	localctx = NewAssemblyIdentifierListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 158, SolidityParserRULE_assemblyIdentifierList)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(997)
		p.Identifier()
	}
	p.SetState(1002)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SolidityParserT__15 {
		{
			p.SetState(998)
			p.Match(SolidityParserT__15)
		}
		{
			p.SetState(999)
			p.Identifier()
		}


		p.SetState(1004)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAssemblyStackAssignmentContext is an interface to support dynamic dispatch.
type IAssemblyStackAssignmentContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyStackAssignmentContext differentiates from other interfaces.
	IsAssemblyStackAssignmentContext()
}

type AssemblyStackAssignmentContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyStackAssignmentContext() *AssemblyStackAssignmentContext {
	var p = new(AssemblyStackAssignmentContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyStackAssignment
	return p
}

func (*AssemblyStackAssignmentContext) IsAssemblyStackAssignmentContext() {}

func NewAssemblyStackAssignmentContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyStackAssignmentContext {
	var p = new(AssemblyStackAssignmentContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyStackAssignment

	return p
}

func (s *AssemblyStackAssignmentContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyStackAssignmentContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyStackAssignmentContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyStackAssignmentContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyStackAssignment() (localctx IAssemblyStackAssignmentContext) {
	this := p
	_ = this

	localctx = NewAssemblyStackAssignmentContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 160, SolidityParserRULE_assemblyStackAssignment)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1005)
		p.Match(SolidityParserT__90)
	}
	{
		p.SetState(1006)
		p.Identifier()
	}



	return localctx
}


// ILabelDefinitionContext is an interface to support dynamic dispatch.
type ILabelDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsLabelDefinitionContext differentiates from other interfaces.
	IsLabelDefinitionContext()
}

type LabelDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLabelDefinitionContext() *LabelDefinitionContext {
	var p = new(LabelDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_labelDefinition
	return p
}

func (*LabelDefinitionContext) IsLabelDefinitionContext() {}

func NewLabelDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LabelDefinitionContext {
	var p = new(LabelDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_labelDefinition

	return p
}

func (s *LabelDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *LabelDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LabelDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LabelDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) LabelDefinition() (localctx ILabelDefinitionContext) {
	this := p
	_ = this

	localctx = NewLabelDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 162, SolidityParserRULE_labelDefinition)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1008)
		p.Identifier()
	}
	{
		p.SetState(1009)
		p.Match(SolidityParserT__61)
	}



	return localctx
}


// IAssemblySwitchContext is an interface to support dynamic dispatch.
type IAssemblySwitchContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblySwitchContext differentiates from other interfaces.
	IsAssemblySwitchContext()
}

type AssemblySwitchContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblySwitchContext() *AssemblySwitchContext {
	var p = new(AssemblySwitchContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblySwitch
	return p
}

func (*AssemblySwitchContext) IsAssemblySwitchContext() {}

func NewAssemblySwitchContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblySwitchContext {
	var p = new(AssemblySwitchContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblySwitch

	return p
}

func (s *AssemblySwitchContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblySwitchContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblySwitchContext) AllAssemblyCase() []IAssemblyCaseContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyCaseContext)(nil)).Elem())
	var tst = make([]IAssemblyCaseContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyCaseContext)
		}
	}

	return tst
}

func (s *AssemblySwitchContext) AssemblyCase(i int) IAssemblyCaseContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyCaseContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyCaseContext)
}

func (s *AssemblySwitchContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblySwitchContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblySwitch() (localctx IAssemblySwitchContext) {
	this := p
	_ = this

	localctx = NewAssemblySwitchContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 164, SolidityParserRULE_assemblySwitch)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1011)
		p.Match(SolidityParserT__91)
	}
	{
		p.SetState(1012)
		p.AssemblyExpression()
	}
	p.SetState(1016)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	for _la == SolidityParserT__92 || _la == SolidityParserT__93 {
		{
			p.SetState(1013)
			p.AssemblyCase()
		}


		p.SetState(1018)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)
	}



	return localctx
}


// IAssemblyCaseContext is an interface to support dynamic dispatch.
type IAssemblyCaseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyCaseContext differentiates from other interfaces.
	IsAssemblyCaseContext()
}

type AssemblyCaseContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyCaseContext() *AssemblyCaseContext {
	var p = new(AssemblyCaseContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyCase
	return p
}

func (*AssemblyCaseContext) IsAssemblyCaseContext() {}

func NewAssemblyCaseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyCaseContext {
	var p = new(AssemblyCaseContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyCase

	return p
}

func (s *AssemblyCaseContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyCaseContext) AssemblyLiteral() IAssemblyLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyLiteralContext)
}

func (s *AssemblyCaseContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyCaseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyCaseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyCase() (localctx IAssemblyCaseContext) {
	this := p
	_ = this

	localctx = NewAssemblyCaseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 166, SolidityParserRULE_assemblyCase)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1025)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__92:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1019)
			p.Match(SolidityParserT__92)
		}
		{
			p.SetState(1020)
			p.AssemblyLiteral()
		}
		{
			p.SetState(1021)
			p.AssemblyBlock()
		}


	case SolidityParserT__93:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1023)
			p.Match(SolidityParserT__93)
		}
		{
			p.SetState(1024)
			p.AssemblyBlock()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// IAssemblyFunctionDefinitionContext is an interface to support dynamic dispatch.
type IAssemblyFunctionDefinitionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyFunctionDefinitionContext differentiates from other interfaces.
	IsAssemblyFunctionDefinitionContext()
}

type AssemblyFunctionDefinitionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyFunctionDefinitionContext() *AssemblyFunctionDefinitionContext {
	var p = new(AssemblyFunctionDefinitionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFunctionDefinition
	return p
}

func (*AssemblyFunctionDefinitionContext) IsAssemblyFunctionDefinitionContext() {}

func NewAssemblyFunctionDefinitionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyFunctionDefinitionContext {
	var p = new(AssemblyFunctionDefinitionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFunctionDefinition

	return p
}

func (s *AssemblyFunctionDefinitionContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyFunctionDefinitionContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyFunctionDefinitionContext) AssemblyFunctionReturns() IAssemblyFunctionReturnsContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyFunctionReturnsContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyFunctionReturnsContext)
}

func (s *AssemblyFunctionDefinitionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyFunctionDefinitionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyFunctionDefinition() (localctx IAssemblyFunctionDefinitionContext) {
	this := p
	_ = this

	localctx = NewAssemblyFunctionDefinitionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 168, SolidityParserRULE_assemblyFunctionDefinition)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1027)
		p.Match(SolidityParserT__29)
	}
	{
		p.SetState(1028)
		p.Identifier()
	}
	{
		p.SetState(1029)
		p.Match(SolidityParserT__22)
	}
	p.SetState(1031)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier {
		{
			p.SetState(1030)
			p.AssemblyIdentifierList()
		}

	}
	{
		p.SetState(1033)
		p.Match(SolidityParserT__23)
	}
	p.SetState(1035)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__94 {
		{
			p.SetState(1034)
			p.AssemblyFunctionReturns()
		}

	}
	{
		p.SetState(1037)
		p.AssemblyBlock()
	}



	return localctx
}


// IAssemblyFunctionReturnsContext is an interface to support dynamic dispatch.
type IAssemblyFunctionReturnsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyFunctionReturnsContext differentiates from other interfaces.
	IsAssemblyFunctionReturnsContext()
}

type AssemblyFunctionReturnsContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyFunctionReturnsContext() *AssemblyFunctionReturnsContext {
	var p = new(AssemblyFunctionReturnsContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFunctionReturns
	return p
}

func (*AssemblyFunctionReturnsContext) IsAssemblyFunctionReturnsContext() {}

func NewAssemblyFunctionReturnsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyFunctionReturnsContext {
	var p = new(AssemblyFunctionReturnsContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFunctionReturns

	return p
}

func (s *AssemblyFunctionReturnsContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyFunctionReturnsContext) AssemblyIdentifierList() IAssemblyIdentifierListContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyIdentifierListContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyIdentifierListContext)
}

func (s *AssemblyFunctionReturnsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyFunctionReturnsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyFunctionReturns() (localctx IAssemblyFunctionReturnsContext) {
	this := p
	_ = this

	localctx = NewAssemblyFunctionReturnsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 170, SolidityParserRULE_assemblyFunctionReturns)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1039)
		p.Match(SolidityParserT__94)
	}
	{
		p.SetState(1040)
		p.AssemblyIdentifierList()
	}




	return localctx
}


// IAssemblyForContext is an interface to support dynamic dispatch.
type IAssemblyForContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyForContext differentiates from other interfaces.
	IsAssemblyForContext()
}

type AssemblyForContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyForContext() *AssemblyForContext {
	var p = new(AssemblyForContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyFor
	return p
}

func (*AssemblyForContext) IsAssemblyForContext() {}

func NewAssemblyForContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyForContext {
	var p = new(AssemblyForContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyFor

	return p
}

func (s *AssemblyForContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyForContext) AllAssemblyExpression() []IAssemblyExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem())
	var tst = make([]IAssemblyExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyExpressionContext)
		}
	}

	return tst
}

func (s *AssemblyForContext) AssemblyExpression(i int) IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyForContext) AllAssemblyBlock() []IAssemblyBlockContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem())
	var tst = make([]IAssemblyBlockContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IAssemblyBlockContext)
		}
	}

	return tst
}

func (s *AssemblyForContext) AssemblyBlock(i int) IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyForContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyForContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyFor() (localctx IAssemblyForContext) {
	this := p
	_ = this

	localctx = NewAssemblyForContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 172, SolidityParserRULE_assemblyFor)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		p.Match(SolidityParserT__26)
	}
	p.SetState(1045)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__14:
		{
			p.SetState(1043)
			p.AssemblyBlock()
		}


	case SolidityParserT__13, SolidityParserT__24, SolidityParserT__35, SolidityParserT__41, SolidityParserT__50, SolidityParserT__53, SolidityParserT__57, SolidityParserT__95, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteralFragment, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier, SolidityParserStringLiteralFragment:
		{
			p.SetState(1044)
			p.AssemblyExpression()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1047)
		p.AssemblyExpression()
	}
	p.SetState(1050)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__14:
		{
			p.SetState(1048)
			p.AssemblyBlock()
		}


	case SolidityParserT__13, SolidityParserT__24, SolidityParserT__35, SolidityParserT__41, SolidityParserT__50, SolidityParserT__53, SolidityParserT__57, SolidityParserT__95, SolidityParserDecimalNumber, SolidityParserHexNumber, SolidityParserHexLiteralFragment, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier, SolidityParserStringLiteralFragment:
		{
			p.SetState(1049)
			p.AssemblyExpression()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}
	{
		p.SetState(1052)
		p.AssemblyBlock()
	}



	return localctx
}


// IAssemblyIfContext is an interface to support dynamic dispatch.
type IAssemblyIfContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyIfContext differentiates from other interfaces.
	IsAssemblyIfContext()
}

type AssemblyIfContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyIfContext() *AssemblyIfContext {
	var p = new(AssemblyIfContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyIf
	return p
}

func (*AssemblyIfContext) IsAssemblyIfContext() {}

func NewAssemblyIfContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyIfContext {
	var p = new(AssemblyIfContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyIf

	return p
}

func (s *AssemblyIfContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyIfContext) AssemblyExpression() IAssemblyExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyExpressionContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyExpressionContext)
}

func (s *AssemblyIfContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *AssemblyIfContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyIfContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyIf() (localctx IAssemblyIfContext) {
	this := p
	_ = this

	localctx = NewAssemblyIfContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 174, SolidityParserRULE_assemblyIf)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1054)
		p.Match(SolidityParserT__42)
	}
	{
		p.SetState(1055)
		p.AssemblyExpression()
	}
	{
		p.SetState(1056)
		p.AssemblyBlock()
	}



	return localctx
}


// IAssemblyLiteralContext is an interface to support dynamic dispatch.
type IAssemblyLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsAssemblyLiteralContext differentiates from other interfaces.
	IsAssemblyLiteralContext()
}

type AssemblyLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAssemblyLiteralContext() *AssemblyLiteralContext {
	var p = new(AssemblyLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_assemblyLiteral
	return p
}

func (*AssemblyLiteralContext) IsAssemblyLiteralContext() {}

func NewAssemblyLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AssemblyLiteralContext {
	var p = new(AssemblyLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_assemblyLiteral

	return p
}

func (s *AssemblyLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *AssemblyLiteralContext) StringLiteral() IStringLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IStringLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IStringLiteralContext)
}

func (s *AssemblyLiteralContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *AssemblyLiteralContext) HexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexNumber, 0)
}

func (s *AssemblyLiteralContext) HexLiteral() IHexLiteralContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IHexLiteralContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IHexLiteralContext)
}

func (s *AssemblyLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AssemblyLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) AssemblyLiteral() (localctx IAssemblyLiteralContext) {
	this := p
	_ = this

	localctx = NewAssemblyLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 176, SolidityParserRULE_assemblyLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1062)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserStringLiteralFragment:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1058)
			p.StringLiteral()
		}


	case SolidityParserDecimalNumber:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1059)
			p.Match(SolidityParserDecimalNumber)
		}


	case SolidityParserHexNumber:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(1060)
			p.Match(SolidityParserHexNumber)
		}


	case SolidityParserHexLiteralFragment:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(1061)
			p.HexLiteral()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ISubAssemblyContext is an interface to support dynamic dispatch.
type ISubAssemblyContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsSubAssemblyContext differentiates from other interfaces.
	IsSubAssemblyContext()
}

type SubAssemblyContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySubAssemblyContext() *SubAssemblyContext {
	var p = new(SubAssemblyContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_subAssembly
	return p
}

func (*SubAssemblyContext) IsSubAssemblyContext() {}

func NewSubAssemblyContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SubAssemblyContext {
	var p = new(SubAssemblyContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_subAssembly

	return p
}

func (s *SubAssemblyContext) GetParser() antlr.Parser { return s.parser }

func (s *SubAssemblyContext) Identifier() IIdentifierContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IIdentifierContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *SubAssemblyContext) AssemblyBlock() IAssemblyBlockContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IAssemblyBlockContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IAssemblyBlockContext)
}

func (s *SubAssemblyContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SubAssemblyContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) SubAssembly() (localctx ISubAssemblyContext) {
	this := p
	_ = this

	localctx = NewSubAssemblyContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 178, SolidityParserRULE_subAssembly)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1064)
		p.Match(SolidityParserT__48)
	}
	{
		p.SetState(1065)
		p.Identifier()
	}
	{
		p.SetState(1066)
		p.AssemblyBlock()
	}



	return localctx
}


// ITupleExpressionContext is an interface to support dynamic dispatch.
type ITupleExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTupleExpressionContext differentiates from other interfaces.
	IsTupleExpressionContext()
}

type TupleExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExpressionContext() *TupleExpressionContext {
	var p = new(TupleExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_tupleExpression
	return p
}

func (*TupleExpressionContext) IsTupleExpressionContext() {}

func NewTupleExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExpressionContext {
	var p = new(TupleExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_tupleExpression

	return p
}

func (s *TupleExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExpressionContext) AllExpression() []IExpressionContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IExpressionContext)(nil)).Elem())
	var tst = make([]IExpressionContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IExpressionContext)
		}
	}

	return tst
}

func (s *TupleExpressionContext) Expression(i int) IExpressionContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IExpressionContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IExpressionContext)
}

func (s *TupleExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) TupleExpression() (localctx ITupleExpressionContext) {
	this := p
	_ = this

	localctx = NewTupleExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 180, SolidityParserRULE_tupleExpression)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1094)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__22:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1068)
			p.Match(SolidityParserT__22)
		}

		p.SetState(1070)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
			{
				p.SetState(1069)
				p.expression(0)
			}

		}
		p.SetState(1078)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(1072)
				p.Match(SolidityParserT__15)
			}
			p.SetState(1074)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
				{
					p.SetState(1073)
					p.expression(0)
				}

			}


			p.SetState(1080)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}

		{
			p.SetState(1081)
			p.Match(SolidityParserT__23)
		}


	case SolidityParserT__33:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1082)
			p.Match(SolidityParserT__33)
		}
		p.SetState(1091)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		if (((_la) & -(0x1f+1)) == 0 && ((1 << uint(_la)) & ((1 << SolidityParserT__4) | (1 << SolidityParserT__13) | (1 << SolidityParserT__22) | (1 << SolidityParserT__24))) != 0) || ((((_la - 34)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 34))) & ((1 << (SolidityParserT__33 - 34)) | (1 << (SolidityParserT__35 - 34)) | (1 << (SolidityParserT__41 - 34)) | (1 << (SolidityParserT__53 - 34)) | (1 << (SolidityParserT__54 - 34)) | (1 << (SolidityParserT__55 - 34)) | (1 << (SolidityParserT__56 - 34)) | (1 << (SolidityParserT__57 - 34)) | (1 << (SolidityParserT__58 - 34)) | (1 << (SolidityParserT__59 - 34)) | (1 << (SolidityParserT__60 - 34)) | (1 << (SolidityParserT__62 - 34)) | (1 << (SolidityParserT__63 - 34)) | (1 << (SolidityParserT__64 - 34)))) != 0) || ((((_la - 66)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 66))) & ((1 << (SolidityParserT__65 - 66)) | (1 << (SolidityParserT__66 - 66)) | (1 << (SolidityParserT__95 - 66)))) != 0) || ((((_la - 98)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 98))) & ((1 << (SolidityParserInt - 98)) | (1 << (SolidityParserUint - 98)) | (1 << (SolidityParserByte - 98)) | (1 << (SolidityParserFixed - 98)) | (1 << (SolidityParserUfixed - 98)) | (1 << (SolidityParserBooleanLiteral - 98)) | (1 << (SolidityParserDecimalNumber - 98)) | (1 << (SolidityParserHexNumber - 98)) | (1 << (SolidityParserHexLiteralFragment - 98)) | (1 << (SolidityParserLeaveKeyword - 98)) | (1 << (SolidityParserPayableKeyword - 98)) | (1 << (SolidityParserTypeKeyword - 98)) | (1 << (SolidityParserConstructorKeyword - 98)) | (1 << (SolidityParserReceiveKeyword - 98)) | (1 << (SolidityParserIdentifier - 98)) | (1 << (SolidityParserStringLiteralFragment - 98)))) != 0) {
			{
				p.SetState(1083)
				p.expression(0)
			}
			p.SetState(1088)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)


			for _la == SolidityParserT__15 {
				{
					p.SetState(1084)
					p.Match(SolidityParserT__15)
				}
				{
					p.SetState(1085)
					p.expression(0)
				}


				p.SetState(1090)
				p.GetErrorHandler().Sync(p)
				_la = p.GetTokenStream().LA(1)
			}

		}
		{
			p.SetState(1093)
			p.Match(SolidityParserT__34)
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// ITypeNameExpressionContext is an interface to support dynamic dispatch.
type ITypeNameExpressionContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsTypeNameExpressionContext differentiates from other interfaces.
	IsTypeNameExpressionContext()
}

type TypeNameExpressionContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeNameExpressionContext() *TypeNameExpressionContext {
	var p = new(TypeNameExpressionContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_typeNameExpression
	return p
}

func (*TypeNameExpressionContext) IsTypeNameExpressionContext() {}

func NewTypeNameExpressionContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeNameExpressionContext {
	var p = new(TypeNameExpressionContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_typeNameExpression

	return p
}

func (s *TypeNameExpressionContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeNameExpressionContext) ElementaryTypeName() IElementaryTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IElementaryTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IElementaryTypeNameContext)
}

func (s *TypeNameExpressionContext) UserDefinedTypeName() IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), 0)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *TypeNameExpressionContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeNameExpressionContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) TypeNameExpression() (localctx ITypeNameExpressionContext) {
	this := p
	_ = this

	localctx = NewTypeNameExpressionContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 182, SolidityParserRULE_typeNameExpression)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.SetState(1098)
	p.GetErrorHandler().Sync(p)

	switch p.GetTokenStream().LA(1) {
	case SolidityParserT__35, SolidityParserT__54, SolidityParserT__55, SolidityParserT__56, SolidityParserT__57, SolidityParserInt, SolidityParserUint, SolidityParserByte, SolidityParserFixed, SolidityParserUfixed:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(1096)
			p.ElementaryTypeName()
		}


	case SolidityParserT__13, SolidityParserT__24, SolidityParserT__41, SolidityParserT__53, SolidityParserT__95, SolidityParserLeaveKeyword, SolidityParserPayableKeyword, SolidityParserConstructorKeyword, SolidityParserReceiveKeyword, SolidityParserIdentifier:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(1097)
			p.UserDefinedTypeName()
		}



	default:
		panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
	}


	return localctx
}


// INumberLiteralContext is an interface to support dynamic dispatch.
type INumberLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsNumberLiteralContext differentiates from other interfaces.
	IsNumberLiteralContext()
}

type NumberLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyNumberLiteralContext() *NumberLiteralContext {
	var p = new(NumberLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_numberLiteral
	return p
}

func (*NumberLiteralContext) IsNumberLiteralContext() {}

func NewNumberLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *NumberLiteralContext {
	var p = new(NumberLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_numberLiteral

	return p
}

func (s *NumberLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *NumberLiteralContext) DecimalNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserDecimalNumber, 0)
}

func (s *NumberLiteralContext) HexNumber() antlr.TerminalNode {
	return s.GetToken(SolidityParserHexNumber, 0)
}

func (s *NumberLiteralContext) NumberUnit() antlr.TerminalNode {
	return s.GetToken(SolidityParserNumberUnit, 0)
}

func (s *NumberLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *NumberLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) NumberLiteral() (localctx INumberLiteralContext) {
	this := p
	_ = this

	localctx = NewNumberLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 184, SolidityParserRULE_numberLiteral)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1100)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserDecimalNumber || _la == SolidityParserHexNumber) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(1102)
	p.GetErrorHandler().Sync(p)


	if p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 121, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(1101)
			p.Match(SolidityParserNumberUnit)
		}


	}



	return localctx
}


// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_identifier
	return p
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) ReceiveKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserReceiveKeyword, 0)
}

func (s *IdentifierContext) ConstructorKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserConstructorKeyword, 0)
}

func (s *IdentifierContext) PayableKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserPayableKeyword, 0)
}

func (s *IdentifierContext) LeaveKeyword() antlr.TerminalNode {
	return s.GetToken(SolidityParserLeaveKeyword, 0)
}

func (s *IdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(SolidityParserIdentifier, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) Identifier() (localctx IIdentifierContext) {
	this := p
	_ = this

	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 186, SolidityParserRULE_identifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1104)
		_la = p.GetTokenStream().LA(1)

		if !(_la == SolidityParserT__13 || _la == SolidityParserT__24 || _la == SolidityParserT__41 || _la == SolidityParserT__53 || ((((_la - 96)) & -(0x1f+1)) == 0 && ((1 << uint((_la - 96))) & ((1 << (SolidityParserT__95 - 96)) | (1 << (SolidityParserLeaveKeyword - 96)) | (1 << (SolidityParserPayableKeyword - 96)) | (1 << (SolidityParserConstructorKeyword - 96)) | (1 << (SolidityParserReceiveKeyword - 96)))) != 0) || _la == SolidityParserIdentifier) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}



	return localctx
}


// IHexLiteralContext is an interface to support dynamic dispatch.
type IHexLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsHexLiteralContext differentiates from other interfaces.
	IsHexLiteralContext()
}

type HexLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyHexLiteralContext() *HexLiteralContext {
	var p = new(HexLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_hexLiteral
	return p
}

func (*HexLiteralContext) IsHexLiteralContext() {}

func NewHexLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *HexLiteralContext {
	var p = new(HexLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_hexLiteral

	return p
}

func (s *HexLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *HexLiteralContext) AllHexLiteralFragment() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserHexLiteralFragment)
}

func (s *HexLiteralContext) HexLiteralFragment(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserHexLiteralFragment, i)
}

func (s *HexLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *HexLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) HexLiteral() (localctx IHexLiteralContext) {
	this := p
	_ = this

	localctx = NewHexLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 188, SolidityParserRULE_hexLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1107)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
				{
					p.SetState(1106)
					p.Match(SolidityParserHexLiteralFragment)
				}




		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1109)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 122, p.GetParserRuleContext())
	}



	return localctx
}


// IOverrideSpecifierContext is an interface to support dynamic dispatch.
type IOverrideSpecifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsOverrideSpecifierContext differentiates from other interfaces.
	IsOverrideSpecifierContext()
}

type OverrideSpecifierContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyOverrideSpecifierContext() *OverrideSpecifierContext {
	var p = new(OverrideSpecifierContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_overrideSpecifier
	return p
}

func (*OverrideSpecifierContext) IsOverrideSpecifierContext() {}

func NewOverrideSpecifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *OverrideSpecifierContext {
	var p = new(OverrideSpecifierContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_overrideSpecifier

	return p
}

func (s *OverrideSpecifierContext) GetParser() antlr.Parser { return s.parser }

func (s *OverrideSpecifierContext) AllUserDefinedTypeName() []IUserDefinedTypeNameContext {
	var ts = s.GetTypedRuleContexts(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem())
	var tst = make([]IUserDefinedTypeNameContext, len(ts))

	for i, t := range ts {
		if t != nil {
			tst[i] = t.(IUserDefinedTypeNameContext)
		}
	}

	return tst
}

func (s *OverrideSpecifierContext) UserDefinedTypeName(i int) IUserDefinedTypeNameContext {
	var t = s.GetTypedRuleContext(reflect.TypeOf((*IUserDefinedTypeNameContext)(nil)).Elem(), i)

	if t == nil {
		return nil
	}

	return t.(IUserDefinedTypeNameContext)
}

func (s *OverrideSpecifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *OverrideSpecifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) OverrideSpecifier() (localctx IOverrideSpecifierContext) {
	this := p
	_ = this

	localctx = NewOverrideSpecifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 190, SolidityParserRULE_overrideSpecifier)
	var _la int


	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1111)
		p.Match(SolidityParserT__96)
	}
	p.SetState(1123)
	p.GetErrorHandler().Sync(p)
	_la = p.GetTokenStream().LA(1)


	if _la == SolidityParserT__22 {
		{
			p.SetState(1112)
			p.Match(SolidityParserT__22)
		}
		{
			p.SetState(1113)
			p.UserDefinedTypeName()
		}
		p.SetState(1118)
		p.GetErrorHandler().Sync(p)
		_la = p.GetTokenStream().LA(1)


		for _la == SolidityParserT__15 {
			{
				p.SetState(1114)
				p.Match(SolidityParserT__15)
			}
			{
				p.SetState(1115)
				p.UserDefinedTypeName()
			}


			p.SetState(1120)
			p.GetErrorHandler().Sync(p)
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(1121)
			p.Match(SolidityParserT__23)
		}

	}



	return localctx
}


// IStringLiteralContext is an interface to support dynamic dispatch.
type IStringLiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// IsStringLiteralContext differentiates from other interfaces.
	IsStringLiteralContext()
}

type StringLiteralContext struct {
	*antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStringLiteralContext() *StringLiteralContext {
	var p = new(StringLiteralContext)
	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(nil, -1)
	p.RuleIndex = SolidityParserRULE_stringLiteral
	return p
}

func (*StringLiteralContext) IsStringLiteralContext() {}

func NewStringLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StringLiteralContext {
	var p = new(StringLiteralContext)

	p.BaseParserRuleContext = antlr.NewBaseParserRuleContext(parent, invokingState)

	p.parser = parser
	p.RuleIndex = SolidityParserRULE_stringLiteral

	return p
}

func (s *StringLiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *StringLiteralContext) AllStringLiteralFragment() []antlr.TerminalNode {
	return s.GetTokens(SolidityParserStringLiteralFragment)
}

func (s *StringLiteralContext) StringLiteralFragment(i int) antlr.TerminalNode {
	return s.GetToken(SolidityParserStringLiteralFragment, i)
}

func (s *StringLiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StringLiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}




func (p *SolidityParser) StringLiteral() (localctx IStringLiteralContext) {
	this := p
	_ = this

	localctx = NewStringLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 192, SolidityParserRULE_stringLiteral)

	defer func() {
		p.ExitRule()
	}()

	defer func() {
		if err := recover(); err != nil {
			if v, ok := err.(antlr.RecognitionException); ok {
				localctx.SetException(v)
				p.GetErrorHandler().ReportError(p, v)
				p.GetErrorHandler().Recover(p, v)
			} else {
				panic(err)
			}
		}
	}()

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(1126)
	p.GetErrorHandler().Sync(p)
	_alt = 1
	for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		switch _alt {
		case 1:
				{
					p.SetState(1125)
					p.Match(SolidityParserStringLiteralFragment)
				}




		default:
			panic(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		}

		p.SetState(1128)
		p.GetErrorHandler().Sync(p)
		_alt = p.GetInterpreter().AdaptivePredict(p.GetTokenStream(), 125, p.GetParserRuleContext())
	}



	return localctx
}


func (p *SolidityParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 35:
			var t *TypeNameContext = nil
			if localctx != nil { t = localctx.(*TypeNameContext) }
			return p.TypeName_Sempred(t, predIndex)

	case 64:
			var t *ExpressionContext = nil
			if localctx != nil { t = localctx.(*ExpressionContext) }
			return p.Expression_Sempred(t, predIndex)


	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *SolidityParser) TypeName_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 0:
			return p.Precpred(p.GetParserRuleContext(), 3)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *SolidityParser) Expression_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	this := p
	_ = this

	switch predIndex {
	case 1:
			return p.Precpred(p.GetParserRuleContext(), 14)

	case 2:
			return p.Precpred(p.GetParserRuleContext(), 13)

	case 3:
			return p.Precpred(p.GetParserRuleContext(), 12)

	case 4:
			return p.Precpred(p.GetParserRuleContext(), 11)

	case 5:
			return p.Precpred(p.GetParserRuleContext(), 10)

	case 6:
			return p.Precpred(p.GetParserRuleContext(), 9)

	case 7:
			return p.Precpred(p.GetParserRuleContext(), 8)

	case 8:
			return p.Precpred(p.GetParserRuleContext(), 7)

	case 9:
			return p.Precpred(p.GetParserRuleContext(), 6)

	case 10:
			return p.Precpred(p.GetParserRuleContext(), 5)

	case 11:
			return p.Precpred(p.GetParserRuleContext(), 4)

	case 12:
			return p.Precpred(p.GetParserRuleContext(), 3)

	case 13:
			return p.Precpred(p.GetParserRuleContext(), 2)

	case 14:
			return p.Precpred(p.GetParserRuleContext(), 27)

	case 15:
			return p.Precpred(p.GetParserRuleContext(), 25)

	case 16:
			return p.Precpred(p.GetParserRuleContext(), 24)

	case 17:
			return p.Precpred(p.GetParserRuleContext(), 23)

	case 18:
			return p.Precpred(p.GetParserRuleContext(), 22)

	case 19:
			return p.Precpred(p.GetParserRuleContext(), 21)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

